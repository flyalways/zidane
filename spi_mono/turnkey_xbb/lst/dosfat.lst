C51 COMPILER V9.00   DOSFAT                                                                07/09/2012 21:16:46 PAGE 1   


C51 COMPILER V9.00, COMPILATION OF MODULE DOSFAT
OBJECT MODULE PLACED IN .\obj\dosfat.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE DOS\dosfat.c LARGE OPTIMIZE(9,SIZE) BROWSE NOAREGS INCDIR(..\libsource\head
                    -er) DEFINE(K_ICTYPE=0x03) DEBUG OBJECTEXTEND PRINT(.\lst\dosfat.lst) OBJECT(.\obj\dosfat.obj)

line level    source

   1          #include <string.h>
   2          #include "..\header\SPDA2K.h"
   3          #include "..\header\variables.h"
   4          
   5          
   6          U8 DOS_ConnectFATChain(U32 tdw_StartCluster,U32 tdw_TailCluster)
   7          {
   8   1              data    bit     tb_End;
   9   1              data    bit     tb_ChainEndFlag=0;
  10   1              data    U8      tc_Status;
  11   1              xdata   U16     tw_ValidPoint;
  12   1              xdata   U16     tw_ValidSize;
  13   1              xdata   U16     tw_ArrayNum;
  14   1              xdata   U16     tw_Offset;
  15   1              data    U8      tc_ConnectMode;
  16   1              xdata   U32     tdw_CopyStartCluster;
  17   1              xdata   U32     tdw_CopyEndCluster;
  18   1              xdata   U32 tdw_CurrentCluster;
  19   1              xdata   U32 tdw_NextCluster;
  20   1              xdata   U32     tdw_CurrentSector;
  21   1              xdata   U32 tdw_NextSector;
  22   1              xdata   U32 tdw_TempBuffer[8];
  23   1              xdata   U32     tdw_FreeClusterNum;
  24   1      
  25   1              //backup DOS_SearchFreeCluster's global variable to temp
  26   1              memcpy(tdw_TempBuffer,gdw_ClusterBuffer,32);
  27   1              tw_ValidPoint=gw_ClusBufValidPoint;
  28   1              tw_ValidSize=gw_ClusBufValidSize;
  29   1              tdw_FreeClusterNum=gdw_FreeClusterNum[0];
  30   1      
  31   1              //confirm FAT copy end address
  32   1              if(tdw_StartCluster>tdw_TailCluster)
  33   1              {
  34   2                      tdw_CopyEndCluster=tdw_StartCluster;    
  35   2              }
  36   1              else
  37   1              {
  38   2                      tdw_CopyEndCluster=tdw_TailCluster;     
  39   2              }
  40   1              
  41   1              if(tdw_StartCluster==tdw_TailCluster)
  42   1              {//only connect 0xffffffff to StartCluster
  43   2                      tc_ConnectMode=0;
  44   2                      tdw_CopyStartCluster=tdw_StartCluster;          //confirm start address of FAT Copy 
  45   2              }
  46   1              else if(DOS_GetNextCluster(tdw_StartCluster,1)==0)
  47   1              {//Create new file's FAT chain  
  48   2                      tc_ConnectMode=1;
  49   2                      tdw_CopyStartCluster=tdw_StartCluster;          //confirm start address of FAT Copy                             
  50   2              }
  51   1              else
  52   1              {//Connect to exist file's FAT chain
  53   2                      tc_ConnectMode=2;
  54   2                      tdw_CopyStartCluster=2;                                         //confirm start address of FAT Copy
C51 COMPILER V9.00   DOSFAT                                                                07/09/2012 21:16:46 PAGE 2   

  55   2              }
  56   1              tdw_CurrentCluster=tdw_StartCluster;
  57   1              DOS_MarkFATUpdate(gdw_DOS_Fat1Addr,0xaa);                       //mark FAT1 is updating now
  58   1      
  59   1              tb_End=0;
  60   1              tdw_CurrentSector=(tdw_CurrentCluster<<gc_DOS_FileSystemType)>>9;
  61   1              gb_ReadWriteDataArea=0;
  62   1              tc_Status=DOS_Read_LogicSector(gdw_DOS_Fat1Addr+tdw_CurrentSector);
  63   1              if(tc_Status)
  64   1              {
  65   2                      return tc_Status;
  66   2              }
  67   1              //do connect chain
  68   1      
  69   1              while(!tb_ChainEndFlag)
  70   1              {//search free cluster initialize
  71   2                      gw_ClusBufValidPoint=0;
  72   2                      gw_ClusBufValidSize=1;
  73   2                      
  74   2                      if(tc_ConnectMode==2)                                           //(JC)Connect to exist file's FAT chain
  75   2                      {//search free cluster from start
  76   3                              gdw_ClusterBuffer[1]=tdw_TailCluster;
  77   3                      }
  78   2                      else if(tc_ConnectMode==1)                                      //Create new file's FAT chain 
  79   2                      {
  80   3                              gdw_FreeClusterNum[0]=tdw_CurrentCluster;
  81   3                              while((gw_ClusBufValidSize<512)&&(gdw_FreeClusterNum[0]<(gdw_DOS_FatMaxCluster-1))) 
  82   3                              {
  83   4                                      DOS_SearchFreeCluster(0);
  84   4                              }
  85   3                      }
  86   2                                      
  87   2                      for(tw_ArrayNum=1;tw_ArrayNum<512;tw_ArrayNum++)
  88   2                      {
  89   3                              tw_Offset=(tdw_CurrentCluster<<gc_DOS_FileSystemType)&0x01FF;           
  90   3                              if (tdw_CurrentCluster==tdw_TailCluster)
  91   3                              {//final a cluster chain
  92   4                                      tdw_NextCluster=0xFFFFFFFF;
  93   4                              }
  94   3                              else
  95   3                              {//get next cluster chain value
  96   4                                      tdw_NextCluster=gdw_ClusterBuffer[tw_ArrayNum];
  97   4                              }
  98   3                              //write next cluster number into previous cluster entry
  99   3                              gc_PlayRecordDataBuf[tw_Offset]=((U8 *)(&tdw_NextCluster))[3];
 100   3                              gc_PlayRecordDataBuf[tw_Offset+1]=((U8 *)(&tdw_NextCluster))[2];
 101   3                              if(gc_DOS_FileSystemType==0x02)
 102   3                              {//FAT32
 103   4                                      gc_PlayRecordDataBuf[tw_Offset+2]=((U8 *)(&tdw_NextCluster))[1];
 104   4                                      gc_PlayRecordDataBuf[tw_Offset+3]=((U8 *)(&tdw_NextCluster))[0];
 105   4                              }
 106   3      
 107   3                              if(tdw_NextCluster==0xFFFFFFFF)
 108   3                              {
 109   4                                      tb_End=1;
 110   4                                      tb_ChainEndFlag=1;
 111   4                                      break;
 112   4                              }
 113   3                              tdw_NextSector=(tdw_NextCluster<<gc_DOS_FileSystemType)>>9;
 114   3                              tdw_CurrentCluster=tdw_NextCluster;
 115   3                                      
 116   3                              if(tdw_NextSector!=tdw_CurrentSector)
C51 COMPILER V9.00   DOSFAT                                                                07/09/2012 21:16:46 PAGE 3   

 117   3                              {
 118   4                                      tb_End=0;
 119   4                                      gb_ReadWriteDataArea=0;
 120   4                                      tc_Status=DOS_Write_LogicSector(gdw_DOS_Fat1Addr+tdw_CurrentSector,3);
 121   4                                      if(tc_Status)
 122   4                                      {
 123   5                                              return tc_Status;
 124   5                                      }
 125   4                                      tc_Status=DOS_Write_LogicSector(gdw_DOS_Fat2Addr+tdw_CurrentSector,3);
 126   4                                      if(tc_Status)
 127   4                                      {
 128   5                                              return tc_Status;
 129   5                                      }
 130   4      
 131   4                                      tdw_CurrentSector=tdw_NextSector;
 132   4                                      tc_Status=DOS_Read_LogicSector(gdw_DOS_Fat1Addr+tdw_NextSector);
 133   4                                      if(tc_Status)
 134   4                                      {
 135   5                                              return tc_Status;
 136   5                                      }
 137   4                              }
 138   3                      }
 139   2                      
 140   2                      if(tb_End)
 141   2                      {
 142   3                              gb_ReadWriteDataArea=0;
 143   3                              tc_Status=DOS_Write_LogicSector(gdw_DOS_Fat1Addr+tdw_CurrentSector,3);
 144   3                              if (tc_Status)
 145   3                              {
 146   4                                      return tc_Status;
 147   4                              }
 148   3                              tc_Status=DOS_Write_LogicSector(gdw_DOS_Fat2Addr+tdw_CurrentSector,3);
 149   3                              if (tc_Status)
 150   3                              {
 151   4                                      return tc_Status;
 152   4                              }
 153   3                      }
 154   2              }
 155   1      
 156   1              DOS_MarkFATUpdate(gdw_DOS_Fat1Addr,0xF8);                               //mark updating is complete
 157   1              memcpy(gdw_ClusterBuffer,tdw_TempBuffer,32);
 158   1              gw_ClusBufValidPoint=tw_ValidPoint;
 159   1              gw_ClusBufValidSize=tw_ValidSize;
 160   1              gdw_FreeClusterNum[0]=tdw_FreeClusterNum;
 161   1              return tc_Status;
 162   1      }
 163          
 164          U32 GetValidClusterCnt(void)
 165          {
 166   1              U32 tdw_ClusterCnt;
 167   1      
 168   1              tdw_ClusterCnt=gdw_ClusterBuffer[gw_ClusBufValidPoint];//get a cluster content
 169   1              gw_ClusBufValidPoint++;
 170   1              if(gw_ClusBufValidPoint>=512)
 171   1              {                               
 172   2                      gw_ClusBufValidPoint=0;                                                 //if array full,reset the point
 173   2              }
 174   1              gw_ClusBufValidSize--;                                                          //the number of valid cluster minus 1
 175   1              return  tdw_ClusterCnt;
 176   1      }
 177          
 178          
C51 COMPILER V9.00   DOSFAT                                                                07/09/2012 21:16:46 PAGE 4   

 179          U32 DOS_GetAFreeCluster(void)
 180          {
 181   1              if((gw_ClusBufValidSize<512)&&(gdw_FreeClusterNum[0]<(gdw_DOS_FatMaxCluster-1))) 
 182   1              {
 183   2                      DOS_SearchFreeCluster(0);//search cluster from flash fat table
 184   2              }
 185   1                              
 186   1              if(gw_ClusBufValidSize==0)//(JC)search none
 187   1              {
 188   2                      return 0;
 189   2              }
 190   1              else
 191   1              {
 192   2                      return GetValidClusterCnt();
 193   2              }
 194   1      }
 195          
 196          
 197          //---------------------------------------------------------------
 198          //! Mark the 1st byte of FAT
 199          /*! Mark the 1st byte of FAT sector while updating.
 200           *      \param  tdw_MarkFATAddr         The FAT LBA.
 201           *      \param  tc_MarkValue            The byte mark to be written.
 202           *      \return DOS_SUCCESS(0) or DOS_FALSE(1)
 203           */
 204          U8 DOS_MarkFATUpdate(U32 tdw_MarkFATAddr,U8 tc_MarkValue)
 205          {
 206   1              xdata   U8      tc_Status;
 207   1                      
 208   1              gb_ReadWriteDataArea=0;                                                 //select gc_PlayRecordDataBuf[]
 209   1              tc_Status=DOS_Read_LogicSector(tdw_MarkFATAddr);//read sector
 210   1              if(tc_Status==0)
 211   1              {
 212   2                      gc_PlayRecordDataBuf[0]=tc_MarkValue;                   //mark first byte
 213   2                      tc_Status=DOS_Write_LogicSector(tdw_MarkFATAddr,3);//write sector       
 214   2              }
 215   1              return tc_Status;
 216   1      }
 217          
 218          bit CreateFolder_VOICE(void)
 219          {
 220   1              data    U32     tdw_ClusterCnt;
 221   1              data    U32     tdw_ClusterCnt1;
 222   1              data    U32     tdw_SectorCnt;
 223   1              xdata   U8      i;
 224   1              xdata   U16     tw_Addr;
 225   1              xdata   U32     tdw_FATValue;
 226   1              idata   SearchFdb *p_mp;
 227   1              idata   SearchFdb temp;
 228   1      
 229   1              p_mp=&temp;
 230   1              p_mp->c_Search_Mode=K_FIND_FREE_FDB;
 231   1              p_mp->dw_FDB_StartCluster=gdw_DOS_RootDirClus;
 232   1              p_mp->c_Search_Attribute=0;
 233   1              if(Find_Fdb(p_mp))      //no free fdb
 234   1              {
 235   2                      if(gs_File_FCB[1].dw_FDB_StartCluster<2&&gc_DOS_FileSystemType==1)      // find no free FDB in root dir entry
             -(FAT16)
 236   2                      {//if root dir is full
 237   3                              return 1;
 238   3                      }
 239   2      
C51 COMPILER V9.00   DOSFAT                                                                07/09/2012 21:16:46 PAGE 5   

 240   2                      tdw_ClusterCnt=DOS_GetAFreeCluster();   //get a free cluster for FDB(FAT32)
 241   2                      if(!tdw_ClusterCnt)
 242   2                      {
 243   3                              return 1;
 244   3                      }
 245   2                      else
 246   2                      {
 247   3                              tdw_ClusterCnt1=gdw_DOS_RootDirClus;
 248   3                              // Connect FAT chain for Add new cluster of Root DIR
 249   3                              while(1)
 250   3                              {
 251   4                                      tdw_SectorCnt=gdw_DOS_Fat1Addr+tdw_ClusterCnt1/(512/(1<<gc_DOS_FileSystemType));
 252   4                                      DOS_Read_LogicSector(tdw_SectorCnt);
 253   4                                      tw_Addr=(tdw_ClusterCnt1%(512/(1<<gc_DOS_FileSystemType)))*(1<<gc_DOS_FileSystemType);
 254   4                                      tdw_FATValue=gc_UserDataBuf[tw_Addr]+(gc_UserDataBuf[tw_Addr+1]<<8);
 255   4      
 256   4                                      if(gc_DOS_FileSystemType==1)
 257   4                                      {
 258   5                                              tdw_FATValue=gc_UserDataBuf[tw_Addr+1];
 259   5                                              tdw_FATValue=(tdw_FATValue<<8)+gc_UserDataBuf[tw_Addr+0];
 260   5                                              if(tdw_FATValue==0xFFFF)
 261   5                                              {
 262   6                                                      gc_UserDataBuf[tw_Addr+0]=tdw_ClusterCnt;
 263   6                                                      gc_UserDataBuf[tw_Addr+1]=tdw_ClusterCnt>>8;
 264   6                                                      break;
 265   6                                              }
 266   5                                      }
 267   4                                      else
 268   4                                      {
 269   5                                              tdw_FATValue=gc_UserDataBuf[tw_Addr+3];
 270   5                                              tdw_FATValue=(tdw_FATValue<<8)+gc_UserDataBuf[tw_Addr+2];
 271   5                                              tdw_FATValue=(tdw_FATValue<<8)+gc_UserDataBuf[tw_Addr+1];
 272   5                                              tdw_FATValue=(tdw_FATValue<<8)+gc_UserDataBuf[tw_Addr+0];
 273   5                                              if(tdw_FATValue>=0x0FFFFFFF)
 274   5                                              {
 275   6                                                      gc_UserDataBuf[tw_Addr+0]=tdw_ClusterCnt;
 276   6                                                      gc_UserDataBuf[tw_Addr+1]=tdw_ClusterCnt>>8;
 277   6                                                      gc_UserDataBuf[tw_Addr+2]=tdw_ClusterCnt>>16;
 278   6                                                      gc_UserDataBuf[tw_Addr+3]=tdw_ClusterCnt>>24;
 279   6                                                      break;
 280   6                                              }
 281   5                                      }
 282   4                              }
 283   3      
 284   3                              // Write FAT1 & FAT2(Root DIR)
 285   3                              DOS_Write_LogicSector(tdw_SectorCnt,3);
 286   3                              DOS_Write_LogicSector(tdw_SectorCnt-gdw_DOS_Fat1Addr+gdw_DOS_Fat2Addr,3);
 287   3                              tdw_SectorCnt=gdw_DOS_Fat1Addr+tdw_ClusterCnt/(512/(1<<gc_DOS_FileSystemType));
 288   3                              DOS_Read_LogicSector(tdw_SectorCnt);
 289   3                              tw_Addr=(tdw_ClusterCnt%(512/(1<<gc_DOS_FileSystemType)))*(1<<gc_DOS_FileSystemType);
 290   3                              gc_UserDataBuf[tw_Addr+0]=0xFF;
 291   3                              gc_UserDataBuf[tw_Addr+1]=0xFF;
 292   3                              if(gc_DOS_FileSystemType==2)
 293   3                              {
 294   4                                      gc_UserDataBuf[tw_Addr+2]=0xFF;
 295   4                                      gc_UserDataBuf[tw_Addr+3]=0x0F;
 296   4                              }
 297   3                              DOS_Write_LogicSector(tdw_SectorCnt,3);
 298   3                              DOS_Write_LogicSector(tdw_SectorCnt-gdw_DOS_Fat1Addr+gdw_DOS_Fat2Addr,3);
 299   3      
 300   3                              // Clear New Root FDB Area & Fill "VOICE" folder data into Root FDB
 301   3                              tdw_SectorCnt=(tdw_ClusterCnt-2)*gc_DOS_SectorPerCluster+gdw_DOS_DataAddr;
C51 COMPILER V9.00   DOSFAT                                                                07/09/2012 21:16:46 PAGE 6   

 302   3                              tdw_ClusterCnt1=DOS_GetAFreeCluster();
 303   3                              for(i=0;i<gc_DOS_SectorPerCluster;i++)
 304   3                              {
 305   4                                      if(i==0)
 306   4                                      {
 307   5                                              memset(&gc_UserDataBuf[0],0,512);
 308   5                                              gc_UserDataBuf[ 0]='V'; gc_UserDataBuf[ 1]='O'; gc_UserDataBuf[ 2]='I';
 309   5                                              gc_UserDataBuf[ 3]='C'; gc_UserDataBuf[ 4]='E'; gc_UserDataBuf[ 5]=' ';
 310   5                                              gc_UserDataBuf[ 6]=' '; gc_UserDataBuf[ 7]=' '; gc_UserDataBuf[ 8]=' ';
 311   5                                              gc_UserDataBuf[ 9]=' '; gc_UserDataBuf[10]=' '; gc_UserDataBuf[11]=0x10;
 312   5                                              gc_UserDataBuf[14]=gw_DOS_CreateTime;
 313   5                                              gc_UserDataBuf[15]=gw_DOS_CreateTime>>8;
 314   5                                              gc_UserDataBuf[16]=gw_DOS_CreateDate;
 315   5                                              gc_UserDataBuf[17]=gw_DOS_CreateDate>>8;
 316   5                                              gc_UserDataBuf[18]=gw_DOS_CreateDate;
 317   5                                              gc_UserDataBuf[19]=gw_DOS_CreateDate>>8;
 318   5                                              gc_UserDataBuf[20]=tdw_ClusterCnt1>>16;
 319   5                                              gc_UserDataBuf[21]=tdw_ClusterCnt1>>24;
 320   5                                              gc_UserDataBuf[22]=gw_DOS_CreateTime;
 321   5                                              gc_UserDataBuf[23]=gw_DOS_CreateTime>>8;
 322   5                                              gc_UserDataBuf[24]=gw_DOS_CreateDate;
 323   5                                              gc_UserDataBuf[25]=gw_DOS_CreateDate>>8;
 324   5                                              gc_UserDataBuf[26]=tdw_ClusterCnt1;
 325   5                                              gc_UserDataBuf[27]=tdw_ClusterCnt1>>8;
 326   5                                              DOS_Write_LogicSector(tdw_SectorCnt,0);
 327   5                                              memset(&gc_UserDataBuf[0],0,32);
 328   5      
 329   5                                              if(gc_DOS_SectorPerCluster==1)
 330   5                                                      DOS_Write_LogicSector(tdw_SectorCnt,4);
 331   5                                      }
 332   4                                      else if(i==gc_DOS_SectorPerCluster-1)
 333   4                                      {
 334   5                                              DOS_Write_LogicSector(tdw_SectorCnt+i,2);
 335   5                                      }
 336   4                                      else
 337   4                                      {
 338   5                                              DOS_Write_LogicSector(tdw_SectorCnt+i,1);
 339   5                                      }
 340   4                              }
 341   3      
 342   3                              // Clear "VOICE" folder FDB area
 343   3                              tdw_SectorCnt=(tdw_ClusterCnt1-2)*gc_DOS_SectorPerCluster+gdw_DOS_DataAddr;
 344   3                              for(i=0;i<gc_DOS_SectorPerCluster;i++)
 345   3                              {
 346   4                                      if(i==0)
 347   4                                      {
 348   5                                              gs_File_FCB[1].dw_FDB_Cluster=tdw_ClusterCnt1;
 349   5                                              memset(&gc_UserDataBuf[0],0,512);
 350   5                                              FillFDBHeader();        // . & ..
 351   5      
 352   5                                              if(gc_DOS_SectorPerCluster==1)
 353   5                                                      DOS_Write_LogicSector(tdw_SectorCnt,3);
 354   5                                              else
 355   5                                              {
 356   6                                                      DOS_Write_LogicSector(tdw_SectorCnt,0);
 357   6                                                      memset(&gc_UserDataBuf[0],0,64);
 358   6                                              }
 359   5                                      }
 360   4                                      else if(i==gc_DOS_SectorPerCluster-1)
 361   4                                      {
 362   5                                              DOS_Write_LogicSector(tdw_SectorCnt+i,2);
 363   5                                      }
C51 COMPILER V9.00   DOSFAT                                                                07/09/2012 21:16:46 PAGE 7   

 364   4                                      else
 365   4                                      {
 366   5                                              DOS_Write_LogicSector(tdw_SectorCnt+i,1);
 367   5                                      }
 368   4                              }
 369   3      
 370   3                              // Fill FAT of "VOICE" folder
 371   3                              tdw_SectorCnt=gdw_DOS_Fat1Addr+tdw_ClusterCnt1/(512/(1<<gc_DOS_FileSystemType));
 372   3                              tw_Addr=(tdw_ClusterCnt1%(512/(1<<gc_DOS_FileSystemType)))*(1<<gc_DOS_FileSystemType);
 373   3                              DOS_Read_LogicSector(tdw_SectorCnt);
 374   3                              gc_UserDataBuf[tw_Addr+0]=0xFF;
 375   3                              gc_UserDataBuf[tw_Addr+1]=0xFF;
 376   3                              if(gc_DOS_FileSystemType==2)
 377   3                              {
 378   4                                      gc_UserDataBuf[tw_Addr+2]=0xFF;
 379   4                                      gc_UserDataBuf[tw_Addr+3]=0x0F;
 380   4                              }
 381   3                              DOS_Write_LogicSector(tdw_SectorCnt,3);
 382   3                              DOS_Write_LogicSector(tdw_SectorCnt-gdw_DOS_Fat1Addr+gdw_DOS_Fat2Addr,3);
 383   3                              return 0;
 384   3                      }
 385   2              }
 386   1              else 
 387   1              {//(JC)Get a free FDB, info stored in p_mp
 388   2                      gs_File_FCB[1].dw_FDB_Cluster=p_mp->dw_FDB_Cluster;//(JC)File FDB start cluster
 389   2                      DOS_SearchFreeCluster(0);//search cluster from flash fat table
 390   2                      tdw_ClusterCnt=DOS_GetAFreeCluster();   //(JC)Get a free cluster for file content
 391   2                      if(!tdw_ClusterCnt)
 392   2                      {
 393   3                              return 1;
 394   3                      }
 395   2                      else
 396   2                      {
 397   3                              gs_File_FCB[1].dw_File_StartCluster=tdw_ClusterCnt;
 398   3                              gs_File_FCB[1].dw_FDB_LogAdd=p_mp->dw_FDB_LogAdd;
 399   3                              gs_File_FCB[1].w_FDB_Offset=p_mp->w_FDB_Offset;
 400   3                              DOS_Read_LogicSector(p_mp->dw_FDB_LogAdd);      
 401   3                              gc_UserDataBuf[p_mp->w_FDB_Offset+ 0]='V';
 402   3                              gc_UserDataBuf[p_mp->w_FDB_Offset+ 1]='O';
 403   3                              gc_UserDataBuf[p_mp->w_FDB_Offset+ 2]='I';
 404   3                              gc_UserDataBuf[p_mp->w_FDB_Offset+ 3]='C';
 405   3                              gc_UserDataBuf[p_mp->w_FDB_Offset+ 4]='E';
 406   3                              gc_UserDataBuf[p_mp->w_FDB_Offset+ 5]=' ';
 407   3                              gc_UserDataBuf[p_mp->w_FDB_Offset+ 6]=' ';
 408   3                              gc_UserDataBuf[p_mp->w_FDB_Offset+ 7]=' ';
 409   3                              gc_UserDataBuf[p_mp->w_FDB_Offset+ 8]=' ';
 410   3                              gc_UserDataBuf[p_mp->w_FDB_Offset+ 9]=' ';
 411   3                              gc_UserDataBuf[p_mp->w_FDB_Offset+10]=' ';
 412   3                              gc_UserDataBuf[p_mp->w_FDB_Offset+11]=0x10;
 413   3                              gc_UserDataBuf[p_mp->w_FDB_Offset+12]=0x00;
 414   3                              gc_UserDataBuf[p_mp->w_FDB_Offset+13]=0x00;
 415   3                              gc_UserDataBuf[p_mp->w_FDB_Offset+14]=gw_DOS_CreateTime;
 416   3                              gc_UserDataBuf[p_mp->w_FDB_Offset+15]=gw_DOS_CreateTime>>8;
 417   3                              gc_UserDataBuf[p_mp->w_FDB_Offset+16]=gw_DOS_CreateDate;
 418   3                              gc_UserDataBuf[p_mp->w_FDB_Offset+17]=gw_DOS_CreateDate>>8;
 419   3                              gc_UserDataBuf[p_mp->w_FDB_Offset+18]=gw_DOS_CreateDate;
 420   3                              gc_UserDataBuf[p_mp->w_FDB_Offset+19]=gw_DOS_CreateDate>>8;
 421   3                              gc_UserDataBuf[p_mp->w_FDB_Offset+20]=tdw_ClusterCnt>>16;
 422   3                              gc_UserDataBuf[p_mp->w_FDB_Offset+21]=tdw_ClusterCnt>>24;
 423   3                              gc_UserDataBuf[p_mp->w_FDB_Offset+22]=gw_DOS_CreateTime;
 424   3                              gc_UserDataBuf[p_mp->w_FDB_Offset+23]=gw_DOS_CreateTime>>8;
 425   3                              gc_UserDataBuf[p_mp->w_FDB_Offset+24]=gw_DOS_CreateDate;
C51 COMPILER V9.00   DOSFAT                                                                07/09/2012 21:16:46 PAGE 8   

 426   3                              gc_UserDataBuf[p_mp->w_FDB_Offset+25]=gw_DOS_CreateDate>>8;
 427   3                              gc_UserDataBuf[p_mp->w_FDB_Offset+26]=tdw_ClusterCnt;
 428   3                              gc_UserDataBuf[p_mp->w_FDB_Offset+27]=tdw_ClusterCnt>>8;
 429   3                              gc_UserDataBuf[p_mp->w_FDB_Offset+28]=0x00;
 430   3                              gc_UserDataBuf[p_mp->w_FDB_Offset+29]=0x00;
 431   3                              gc_UserDataBuf[p_mp->w_FDB_Offset+30]=0x00;
 432   3                              gc_UserDataBuf[p_mp->w_FDB_Offset+31]=0x00;
 433   3                              DOS_Write_LogicSector(p_mp->dw_FDB_LogAdd,3);
 434   3      
 435   3                              tdw_SectorCnt=tdw_ClusterCnt*(1<<gc_DOS_FileSystemType)/512;
 436   3                              DOS_Read_LogicSector(gdw_DOS_Fat1Addr+tdw_SectorCnt);
 437   3                              tw_Addr=(tdw_ClusterCnt%(512/(1<<gc_DOS_FileSystemType)))*(1<<gc_DOS_FileSystemType);
 438   3                              gc_UserDataBuf[tw_Addr+0]=0xFF;
 439   3                              gc_UserDataBuf[tw_Addr+1]=0xFF; 
 440   3                              if(gc_DOS_FileSystemType==2)
 441   3                              {
 442   4                                      gc_UserDataBuf[tw_Addr+2]=0xFF;
 443   4                                      gc_UserDataBuf[tw_Addr+3]=0x0F;
 444   4                              }
 445   3                              DOS_Write_LogicSector(gdw_DOS_Fat1Addr+tdw_SectorCnt,3);
 446   3                              DOS_Write_LogicSector(gdw_DOS_Fat2Addr+tdw_SectorCnt,3);
 447   3                              // Clear FDB area
 448   3                              tdw_SectorCnt=(tdw_ClusterCnt-2)*gc_DOS_SectorPerCluster+gdw_DOS_DataAddr;
 449   3      
 450   3                              for(i=0;i<gc_DOS_SectorPerCluster;i++)
 451   3                              {
 452   4                                      if(i==0)
 453   4                                      {
 454   5                                              gs_File_FCB[1].dw_FDB_Cluster=tdw_ClusterCnt;
 455   5                                              memset(&gc_UserDataBuf[0],0,512);
 456   5                                              FillFDBHeader();        // . & ..
 457   5                                              if(gc_DOS_SectorPerCluster==1)
 458   5                                                      DOS_Write_LogicSector(tdw_SectorCnt,3);
 459   5                                              else
 460   5                                              {
 461   6                                                      DOS_Write_LogicSector(tdw_SectorCnt,0);
 462   6                                                      memset(&gc_UserDataBuf[0],0,64);
 463   6                                              }
 464   5                                      }
 465   4                                      else if(i==gc_DOS_SectorPerCluster-1)
 466   4                                      {
 467   5                                              DOS_Write_LogicSector(tdw_SectorCnt+i,2);
 468   5                                      }
 469   4                                      else
 470   4                                      {
 471   5                                              DOS_Write_LogicSector(tdw_SectorCnt+i,1);
 472   5                                      }
 473   4                              }
 474   3                      }
 475   2              }
 476   1              return 0;
 477   1      }
 478          
 479          
 480          void FillFDBHeader(void)
 481          {
 482   1              gc_UserDataBuf[ 0]='.'; gc_UserDataBuf[ 1]=' '; gc_UserDataBuf[ 2]=' '; gc_UserDataBuf[ 3]=' ';
 483   1              gc_UserDataBuf[ 4]=' '; gc_UserDataBuf[ 5]=' '; gc_UserDataBuf[ 6]=' '; gc_UserDataBuf[ 7]=' ';
 484   1              gc_UserDataBuf[ 8]=' '; gc_UserDataBuf[ 9]=' '; gc_UserDataBuf[10]=' '; gc_UserDataBuf[11]=0x10;
 485   1              gc_UserDataBuf[14]=gw_DOS_CreateTime;   gc_UserDataBuf[15]=gw_DOS_CreateTime>>8;
 486   1              gc_UserDataBuf[16]=gw_DOS_CreateDate;   gc_UserDataBuf[17]=gw_DOS_CreateDate>>8;
 487   1              gc_UserDataBuf[18]=gw_DOS_CreateDate;   gc_UserDataBuf[19]=gw_DOS_CreateDate>>8;
C51 COMPILER V9.00   DOSFAT                                                                07/09/2012 21:16:46 PAGE 9   

 488   1              gc_UserDataBuf[20]=gs_File_FCB[1].dw_File_StartCluster>>16;
 489   1              gc_UserDataBuf[21]=gs_File_FCB[1].dw_File_StartCluster>>24;
 490   1              gc_UserDataBuf[22]=gw_DOS_CreateTime;   gc_UserDataBuf[23]=gw_DOS_CreateTime>>8;
 491   1              gc_UserDataBuf[24]=gw_DOS_CreateDate;   gc_UserDataBuf[25]=gw_DOS_CreateDate>>8;
 492   1              gc_UserDataBuf[26]=gs_File_FCB[1].dw_File_StartCluster;
 493   1              gc_UserDataBuf[27]=gs_File_FCB[1].dw_File_StartCluster>>8;
 494   1              
 495   1              gc_UserDataBuf[32]='.'; gc_UserDataBuf[33]='.'; gc_UserDataBuf[34]=' '; gc_UserDataBuf[35]=' ';
 496   1              gc_UserDataBuf[36]=' '; gc_UserDataBuf[37]=' '; gc_UserDataBuf[38]=' '; gc_UserDataBuf[39]=' ';
 497   1              gc_UserDataBuf[40]=' '; gc_UserDataBuf[41]=' '; gc_UserDataBuf[42]=' '; gc_UserDataBuf[43]=0x10;
 498   1              gc_UserDataBuf[46]=gw_DOS_CreateTime;   gc_UserDataBuf[47]=gw_DOS_CreateTime>>8;
 499   1              gc_UserDataBuf[48]=gw_DOS_CreateDate;   gc_UserDataBuf[49]=gw_DOS_CreateDate>>8;
 500   1              gc_UserDataBuf[50]=gw_DOS_CreateDate;   gc_UserDataBuf[51]=gw_DOS_CreateDate>>8;
 501   1              gc_UserDataBuf[54]=gw_DOS_CreateTime;   gc_UserDataBuf[55]=gw_DOS_CreateTime>>8;
 502   1              gc_UserDataBuf[56]=gw_DOS_CreateDate;   gc_UserDataBuf[57]=gw_DOS_CreateDate>>8;        
 503   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   3337    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----      92
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----      14
   IDATA SIZE       =   ----      45
   BIT SIZE         =   ----       2
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
