C51 COMPILER V9.00   FM_FUNCTION                                                           07/09/2012 21:16:47 PAGE 1   


C51 COMPILER V9.00, COMPILATION OF MODULE FM_FUNCTION
OBJECT MODULE PLACED IN .\obj\FM_function.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE FM\FM_function.c LARGE OPTIMIZE(9,SIZE) BROWSE NOAREGS INCDIR(..\libsource\
                    -header) DEFINE(K_ICTYPE=0x03) DEBUG OBJECTEXTEND PRINT(.\lst\FM_function.lst) OBJECT(.\obj\FM_function.obj)

line level    source

   1          #include "..\Header\SPDA2K.h"
   2          #include "..\DSP\dspuser.h"
   3          #include "..\header\variables.h"
   4          #include "FM_receiveH.h"
   5          
   6          #define DSP_ADPCM_OUT_SZ_PER_CH ((((505-1)/4)+2)*2)
   7          
   8          extern void FM_MUTE(void);
   9          extern void FM_UnMUTE(void);
  10          extern void FM_FMVolumeSet(U16 vol);
  11          extern void FM_FMTune();//设台，tc_mute=1时设台后无声音（用作搜台时设台）
  12          extern void FM_FMSeekFromCurrentCh(U8 seekUp);//seekUp=0向上搜台，seekUp=1向下搜台
  13          extern void FM_Auto_SearchAllFreq(U16 x_FreqTemp);//全部搜台
  14          extern void FM_Powerdown(void);//关掉FM
  15          extern void FM_OPEN(void);//打开fm
  16          
  17          void AccessKeyEvent_FM_PAUSE(void)//录音暂停时 ---sunzhk add
  18          {
  19   1              switch(gc_KeyEvent)
  20   1              {
  21   2                      case 0x02:      // Play
  22   2                              L2_DSP_SendCommandSet(DCMD_Play);
  23   2                              gs_System_State.c_Phase=TASK_PHASE_REC;
  24   2                      break;
  25   2      
  26   2                      case 0x06:      // M
  27   2                      case 0x16:      // L-M
  28   2                              REC_Stop();
  29   2                              gs_System_State.c_Phase=TASK_PHASE_STOP;
  30   2                      break;
  31   2              }
  32   1      }
  33          
  34          void AccessKeyEvent_FM_REC(void)//录音中 ---sunzhk add
  35          {
  36   1              switch(gc_KeyEvent)
  37   1              {
  38   2                      case 0x02:      // Play
  39   2                              DSP_PauseCmd();
  40   2                              gs_System_State.c_Phase=TASK_PHASE_PAUSE;
  41   2                      break;
  42   2      
  43   2                      case 0x06:      // M
  44   2                      case 0x16:      // L-M
  45   2                              REC_Stop();
  46   2                              gs_System_State.c_Phase=TASK_PHASE_STOP;
  47   2                      break;
  48   2              }
  49   1      }
  50          
  51          void AccessKeyEvent_FM_STOP(void)//未录音状态---sunzhk add 
  52          {
  53   1              data    U8      tc_temp;
  54   1              xdata   U8      i;
C51 COMPILER V9.00   FM_FUNCTION                                                           07/09/2012 21:16:47 PAGE 2   

  55   1      
  56   1              switch(gc_KeyEvent)
  57   1              {
  58   2                      case 0x02:      // Play
  59   2                              if(gb_FM_Mute==1)
  60   2                              {
  61   3                                      gb_FM_Mute=0;
  62   3                                      FM_UnMUTE();
  63   3                              }else
  64   2                              {
  65   3                                      gb_FM_Mute=1;
  66   3                                      FM_MUTE();
  67   3                              }
  68   2                      break;
  69   2      
  70   2                      case 0x03:      // Next
  71   2                              gb_ADJ=0;
  72   2                              if(gb_SetVol)
  73   2                              {
  74   3                                      Linein_VolAdj();        // Volume Adjust
  75   3                              }
  76   2                              else if(gc_FMMenuItem==1)//菜单状态
  77   2                              {
  78   3                                      if(gc_FMMenuNum==3)//标志第几个菜单
  79   3                                      {
  80   4                                              gc_FMMenuNum=4;
  81   4                                              LCM_ShowFMMenu(4);
  82   4                                              LCM_ShowFMMenu(5);
  83   4                                              LCM_ShowFMMenu(6);
  84   4                                              LCM_erase_one_page(6);
  85   4                                              LCM_erase_one_page(7);
  86   4                                      }
  87   3                                      else if(gc_FMMenuNum==6)
  88   3                                      {
  89   4                                              gc_FMMenuNum=0;
  90   4                                              LCM_ShowFMMenu(0);
  91   4                                              LCM_ShowFMMenu(1);
  92   4                                              LCM_ShowFMMenu(2);
  93   4                                              LCM_ShowFMMenu(3);
  94   4                                      }
  95   3                                      else
  96   3                                      {
  97   4                                              gc_FMMenuNum++;
  98   4                                              LCM_ShowFMMenu(gc_FMMenuNum-1);
  99   4                                              LCM_ShowFMMenu(gc_FMMenuNum);
 100   4                                      }
 101   3                              }
 102   2                              else if(gc_FMMenuItem==2) //标志录音质量的菜单
 103   2                              {
 104   3                                      tc_temp=gc_RecordQuality;
 105   3                                      gc_RecordQuality++;
 106   3                                      if(gc_RecordQuality==3)
 107   3                                      {
 108   4                                              gc_RecordQuality=0;
 109   4                                      }
 110   3                                      LCM_ShowFMMenu_Quality(tc_temp);
 111   3                                      LCM_ShowFMMenu_Quality(gc_RecordQuality);
 112   3                              }
 113   2                              else if(gc_FMMenuItem==3)       // Order Record Setting//预约录音的菜单
 114   2                              {
 115   3                                      gb_LCM_InverseDisp=1;
 116   3                                      if(gc_OrderRecordTimerStep==0)  // On-OFF
C51 COMPILER V9.00   FM_FUNCTION                                                           07/09/2012 21:16:47 PAGE 3   

 117   3                                      {
 118   4                                              gb_OrderRecord=!gb_OrderRecord;
 119   4                                              LCM_ShowRecONOFFString();
 120   4                                      }
 121   3                                      else if(gc_OrderRecordTimerStep==1)     // +1H
 122   3                                      {
 123   4                                              gdw_OrderRecordTime+=3600;
 124   4                                              if(gdw_OrderRecordTime>=86400)
 125   4                                              {
 126   5                                                      gdw_OrderRecordTime-=86400;
 127   5                                              }
 128   4                                              LCM_ShowRecordStartTime_Hour();
 129   4                                      }
 130   3                                      else if(gc_OrderRecordTimerStep==2)     // +1M
 131   3                                      {
 132   4                                              if(gdw_OrderRecordTime%3600==3540)
 133   4                                              {
 134   5                                                      gdw_OrderRecordTime-=3540;
 135   5                                              }
 136   4                                              else
 137   4                                              {
 138   5                                                      gdw_OrderRecordTime+=60;
 139   5                                              }
 140   4                                              LCM_ShowRecordStartTime_Minute();
 141   4                                      }
 142   3                                      else
 143   3                                      {
 144   4                                              if(gw_OrderRecDuration==7200)   // 120-Min
 145   4                                              {
 146   5                                                      gw_OrderRecDuration=600;                // 10-Min
 147   5                                              }
 148   4                                              else
 149   4                                              {
 150   5                                                      gw_OrderRecDuration+=600;
 151   5                                              }
 152   4                                              LCM_ShowDuration();
 153   4                                      }
 154   3                                      gb_LCM_InverseDisp=0;
 155   3                              }
 156   2                              else //跳到下一个保存的个频点
 157   2                              {
 158   3                                      // Change to Next Channel Memory
 159   3                                      dbprintf("next channel\n");
 160   3                                      dbprintf("gc_FM_CHAmount=%bx,gc_FM_CH_COUNT=%bx\n",gc_FM_CHAmount,gc_FM_CH_COUNT);
 161   3                                      if(gc_FM_CHAmount>0)
 162   3                                      {
 163   4                                              gc_FM_CH_COUNT++;
 164   4                                              if(gc_FM_CH_COUNT==gc_FM_CHAmount)
 165   4                                              {
 166   5                                                      gc_FM_CH_COUNT=0;
 167   5                                              }
 168   4                                              gw_FM_frequency=gw_FM_CH[gc_FM_CH_COUNT];//gw_FM_CH最大可以保存50个电台
 169   4                                      }else
 170   3                                      {
 171   4                                              if(gw_FM_frequency>=1080)
 172   4                                              {
 173   5                                                      gw_FM_frequency=875;
 174   5                                              }else
 175   4                                              {
 176   5                                                      gw_FM_frequency ++;
 177   5                                              }
 178   4                                      }
C51 COMPILER V9.00   FM_FUNCTION                                                           07/09/2012 21:16:47 PAGE 4   

 179   3                                      dbprintf("gw_FM_frequency=%x\n",gw_FM_frequency);
 180   3                                      FM_FMTune();
 181   3                              }
 182   2                      break;
 183   2      
 184   2                      case 0x04:      // Prev
 185   2                              gb_ADJ=1;
 186   2                              if(gb_SetVol)
 187   2                              {
 188   3                                      Linein_VolAdj();        // Volume Adjust
 189   3                              }
 190   2                              else if(gc_FMMenuItem==1)
 191   2                              {
 192   3                                      if(gc_FMMenuNum==0)
 193   3                                      {
 194   4                                              gc_FMMenuNum=6;
 195   4                                              LCM_ShowFMMenu(4);
 196   4                                              LCM_ShowFMMenu(5);
 197   4                                              LCM_ShowFMMenu(6);
 198   4                                              LCM_erase_one_page(6);
 199   4                                              LCM_erase_one_page(7);
 200   4                                      }
 201   3                                      else if(gc_FMMenuNum==4)
 202   3                                      {
 203   4                                              gc_FMMenuNum=3;
 204   4                                              LCM_ShowFMMenu(0);
 205   4                                              LCM_ShowFMMenu(1);
 206   4                                              LCM_ShowFMMenu(2);
 207   4                                              LCM_ShowFMMenu(3);
 208   4                                      }
 209   3                                      else
 210   3                                      {
 211   4                                              gc_FMMenuNum--;
 212   4                                              LCM_ShowFMMenu(gc_FMMenuNum+1);
 213   4                                              LCM_ShowFMMenu(gc_FMMenuNum);
 214   4                                      }
 215   3                              }
 216   2                              else if(gc_FMMenuItem==2)
 217   2                              {
 218   3                                      tc_temp=gc_RecordQuality;
 219   3                                      gc_RecordQuality--;
 220   3                                      if(gc_RecordQuality==0xFF)
 221   3                                      {
 222   4                                              gc_RecordQuality=2;
 223   4                                      }
 224   3                                      LCM_ShowFMMenu_Quality(tc_temp);
 225   3                                      LCM_ShowFMMenu_Quality(gc_RecordQuality);
 226   3                              }
 227   2                              else if(gc_FMMenuItem==3)       // Order Record Setting
 228   2                              {
 229   3                                      gb_LCM_InverseDisp=1;
 230   3                                      if(gc_OrderRecordTimerStep==0)  // On-OFF
 231   3                                      {
 232   4                                              gb_OrderRecord=!gb_OrderRecord;
 233   4                                              LCM_ShowRecONOFFString();
 234   4                                      }
 235   3                                      else if(gc_OrderRecordTimerStep==1)     // -1H
 236   3                                      {
 237   4                                              if(gdw_OrderRecordTime<3600)
 238   4                                              {
 239   5                                                      gdw_OrderRecordTime+=86400-3600;
 240   5                                              }
C51 COMPILER V9.00   FM_FUNCTION                                                           07/09/2012 21:16:47 PAGE 5   

 241   4                                              else
 242   4                                              {
 243   5                                                      gdw_OrderRecordTime-=3600;
 244   5                                              }
 245   4                                              LCM_ShowRecordStartTime_Hour();
 246   4                                      }
 247   3                                      else if(gc_OrderRecordTimerStep==2)     // +1M
 248   3                                      {
 249   4                                              if(gdw_OrderRecordTime%3600<60)
 250   4                                              {
 251   5                                                      gdw_OrderRecordTime+=3600-60;
 252   5                                              }
 253   4                                              else
 254   4                                              {
 255   5                                                      gdw_OrderRecordTime-=60;
 256   5                                              }
 257   4                                              LCM_ShowRecordStartTime_Minute();
 258   4                                      }
 259   3                                      else
 260   3                                      {
 261   4                                              if(gw_OrderRecDuration==600)    
 262   4                                              {
 263   5                                                      gw_OrderRecDuration=7200;
 264   5                                              }
 265   4                                              else
 266   4                                              {
 267   5                                                      gw_OrderRecDuration-=600;
 268   5                                              }
 269   4                                              LCM_ShowDuration();
 270   4                                      }
 271   3                                      gb_LCM_InverseDisp=0;
 272   3                              }
 273   2                              else
 274   2                              {
 275   3                                      // Change to Prev Channel Memory
 276   3                                      if(gc_FM_CHAmount>0)
 277   3                                      {
 278   4                                              if(gc_FM_CH_COUNT==0)
 279   4                                              {
 280   5                                                      gc_FM_CH_COUNT=gc_FM_CHAmount-1;
 281   5                                              }else
 282   4                                              {
 283   5                                                      gc_FM_CH_COUNT--;
 284   5                                              }
 285   4                                              gw_FM_frequency=gw_FM_CH[gc_FM_CH_COUNT];//gw_FM_CH最大可以保存50个电台
 286   4                                      }else
 287   3                                      {
 288   4                                              if(gw_FM_frequency<=875)
 289   4                                              {
 290   5                                                      gw_FM_frequency=1080;
 291   5                                              }else
 292   4                                              {
 293   5                                                      gw_FM_frequency --;
 294   5                                              }
 295   4                                      }
 296   3                                      FM_FMTune();
 297   3                                       //  LCM_ShowFrequency_L(gw_FM_frequency);
 298   3      
 299   3                              }
 300   2                      break;
 301   2      
 302   2                      case 0x05:      // V
C51 COMPILER V9.00   FM_FUNCTION                                                           07/09/2012 21:16:47 PAGE 6   

 303   2                              if(gc_FMMenuItem==0&&gb_SetVol==0)
 304   2                              {
 305   3                                      gb_SetVol=1;
 306   3                                      gc_MenuTimer=6;
 307   3                                      LCM_Clear_L2_L5();
 308   3                                      LCM_ShowVOL();
 309   3                                      ClearIRNumberVariable();
 310   3                              }
 311   2                              else
 312   2                              {
 313   3                                      gc_MenuTimer=0;
 314   3                              }
 315   2                      break;
 316   2      
 317   2                      case 0x06:      // M
 318   2                      gb_SetVol=0;
 319   2                              gc_MenuTimer=6;
 320   2                              if(gc_FMMenuItem==0)    // FM menu
 321   2                              {
 322   3                                      gc_FMMenuItem=1;
 323   3                                      if(gc_FMMenuNum<4)
 324   3                                      {
 325   4                                              LCM_ShowFMMenu(0);
 326   4                                              LCM_ShowFMMenu(1);
 327   4                                              LCM_ShowFMMenu(2);
 328   4                                              LCM_ShowFMMenu(3);
 329   4                                      }
 330   3                                      else
 331   3                                      {
 332   4                                              LCM_ShowFMMenu(4);
 333   4                                              LCM_ShowFMMenu(5);
 334   4                                              LCM_ShowFMMenu(6);
 335   4                                              LCM_erase_one_page(6);
 336   4                                              LCM_erase_one_page(7);
 337   4                                      }
 338   3                              }
 339   2                              else if(gc_FMMenuItem==1)       
 340   2                              {
 341   3                                      switch(gc_FMMenuNum)
 342   3                                      {
 343   4                                              case 0: // Record
 344   4                                                      if(gc_CurrentCard==9)
 345   4                                                      {
 346   5                                                              // Display No Media
 347   5                                                              gc_MenuTimer=0;
 348   5                                                      }
 349   4                                                      else
 350   4                                                      {
 351   5                                                              set_clock_mode(CLOCK_MODE_DOS);
 352   5                                                              gdw_FreeClusterNum[1]=0;
 353   5                                                              REC_Start();
 354   5                                                              gc_MenuTimer=0;
 355   5                                                      }
 356   4                                              break;
 357   4      
 358   4                                              case 1: // Save channel
 359   4                                                      if(gc_FM_CHAmount<30)
 360   4                                                      {
 361   5                                                              gc_FM_CH_COUNT=gc_FM_CHAmount;
 362   5                                                              gw_FM_CH[gc_FM_CHAmount]=gw_FM_frequency; 
 363   5                                                              gc_FM_CHAmount++;
 364   5                                                      }
C51 COMPILER V9.00   FM_FUNCTION                                                           07/09/2012 21:16:47 PAGE 7   

 365   4                                                      gc_MenuTimer=0;
 366   4                                                      USER_LogFile_ReadWrite(1);
 367   4                                              break;
 368   4      
 369   4                                              case 2: // Delete channel
 370   4                                                      if(gc_FM_CHAmount!=0)
 371   4                                                      {
 372   5                                                              gc_FM_CHAmount--;
 373   5                                                              for(i=gc_FM_CH_COUNT;i<gc_FM_CHAmount;i++)
 374   5                                                              {
 375   6                                                                      gw_FM_CH[i]=gw_FM_CH[i+1];
 376   6                                                              }
 377   5                                                      }
 378   4                                                      USER_LogFile_ReadWrite(1);
 379   4                                              break;
 380   4      
 381   4                                              case 3: // Delete all
 382   4                                                      gc_FM_CHAmount=0;
 383   4                                                      USER_LogFile_ReadWrite(1);
 384   4                                              break;
 385   4      
 386   4                                              case 4: // Order record
 387   4                                                      gc_FMMenuItem=3;
 388   4                                                      LCM_Clear_L0_L7();
 389   4                                                      gb_OrderRecord=gb_OrderRecordConfirm;
 390   4                                                      gb_LCM_InverseDisp=0;
 391   4                                                      gc_OrderRecordTimerStep=0;
 392   4                                                      LCM_ShowRecordString();
 393   4                                                      LCM_ShowStartTimeString();
 394   4                                                      LCM_ShowDurationString();
 395   4                                                      LCM_ShowRecordStartTime_Hour();
 396   4                                                      LCM_ShowChar8x16(10,87);        // :
 397   4                                                      LCM_ShowRecordStartTime_Minute();
 398   4                                                      LCM_ShowDuration();
 399   4                                                      gb_LCM_InverseDisp=1;
 400   4                                                      LCM_ShowRecONOFFString();
 401   4                                                      gb_LCM_InverseDisp=0;
 402   4                                              break;
 403   4      
 404   4                                              case 5: // Quality
 405   4                                                      LCM_ShowFMMenu_Quality(0);
 406   4                                                      LCM_ShowFMMenu_Quality(1);
 407   4                                                      LCM_ShowFMMenu_Quality(2);
 408   4                                                      gc_FMMenuItem=2;
 409   4                                              break;
 410   4      
 411   4                                              case 6: // Exit
 412   4                                                      gc_MenuTimer=0;
 413   4                                              break;
 414   4                                      }
 415   3                              }
 416   2                              else if(gc_FMMenuItem==2)       // Record Quality
 417   2                              {
 418   3                                      gc_MenuTimer=0;
 419   3                              }
 420   2                              else if(gc_FMMenuItem==3)       // Order Record Setting
 421   2                              {
 422   3                                      gb_LCM_InverseDisp=0;
 423   3                                      if(gc_OrderRecordTimerStep==0)
 424   3                                      {
 425   4                                              if(gb_OrderRecord==0)
 426   4                                              {
C51 COMPILER V9.00   FM_FUNCTION                                                           07/09/2012 21:16:47 PAGE 8   

 427   5                                                      gb_OrderRecordConfirm=0;
 428   5                                                      gc_MenuTimer=0;
 429   5                                              }
 430   4                                              else
 431   4                                              {
 432   5                                                      LCM_ShowRecONOFFString();
 433   5                                              }
 434   4                                      }
 435   3                                      else if(gc_OrderRecordTimerStep==1)
 436   3                                      {               
 437   4                                              LCM_ShowRecordStartTime_Hour();
 438   4                                      }
 439   3                                      else if(gc_OrderRecordTimerStep==2)
 440   3                                      {
 441   4                                              LCM_ShowRecordStartTime_Minute();
 442   4                                      }
 443   3                                      else
 444   3                                      {
 445   4                                              gc_MenuTimer=0;
 446   4                                              gb_OrderRecordConfirm=1;
 447   4                                      }
 448   3                                      gc_OrderRecordTimerStep++;
 449   3                                      gb_LCM_InverseDisp=1;
 450   3                                      if(gc_OrderRecordTimerStep==1)
 451   3                                      {
 452   4                                              LCM_ShowRecordStartTime_Hour();
 453   4                                      }
 454   3                                      else if(gc_OrderRecordTimerStep==2)
 455   3                                      {
 456   4                                              LCM_ShowRecordStartTime_Minute();
 457   4                                      }
 458   3                                      else
 459   3                                      {
 460   4                                              LCM_ShowDuration();
 461   4                                      }
 462   3                                      gb_LCM_InverseDisp=0;
 463   3                              }
 464   2                      break;
 465   2      
 466   2                      case 0x12:      // L-Play
 467   2                              FM_Auto_SearchAllFreq(875);
 468   2                              USER_LogFile_ReadWrite(1);//save all searched ch
 469   2                      break;
 470   2      
 471   2                      case 0x13:      // L-Next
 472   2                              if(gb_SetVol==1)
 473   2                              {
 474   3                                      gb_ADJ=0;       // Volume Adjust
 475   3                                      Linein_VolAdj();
 476   3                                      gc_LongKeyCount=30;
 477   3                              }
 478   2                              else if(gc_FMMenuItem==0)
 479   2                              {
 480   3                                      gb_ADJ=0;
 481   3                                      FM_FMSeekFromCurrentCh(1);
 482   3                              }
 483   2                      break;
 484   2      
 485   2                      case 0x14:      // L-Prev
 486   2                              if(gb_SetVol==1)
 487   2                              {
 488   3                                      gb_ADJ=1;       // Volume Adjust
C51 COMPILER V9.00   FM_FUNCTION                                                           07/09/2012 21:16:47 PAGE 9   

 489   3                                      Linein_VolAdj();
 490   3                                      gc_LongKeyCount=30;
 491   3                              }
 492   2                              else if(gc_FMMenuItem==0)
 493   2                              {
 494   3                                      gb_ADJ=1;
 495   3                                      FM_FMSeekFromCurrentCh(0);
 496   3                              }
 497   2                      break;
 498   2      
 499   2                      case 0x15:      // L-V
 500   2                              if(gc_CurrentCard==2)
 501   2                              {
 502   3                                      if(gb_Host_Exist==1)
 503   3                                      {
 504   4                                              gb_Host_Exist=0;
 505   4                                      }
 506   3                              }
 507   2                              else if(gc_CurrentCard==5)
 508   2                              {
 509   3                                      if(gb_SD_Exist==1)
 510   3                                      {
 511   4                                              gb_SD_Exist=0;
 512   4                                      }
 513   3                              }
 514   2                      break;
 515   2      
 516   2                      case 0x16:      // L-M
 517   2                              gc_Task_Current=C_Task_Idle;
 518   2                      break;
 519   2              }
 520   1      }
 521          
 522          
 523          void AccessKeyEvent_FM(void)
 524          {
 525   1              switch(gs_System_State.c_Phase)
 526   1              {
 527   2                      case TASK_PHASE_STOP:
 528   2                              AccessKeyEvent_FM_STOP();
 529   2                      break;
 530   2      
 531   2                      case TASK_PHASE_PAUSE:
 532   2                              AccessKeyEvent_FM_PAUSE();
 533   2                      break;
 534   2      
 535   2                      case TASK_PHASE_REC:
 536   2                              AccessKeyEvent_FM_REC();
 537   2                      break;
 538   2              }
 539   1              gc_KeyEvent=0;
 540   1      }
 541          
 542          void Linein_VolAdj()
 543          {
 544   1              xdata   U8      tc_TmpData;
 545   1              
 546   1              if(gb_ADJ==0)
 547   1              {
 548   2                      if(gs_DSP_GLOBAL_RAM.sc_Volume==0)
 549   2                      {
 550   3                              XBYTE[0xB0C6]=0;   //(Jimi 091030)Line in gain L maximum
C51 COMPILER V9.00   FM_FUNCTION                                                           07/09/2012 21:16:47 PAGE 10  

 551   3                              XBYTE[0xB0C7]=0;   //(Jimi 091030)Line in gain R maximum
 552   3                      }
 553   2      
 554   2                      if(gs_DSP_GLOBAL_RAM.sc_Volume<42)
 555   2                      {
 556   3                              gs_DSP_GLOBAL_RAM.sc_Volume+=2;
 557   3                      }
 558   2      
 559   2                      tc_TmpData=31-(gs_DSP_GLOBAL_RAM.sc_Volume/2);
 560   2                      XBYTE[0xB0C4]=tc_TmpData;  //(Jimi 091030)Headphone gain Lch
 561   2                      XBYTE[0xB0C5]=tc_TmpData;  //(Jimi 091030)Headphone gain Rch
 562   2                      LCM_ShowVOL();
 563   2              }
 564   1              else
 565   1              {
 566   2                      if(gs_DSP_GLOBAL_RAM.sc_Volume>1)
 567   2                      {
 568   3                              gs_DSP_GLOBAL_RAM.sc_Volume-=2;
 569   3                      }
 570   2      
 571   2                      tc_TmpData=31-(gs_DSP_GLOBAL_RAM.sc_Volume/2);
 572   2                      XBYTE[0xB0C4]=tc_TmpData;  //(Jimi 091030)Headphone gain Lch
 573   2                      XBYTE[0xB0C5]=tc_TmpData;  //(Jimi 091030)Headphone gain Rch
 574   2                      if(gs_DSP_GLOBAL_RAM.sc_Volume==0)
 575   2                      {
 576   3                              XBYTE[0xB0C6]=31;
 577   3                              XBYTE[0xB0C7]=31;
 578   3                      }
 579   2                      LCM_ShowVOL();
 580   2              }
 581   1      }
 582          
 583          void Linein_Out(void)
 584          {
 585   1              DSP_Write_MMR16(0x3FC1,(DSP_Read_MMR16(0x3FC1)|0x0010));
 586   1          XBYTE[0xB0C2]=0;       //disable ADC LRch(bit[1:0]), Mic bias(bit[2]) and Mic boost(bit[5:4])
 587   1          XBYTE[0xB0C1]&=0xFC;   //set audio driver post-mux as DAC output
 588   1          XBYTE[0xB0C1]|=0x30;   //power down ADC input pre-mux
 589   1          XBYTE[0xB0ED]|=0x02;   //Audio DA zero cross reset bypass on
 590   1          XBYTE[0xB0C4]=0;       //LCH speaker volume(i.e LCH OP Gain)
 591   1          XBYTE[0xB0C5]=0;       //RCH speaker volume(i.e RCH OP Gain)
 592   1      }
 593          
 594          void Linein_Set(void)
 595          {
 596   1          data        U8 tc_TmpData;
 597   1          
 598   1              XBYTE[0xB010]|=0x01;
 599   1              
 600   1              XBYTE[0xB0C4]=0x1F;          //(Jimi 091030)mute headphone Lch
 601   1              XBYTE[0xB0C5]=0x1F;          //(Jimi 091030)mute headphone Rch
 602   1              XBYTE[0xB0C2]|=0x03;         //(Jimi 091030)ADC enable
 603   1              DSP_Write_MMR16(0x3FC0,(DSP_Read_MMR16(0x3FC0)|0x0200));    //audio ADC clock enable
 604   1              
 605   1              XBYTE[0xB0C1]&=0xCC;       //(Jimi 091030)
 606   1              XBYTE[0xB0C1]|=0x11;       //(Jimi 091030)set pre-mux and post-mux as line-in
 607   1              XBYTE[0xB0ED]|=0x01;       //(Jimi 091030)disable ADC zero cross detect
 608   1              
 609   1              if(gb_linein_mute==0)
 610   1              {
 611   2                      tc_TmpData=31-(gs_DSP_GLOBAL_RAM.sc_Volume/2);
 612   2                      XBYTE[0xB0C4]=tc_TmpData;  //(Jimi 091030)Headphone gain Lch
C51 COMPILER V9.00   FM_FUNCTION                                                           07/09/2012 21:16:47 PAGE 11  

 613   2                      XBYTE[0xB0C5]=tc_TmpData;  //(Jimi 091030)Headphone gain Rch
 614   2                      XBYTE[0xB0C6]=0;   //(Jimi 091030)Line in gain Lch maximum
 615   2                      XBYTE[0xB0C7]=0;   //(Jimi 091030)Line in gain Rch maximum
 616   2              }
 617   1              else
 618   1              {
 619   2                      XBYTE[0xB0C6]=31;    //(Jimi 091030)Line in gain Lch mute
 620   2                      XBYTE[0xB0C7]=31;    //(Jimi 091030)Line in gain Rch mute
 621   2              }
 622   1      }
 623          
 624          void DetectSDorHOSTState(void)
 625          {
 626   1              data    U8      tc_temp;
 627   1      
 628   1              tc_temp=gc_CurrentCard;
 629   1              if(gb_SD_Exist==1)
 630   1              {
 631   2                      if(gb_SD_pin==1)        // SD remove
 632   2                      {
 633   3                              gb_SD_Exist=0;
 634   3                              if(gc_CurrentCard==2)
 635   3                              {
 636   4                                      if(gb_Host_Exist==1)
 637   4                                      {
 638   5                                              if(Host_Initial()==0)
 639   5                                              {
 640   6                                                      if(DOS_Initialize()==0)
 641   6                                                      {
 642   7                                                              gc_CurrentCard=5;
 643   7                                                              LCM_ShowSDHostIcon();
 644   7                                                              return;
 645   7                                                      }
 646   6                                              }
 647   5                                      }
 648   4                                      gc_CurrentCard=9;
 649   4                                      LCM_ShowSDHostIcon();
 650   4                                      return;
 651   4                              }
 652   3                      }
 653   2              }
 654   1              else
 655   1              {
 656   2                      if(gb_SD_pin==0)
 657   2                      {
 658   3                              gb_SD_Exist=1;
 659   3                              if(SD_Identification_Flow()==1)
 660   3                              {
 661   4                                      gc_CurrentCard=2;
 662   4                                      if(DOS_Initialize()==0)
 663   4                                      {
 664   5                                              LCM_ShowSDHostIcon();
 665   5                                              return;
 666   5                                      }
 667   4                              }
 668   3                      }
 669   2              }
 670   1      
 671   1              if(gb_Host_Exist==1)
 672   1              {
 673   2                      if(Host_DetectDevice()==1)      // Host remove
 674   2                      {
C51 COMPILER V9.00   FM_FUNCTION                                                           07/09/2012 21:16:47 PAGE 12  

 675   3                              gb_Host_Exist=0;
 676   3                              if(gc_CurrentCard==5)
 677   3                              {
 678   4                                      gc_CurrentCard=2;
 679   4                                      if(gb_SD_Exist==1)
 680   4                                      {
 681   5                                              if(SD_Identification_Flow()==1)
 682   5                                              {
 683   6                                                      if(DOS_Initialize()==0)
 684   6                                                      {
 685   7                                                              LCM_ShowSDHostIcon();
 686   7                                                              return;
 687   7                                                      }
 688   6                                              }
 689   5                                      }
 690   4                                      gc_CurrentCard=9;
 691   4                                      LCM_ShowSDHostIcon();
 692   4                                      return;
 693   4                              }
 694   3                      }
 695   2              }
 696   1              else
 697   1              {
 698   2                      if(Host_DetectDevice()==0)
 699   2                      {
 700   3                              gc_CurrentCard=5;
 701   3                              gb_Host_Exist=1;
 702   3                              if(Host_Initial()==0)
 703   3                              {
 704   4                                      if(DOS_Initialize()==0)
 705   4                                      {
 706   5                                              LCM_ShowSDHostIcon();
 707   5                                              return;
 708   5                                      }
 709   4                              }
 710   3                      }
 711   2              }
 712   1              gc_CurrentCard=tc_temp;
 713   1      }
 714          
 715          void GetTotalFreeCluster(void)
 716          {
 717   1              U32 tdw_temp;
 718   1      
 719   1              if(gc_DOS_FileSystemType==2)    // FAT32
 720   1              {
 721   2                      gb_ReadWriteDataArea=1;
 722   2                      DOS_Read_LogicSector(gdw_DOS_PBRAddr+1);
 723   2                      ((U8 *)(&gdw_TotalFreeClusNumber))[0]=gc_UserDataBuf[491];
 724   2                      ((U8 *)(&gdw_TotalFreeClusNumber))[1]=gc_UserDataBuf[490];
 725   2                      ((U8 *)(&gdw_TotalFreeClusNumber))[2]=gc_UserDataBuf[489];
 726   2                      ((U8 *)(&gdw_TotalFreeClusNumber))[3]=gc_UserDataBuf[488];
 727   2                      gw_ClusBufValidSize=0;
 728   2                      ((U8 *)(&gdw_FreeClusterNum[0]))[0]=gc_UserDataBuf[495];
 729   2                      ((U8 *)(&gdw_FreeClusterNum[0]))[1]=gc_UserDataBuf[494];
 730   2                      ((U8 *)(&gdw_FreeClusterNum[0]))[2]=gc_UserDataBuf[493];
 731   2                      ((U8 *)(&gdw_FreeClusterNum[0]))[3]=gc_UserDataBuf[492];
 732   2      
 733   2                      if(gdw_TotalFreeClusNumber==0xFFFFFFFF)
 734   2                      {
 735   3                              tdw_temp=gdw_FreeClusterNum[0] ; 
 736   3                              gdw_FreeClusterNum[0] =0xFFFFFFF; 
C51 COMPILER V9.00   FM_FUNCTION                                                           07/09/2012 21:16:47 PAGE 13  

 737   3                              gdw_FreeClusterNum[1] =2; 
 738   3                              while(gdw_FreeClusterNum[1]<(gdw_DOS_FatMaxCluster-1)) 
 739   3                              { 
 740   4                                      DOS_SearchFreeCluster(1); 
 741   4                              } 
 742   3                              gdw_FreeClusterNum[0] =tdw_temp;
 743   3                      }
 744   2      
 745   2                      if(gdw_FreeClusterNum[0]>0x0FFFFFFF)
 746   2                      {
 747   3                              gdw_FreeClusterNum[0]=gdw_DOS_RootDirClus;
 748   3                      }
 749   2                      gdw_FreeClusterNum[0]--;
 750   2                      while(gw_ClusBufValidSize<16&&gdw_FreeClusterNum[0]<(gdw_DOS_FatMaxCluster-1))
 751   2                      {
 752   3                              DOS_SearchFreeCluster(0);
 753   3                      }
 754   2              }
 755   1              else
 756   1              {
 757   2                      while(gdw_FreeClusterNum[1]<(gdw_DOS_FatMaxCluster-1)) 
 758   2                      {         
 759   3                              DOS_SearchFreeCluster(1);
 760   3                      } 
 761   2                      gdw_TotalFreeClusNumber+=2;
 762   2              }
 763   1      #if 0
                      dbprintf("gdw_ClusterBuffer[0]=%lx\n",gdw_ClusterBuffer[0]);
                      dbprintf("gdw_ClusterBuffer[1]=%lx\n",gdw_ClusterBuffer[1]);
                      dbprintf("gdw_ClusterBuffer[2]=%lx\n",gdw_ClusterBuffer[2]);
                      dbprintf("gdw_ClusterBuffer[3]=%lx\n",gdw_ClusterBuffer[3]);
                      dbprintf("gdw_TotalFreeClusNumber=%lx\n",gdw_TotalFreeClusNumber);      
              #endif
 770   1      }
 771          
 772          void REC_Start(void)
 773          {
 774   1              data    bit     tb_FindFlag;
 775   1              xdata   U8      tc_Loop;
 776   1      
 777   1              XBYTE[0xB0ED]|=0x01;    // Audio AD zero cross reset bypass on
 778   1              XBYTE[0xB08A]&=0xFE;    //(JC)Audio PLL on
 779   1              XBYTE[0xB046]&=~0x04;
 780   1      
 781   1              // Count Free Cluster & Search 16-Free Cluster
 782   1              GetTotalFreeCluster();
 783   1              if(gb_OrderRecordTrigger==0)
 784   1              {
 785   2                      if(gs_System_State.w_SampleRate==32)
 786   2                      {
 787   3                              gdw_RecRemaintime=(U32)((double)gdw_TotalFreeClusNumber*gc_DOS_SectorPerCluster*505/1000/gs_System_Stat
             -e.w_SampleRate);                      
 788   3                      }
 789   2                      else
 790   2                      {
 791   3                              gdw_RecRemaintime=(U32)((double)gdw_TotalFreeClusNumber*gc_DOS_SectorPerCluster*505*2/1000/gs_System_St
             -ate.w_SampleRate);
 792   3                      }
 793   2              }
 794   1              else
 795   1              {
 796   2                      gdw_RecRemaintime=gw_OrderRecDuration;
C51 COMPILER V9.00   FM_FUNCTION                                                           07/09/2012 21:16:47 PAGE 14  

 797   2                      if(gb_Suspend_OrderRecord==0)
 798   2                      {
 799   3                              gdw_RecRemaintime++;
 800   3                      }
 801   2              }
 802   1              
 803   1              LCM_Clear_L0_L7();
 804   1              tb_FindFlag=gb_FindFlag;
 805   1              gb_FindFlag=0;
 806   1              gs_System_State.c_FileHandle=1;
 807   1              gw_FileIndex[1]=1;
 808   1              if(SearchFolder_VOICE())        // Change to "VOICE" folder
 809   1              {
 810   2                      RTC_Calendar();
 811   2                      gw_DOS_CreateDate=(U16)(gc_Year+30)*0x0200+(U16)gc_Month*0x0020+gc_Day;
 812   2                      gw_DOS_CreateTime=(U16)gc_Hour*0x0800+(U16)gc_Min*0x0020+gc_Sec;
 813   2                      if(CreateFolder_VOICE()==1)
 814   2                      {   
 815   3                              // Create VOICE folder fail
 816   3                              return;
 817   3                      }
 818   2                      SearchFolder_VOICE();   // Change to "VOICE" folder
 819   2              }
 820   1      
 821   1              gs_System_State.c_Phase=TASK_PHASE_REC;
 822   1              if(DOS_Search_File(C_File_OneDir|C_By_Name,C_RecordFileType,C_CmpExtName|C_Prev))//get max index number;
 823   1              {
 824   2                      gdw_REC_IndexNum=0x30303030;
 825   2              }
 826   1              else
 827   1              {
 828   2                      gdw_REC_IndexNum=gdw_CurrFlag;
 829   2              }       
 830   1              gb_FindFlag=tb_FindFlag;
 831   1      
 832   1              set_clock_mode(CLOCK_MODE_DOS);
 833   1              if(!DOS_Open_File_w())
 834   1              {//disk is not full,can do record
 835   2                      //calculate REC Index            
 836   2                      ((U8 *)(&gdw_REC_IndexNum))[3]++;
 837   2                      for(tc_Loop=3;tc_Loop>0;tc_Loop--)
 838   2                      {
 839   3                              if(((U8 *)(&gdw_REC_IndexNum))[tc_Loop]==0x3a)
 840   3                              {
 841   4                                      ((U8 *)(&gdw_REC_IndexNum))[tc_Loop]='0';
 842   4                                      ((U8 *)(&gdw_REC_IndexNum))[tc_Loop-1]++;
 843   4                              }
 844   3                              else
 845   3                              {
 846   4                                      break;
 847   4                              }
 848   3                      }
 849   2      
 850   2                      gc_FileLongName[0x00]=0x00;
 851   2                      gc_FileLongName[0x01]=0x00;     
 852   2                      gc_FileLongName[0x02]=0x01;
 853   2                      gc_FileLongName[0x03]=0x00;
 854   2                      gc_FileLongName[0x04]=0x0C;
 855   2                      gc_FileLongName[0x05]='R';
 856   2                      gc_FileLongName[0x06]='E';
 857   2                      gc_FileLongName[0x07]='C';
 858   2                      gc_FileLongName[0x08]='_';
C51 COMPILER V9.00   FM_FUNCTION                                                           07/09/2012 21:16:47 PAGE 15  

 859   2                      gc_FileLongName[0x09]=((U8 *)(&gdw_REC_IndexNum))[0];
 860   2                      gc_FileLongName[0x0A]=((U8 *)(&gdw_REC_IndexNum))[1];
 861   2                      gc_FileLongName[0x0B]=((U8 *)(&gdw_REC_IndexNum))[2];
 862   2                      gc_FileLongName[0x0C]=((U8 *)(&gdw_REC_IndexNum))[3];
 863   2                      gc_FileLongName[0x0D]='.';
 864   2                      gc_FileLongName[0x0E]='W';
 865   2                      gc_FileLongName[0x0F]='A';
 866   2                      gc_FileLongName[0x10]='V';
 867   2                      
 868   2                      gdw_CurrFlag=gdw_REC_IndexNum;
 869   2                      gdw_StartCluster2=gs_File_FCB[gs_System_State.c_FileHandle].dw_File_StartCluster;
 870   2                      gs_File_FCB[gs_System_State.c_FileHandle].c_FileType=AUDIO_FILE_TYPE_WAV;
 871   2                      set_clock_mode(CLOCK_MODE_REC);
 872   2                      IMA_ADPCM_Rec_Download();
 873   2                      if(gs_System_State.w_SampleRate==32)
 874   2                      {
 875   3                              IMA_ADPCM_Rec_PlayCmd(gs_System_State.w_SampleRate,2);  // sample rate,channel(Stereo)                  
 876   3                      }
 877   2                      else
 878   2                      {
 879   3                              IMA_ADPCM_Rec_PlayCmd(gs_System_State.w_SampleRate,1);  // sample rate,channel(Mono)                    
 880   3                      }
 881   2                      gs_System_State.c_Phase=TASK_PHASE_REC;
 882   2                      gdw_FATBufferSectorNum=0xFFFFFFFF;
 883   2              }
 884   1      }
 885          
 886          void REC_Stop(void)
 887          {
 888   1              xdata   U8      i;
 889   1              xdata   U32     tdw_reservedSectors;
 890   1              xdata   U32     tdw_FreeMemorySize;
 891   1              xdata   U32     tdw_AudioSize;
 892   1              xdata   U32     tdw_DATA_LogAddr;
 893   1              
 894   1              if(gs_System_State.c_Phase!=TASK_PHASE_STOP)//(JC)prevent from repeating stop
 895   1              {
 896   2                      gb_OrderRecordTrigger=0;
 897   2                      IMA_ADPCM_Rec_StopProcess();//(JC)write remain data
 898   2      
 899   2                      gc_FileLongName[0x0D]='W';
 900   2                      gc_FileLongName[0x0E]='A';
 901   2                      gc_FileLongName[0x0F]='V';
 902   2                      RTC_Calendar();
 903   2                      DOS_Close_File_w(&gc_FileLongName+5);
 904   2                      tdw_DATA_LogAddr=DOS_ClusterLogicAddr(gs_File_FCB[1].dw_File_StartCluster);
 905   2                      gb_ReadWriteDataArea=0;
 906   2                      DOS_Read_LogicSector(tdw_DATA_LogAddr);
 907   2      
 908   2                      tdw_AudioSize=gs_File_FCB[1].dw_File_TotalSize-60;
 909   2                      gc_PlayRecordDataBuf[0x38]=*((U8 *)&tdw_AudioSize+3);
 910   2                      gc_PlayRecordDataBuf[0x39]=*((U8 *)&tdw_AudioSize+2);
 911   2                      gc_PlayRecordDataBuf[0x3A]=*((U8 *)&tdw_AudioSize+1);
 912   2                      gc_PlayRecordDataBuf[0x3B]=*((U8 *)&tdw_AudioSize+0);
 913   2      
 914   2                      tdw_AudioSize+=0x34;
 915   2                      gc_PlayRecordDataBuf[0x04]=*((U8 *)&tdw_AudioSize+3);
 916   2                      gc_PlayRecordDataBuf[0x05]=*((U8 *)&tdw_AudioSize+2);
 917   2                      gc_PlayRecordDataBuf[0x06]=*((U8 *)&tdw_AudioSize+1);
 918   2                      gc_PlayRecordDataBuf[0x07]=*((U8 *)&tdw_AudioSize+0);
 919   2      
 920   2                      // sample rate is 8000, when block is 256,then 505,     when block is 512 then 1017
C51 COMPILER V9.00   FM_FUNCTION                                                           07/09/2012 21:16:47 PAGE 16  

 921   2                      tdw_AudioSize=505*(gs_File_FCB[1].dw_File_TotalSize-60)/(DSP_ADPCM_OUT_SZ_PER_CH*2);
 922   2                      gc_PlayRecordDataBuf[0x30]=*((U8 *)&tdw_AudioSize+3);
 923   2                      gc_PlayRecordDataBuf[0x31]=*((U8 *)&tdw_AudioSize+2);
 924   2                      gc_PlayRecordDataBuf[0x32]=*((U8 *)&tdw_AudioSize+1);
 925   2                      gc_PlayRecordDataBuf[0x33]=*((U8 *)&tdw_AudioSize+0);
 926   2                      gb_ReadWriteDataArea=0;
 927   2                      DOS_Write_LogicSector(tdw_DATA_LogAddr,3);
 928   2                      //------+ sq added for refreshing the next file name after saving a file in Rec UI @080924 ------
 929   2                      gdw_CurrFlag=gdw_REC_IndexNum;
 930   2                      gdw_NextRecordNumber=gdw_CurrFlag;
 931   2      
 932   2                      ((U8 *)(&gdw_NextRecordNumber))[3]++;
 933   2                      for(i=3;i>0;i--)
 934   2                      {
 935   3                              if(((U8 *)(&gdw_NextRecordNumber))[i]==0x3A)
 936   3                              {
 937   4                                      ((U8 *)(&gdw_NextRecordNumber))[i]='0';
 938   4                                      ((U8 *)(&gdw_NextRecordNumber))[i-1]++;
 939   4                              }
 940   3                              else
 941   3                              {
 942   4                                      break;
 943   4                              }
 944   3                      }
 945   2                      gc_FileLongName[0x09]=((U8 *)(&gdw_NextRecordNumber))[0];
 946   2                      gc_FileLongName[0x0A]=((U8 *)(&gdw_NextRecordNumber))[1];
 947   2                      gc_FileLongName[0x0B]=((U8 *)(&gdw_NextRecordNumber))[2];
 948   2                      gc_FileLongName[0x0C]=((U8 *)(&gdw_NextRecordNumber))[3];
 949   2              }
 950   1              gc_FileLongName[0x0D]='.';
 951   1              gc_FileLongName[0x0E]='W';
 952   1              gc_FileLongName[0x0F]='A';
 953   1              gc_FileLongName[0x10]='V';
 954   1              IMA_ADPCM_Rec_StopCmd();
 955   1              gs_System_State.c_Phase=TASK_PHASE_STOP;
 956   1      
 957   1              // Write Total Free Cluster & Last Used Cluster Number into FAT32 FSInfo Sector
 958   1              if(gc_DOS_FileSystemType==2)    // FAT32
 959   1              {
 960   2                      gb_ReadWriteDataArea=1;
 961   2                      DOS_Read_LogicSector(gdw_DOS_PBRAddr+1);
 962   2                      gc_UserDataBuf[491]=((U8 *)(&gdw_TotalFreeClusNumber))[0];
 963   2                      gc_UserDataBuf[490]=((U8 *)(&gdw_TotalFreeClusNumber))[1];
 964   2                      gc_UserDataBuf[489]=((U8 *)(&gdw_TotalFreeClusNumber))[2];
 965   2                      gc_UserDataBuf[488]=((U8 *)(&gdw_TotalFreeClusNumber))[3];
 966   2                      gc_UserDataBuf[495]=((U8 *)(&gs_File_FCB[1].dw_File_CurrentCluster))[0];
 967   2                      gc_UserDataBuf[494]=((U8 *)(&gs_File_FCB[1].dw_File_CurrentCluster))[1];
 968   2                      gc_UserDataBuf[493]=((U8 *)(&gs_File_FCB[1].dw_File_CurrentCluster))[2];
 969   2                      gc_UserDataBuf[492]=((U8 *)(&gs_File_FCB[1].dw_File_CurrentCluster))[3];
 970   2                      DOS_Write_LogicSector(gdw_DOS_PBRAddr+1,3);
 971   2              }
 972   1      
 973   1              LCM_Clear_L2_L7();
 974   1              LCM_ShowFrequency_L();
 975   1              LCM_ShowFMOrderRecordIcon();
 976   1              tdw_reservedSectors=(U32)(gc_DOS_SectorPerCluster<<2)+36;
 977   1              gdw_RecSpareTime=(((tdw_FreeMemorySize-tdw_reservedSectors)*505)/4000)/2;//(JC)H1118 to match with the DS
             -P time calculation, //odin20081127updated
 978   1      
 979   1              if((tdw_FreeMemorySize<=tdw_reservedSectors)||(gdw_RecSpareTime==0)) 
 980   1              {
 981   2                      return;
C51 COMPILER V9.00   FM_FUNCTION                                                           07/09/2012 21:16:47 PAGE 17  

 982   2              }
 983   1              else
 984   1              {
 985   2                      tdw_FreeMemorySize-=((U32)(gc_DOS_SectorPerCluster<<2)+36);//(JC)H1118 max 36 sectors of bitstream buf f
             -or writing remain data
 986   2                      gdw_RecSpareTime=((tdw_FreeMemorySize*505)/4000)/2;//(JC)H1119 to match w/ the DSP
 987   2              }
 988   1      }
 989          
 990          U8 IMA_ADPCM_Rec_StopProcess(void)
 991          {
 992   1              data    U8      tc_SectorNum;
 993   1      
 994   1              while(1)
 995   1              {
 996   2                      if(!(L2_DSP_Read_DMem16(DSP_RemainBuffer)<512))
 997   2                      {
 998   3                              L2_DSP_DM_MCU_DMA(gs_DSP_GLOBAL_RAM.sc_DM_Index,(U16)gc_PlayRecordDataBuf);  // 2^9
 999   3                              if(L2_DSP_SendCommandSet(DCMD_DatOut) != DCMD_DatOut)
1000   3                              {
1001   4                                      return DSP_DATAOUT_COMMAND_ERROR;
1002   4                              }
1003   3      
1004   3                              gs_DSP_GLOBAL_RAM.sc_DM_Index++;
1005   3                              if(gs_DSP_GLOBAL_RAM.sc_DM_Index>=24)
1006   3                              {
1007   4                                      gs_DSP_GLOBAL_RAM.sc_DM_Index=0;
1008   4                              }
1009   3      
1010   3                              tc_SectorNum=gs_File_FCB[C_RecordFHandle].dw_File_DataPoint>>9;
1011   3                              if(gc_DOS_SectorPerCluster==1)
1012   3                              {   
1013   4                                      gdw_TotalFreeClusNumber--;
1014   4                                      DOS_Write_File(3);
1015   4                              }
1016   3                              else if(tc_SectorNum==0||tc_SectorNum==gc_DOS_SectorPerCluster)
1017   3                              {
1018   4                                      gdw_TotalFreeClusNumber--;
1019   4                                      DOS_Write_File(0);
1020   4                              }
1021   3                              else if(tc_SectorNum==gc_DOS_SectorPerCluster-1)
1022   3                              {
1023   4                                      DOS_Write_File(2);
1024   4                              }
1025   3                              else
1026   3                              {
1027   4                                      DOS_Write_File(1);
1028   4                              }
1029   3                      }
1030   2                      else
1031   2                      {
1032   3                              break;
1033   3                      }
1034   2              }
1035   1              if(gc_CurrentCard==5)
1036   1              {
1037   2                      tc_SectorNum=gs_File_FCB[C_RecordFHandle].dw_File_DataPoint>>9;
1038   2                      if(tc_SectorNum!=gc_DOS_SectorPerCluster)
1039   2                      {
1040   3                              memset(gc_PlayRecordDataBuf,0,512);
1041   3                              while(tc_SectorNum!=gc_DOS_SectorPerCluster)
1042   3                              {
C51 COMPILER V9.00   FM_FUNCTION                                                           07/09/2012 21:16:47 PAGE 18  

1043   4                                      if(tc_SectorNum==gc_DOS_SectorPerCluster-1)
1044   4                                      {
1045   5                                              DOS_Write_File(2);
1046   5                                      }
1047   4                                      else
1048   4                                      {
1049   5                                              DOS_Write_File(1);
1050   5                                      }
1051   4                                      tc_SectorNum++;
1052   4                              }
1053   3                      }
1054   2              }
1055   1              return 0;
1056   1      }
1057          
1058          U8 IMA_ADPCM_Rec_DataOut(void)
1059          {
1060   1              data    U8      tc_SectorNum;
1061   1      
1062   1              while(L2_DSP_Read_DMem16(DSP_RemainBuffer)>768) //Jimi, cuz DSP use lower 16-bit of DM to put out data.
1063   1              {
1064   2                      XBYTE[0xB390]=0x91;     // Fragment enable
1065   2                      L2_DSP_DM_MCU_DMA(gs_DSP_GLOBAL_RAM.sc_DM_Index,(U16)gc_RecordDataBuf); // 2^9=512
1066   2                      XBYTE[0xB390]=0x00;     // Fragment disable
1067   2                      // gc_RecordDataBuf[] DMA to gc_PlayRecordDataBuf[]
1068   2                      XBYTE[0xB301]=0x00;
1069   2                      XBYTE[0xB112]=0x00;
1070   2                      XBYTE[0xB113]=gc_RecordDataBufHB;
1071   2                      XBYTE[0xB114]=0x00;
1072   2                      XBYTE[0xB115]=gc_PlayRecordDataBufHB;
1073   2                      XBYTE[0xB3B0]=0x01;
1074   2                      while(!(XBYTE[0xB3C0]&0x01));
1075   2                      XBYTE[0xB3C0]=0x00;
1076   2      
1077   2                      if(L2_DSP_SendCommandSet(DCMD_DatOut)!=DCMD_DatOut)
1078   2                      {
1079   3                              return DSP_DATAOUT_COMMAND_ERROR;
1080   3                      }
1081   2      
1082   2                      gs_DSP_GLOBAL_RAM.sc_DM_Index++;
1083   2                      if(gs_DSP_GLOBAL_RAM.sc_DM_Index>=24)
1084   2                      {
1085   3                              gs_DSP_GLOBAL_RAM.sc_DM_Index=0;
1086   3                      }
1087   2      
1088   2                      tc_SectorNum=gs_File_FCB[1].dw_File_DataPoint>>9;
1089   2                      if(gc_DOS_SectorPerCluster==1)
1090   2                      {   
1091   3                              gdw_TotalFreeClusNumber--;
1092   3                              DOS_Write_File(3);                        //write one sector
1093   3                      }
1094   2                      else if(tc_SectorNum==0||tc_SectorNum==gc_DOS_SectorPerCluster)
1095   2                      {
1096   3                              gdw_TotalFreeClusNumber--;
1097   3                              DOS_Write_File(0);
1098   3                      }
1099   2                      else if(tc_SectorNum==gc_DOS_SectorPerCluster-1)
1100   2                      {
1101   3                              DOS_Write_File(2);
1102   3                      }
1103   2                      else
1104   2                      {
C51 COMPILER V9.00   FM_FUNCTION                                                           07/09/2012 21:16:47 PAGE 19  

1105   3                              DOS_Write_File(1);
1106   3                      }
1107   2              }
1108   1      
1109   1              if(gb_RTC_wakeup==1)
1110   1              {   
1111   2                      gb_RTC_wakeup=0;
1112   2                      if(gw_Disp_CurrentSec!=IMA_ADPCM_Rec_Time())
1113   2                      {
1114   3                              gw_Disp_CurrentSec=IMA_ADPCM_Rec_Time();
1115   3                              LCM_ShowRECTime(gw_Disp_CurrentSec);
1116   3                              gdw_RecRemaintime--;
1117   3                              LCM_ShowRECRemainTime(gdw_RecRemaintime);
1118   3                      }
1119   2              }
1120   1              return 0;
1121   1      }
1122          
1123          U8 IMA_ADPCM_Rec_StopCmd(void)
1124          {
1125   1              data    U8  tc_Ret;
1126   1              data    U16 tw_temp;
1127   1              
1128   1              tc_Ret=DSP_StopCmd();
1129   1              
1130   1              tw_temp=DSP_Read_MMR16(0x3fc0);
1131   1              DSP_Write_MMR16(0x3fc0,tw_temp&~0x0200);                        // turn off ADC clock for power saving
1132   1              return tc_Ret;
1133   1      }
1134          
1135          U16  IMA_ADPCM_Rec_Time(void)
1136          {
1137   1              xdata   U32   FrameNum;
1138   1              data    U32   tdwTmpSec;
1139   1              
1140   1              FrameNum=L2_DSP_Read_DMem24(DSP_DecodeFrameCounter)*505/1000;
1141   1              tdwTmpSec=FrameNum/gs_System_State.w_SampleRate;
1142   1              return ((U16)tdwTmpSec);
1143   1      }
1144          
1145          
1146          void L2_DSP_DM_MCU_DMA(U16 BufferIndex,U16 tw_Src)
1147          {
1148   1              data    U8  tc_DSPAddr_High;
1149   1      
1150   1              // ----- DMA Reset -----
1151   1              XBYTE[0xB304]=0x09;
1152   1              XBYTE[0xB304]=0x08;
1153   1              XBYTE[0xB3C0]=0x00;             // clear DMA complete
1154   1              XBYTE[0xB330]=0x01;             // clear checksum                       
1155   1              // ----- DMA initial settings for DM transfer -----             
1156   1              XBYTE[0xB216]=0x00;     // Remain DSP mode.  When you do MCU -> DM, MCU will stop DSP automaticlly
1157   1              // Define data size in DMA              
1158   1              XBYTE[0xB301]=0x05;     // DM -> SRAM
1159   1              XBYTE[0xB302]=0xFF;     // Size=512
1160   1              XBYTE[0xB303]=0x01;
1161   1      
1162   1              XBYTE[0xB340]=0x01;     // 16-bit DMA
1163   1              XBYTE[0xB21D]=0x01;
1164   1              tc_DSPAddr_High=BufferIndex;
1165   1              tc_DSPAddr_High+=0x20;  // bitstream start address : 0x2000
1166   1              XBYTE[0xB217]=(U8)(BufferIndex<<8);
C51 COMPILER V9.00   FM_FUNCTION                                                           07/09/2012 21:16:47 PAGE 20  

1167   1              XBYTE[0xB218]=tc_DSPAddr_High;
1168   1      
1169   1              // Source
1170   1              XBYTE[0xB114]=(U8)(tw_Src);
1171   1              XBYTE[0xB115]=(U8)((tw_Src)>>8);
1172   1              XBYTE[0xB3B0]=0x01;     // DMA1 start
1173   1              while(!(XBYTE[0xB3C0]&0x01));
1174   1              XBYTE[0xB3C0]=0x00;
1175   1      }
1176          
1177          void LCM_ShowRECFilename(void)
1178          {
1179   1              gc_LCM_line=6;
1180   1              LCM_ShowChar8x16(30,0);         // R
1181   1              LCM_ShowChar8x16(17,8);         // E
1182   1              LCM_ShowChar8x16(15,16);        // C
1183   1              LCM_ShowChar8x16(11,24);        // _
1184   1              LCM_ShowChar8x16(gc_FileLongName[ 9]-0x30,32);
1185   1              LCM_ShowChar8x16(gc_FileLongName[10]-0x30,40);
1186   1              LCM_ShowChar8x16(gc_FileLongName[11]-0x30,48);
1187   1              LCM_ShowChar8x16(gc_FileLongName[12]-0x30,56);
1188   1              LCM_ShowChar8x16(65,64);        // .
1189   1              LCM_ShowChar8x16(35,72);        // W
1190   1              LCM_ShowChar8x16(13,80);        // A
1191   1              LCM_ShowChar8x16(34,88);        // V
1192   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   4215    ----
   CONSTANT SIZE    =     73    ----
   XDATA SIZE       =   ----      25
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----      13
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----       1
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
