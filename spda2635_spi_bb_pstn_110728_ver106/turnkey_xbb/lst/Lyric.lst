C51 COMPILER V9.00   LYRIC                                                                 07/09/2012 21:16:52 PAGE 1   


C51 COMPILER V9.00, COMPILATION OF MODULE LYRIC
OBJECT MODULE PLACED IN .\obj\Lyric.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE Play\Lyric.c LARGE OPTIMIZE(9,SIZE) BROWSE NOAREGS INCDIR(..\libsource\head
                    -er) DEFINE(K_ICTYPE=0x03) DEBUG OBJECTEXTEND PRINT(.\lst\Lyric.lst) OBJECT(.\obj\Lyric.obj)

line level    source

   1          #include "..\header\SPDA2K.h"
   2          #include "..\header\variables.h"
   3          
   4          
   5          U8 Lyric_OffsetLRC()
   6          {
   7   1              gw_LrcOffset++;
   8   1              gdw_LrcFilePointer++;
   9   1              if(gdw_LrcFilePointer>=gdw_LrcFileSize)
  10   1              {
  11   2                      return 0;
  12   2              }       
  13   1              if(gw_LrcOffset==512)
  14   1              {
  15   2                      gw_LrcOffset=0;
  16   2                      if(!Lyric_ReadLrcFile(1))
  17   2                      {
  18   3                              return 0;
  19   3                      }
  20   2              }
  21   1              return 1;       
  22   1      }
  23          
  24          void Lyric_GetLyrics(void)
  25          {
  26   1              data    U8 i;
  27   1      
  28   1              i=0;
  29   1              Lyric_ReadLrcFile(0);
  30   1      
  31   1              gw_LrcOffset=(gdw_LrcFilePointer&0x1ff);
  32   1              while(gc_PlayRecordDataBuf[gw_LrcOffset]!=0x0a)//(JC)not <LF>, fill 0x0d to lyric buf, it will cause carr
             -iage return
  33   1              {
  34   2                      gc_LrcDisplayBuf[i]=gc_PlayRecordDataBuf[gw_LrcOffset];
  35   2                      i++;
  36   2                      if(i>=LRC_DISPLAY_LYRICS_CHARNUMBER)//(JC)max char numbers of piece of lyrics for a time stamp 
  37   2                      {
  38   3                              break;
  39   3                      }
  40   2      
  41   2                      gw_LrcOffset++;
  42   2                      gdw_LrcFilePointer++;
  43   2                      if(gdw_LrcFilePointer >= gdw_LrcFileSize)
  44   2                      {
  45   3                              break;
  46   3                      }       
  47   2                      if(gw_LrcOffset==512)
  48   2                      {
  49   3                              gw_LrcOffset=0;
  50   3                              if(!Lyric_ReadLrcFile(1))
  51   3                              {
  52   4                                      break;
  53   4                              }
C51 COMPILER V9.00   LYRIC                                                                 07/09/2012 21:16:52 PAGE 2   

  54   3                      }                               
  55   2              }
  56   1              gc_LrcCurrentLen=i;
  57   1      }
  58          
  59          
  60          void Lyric_GetTimeStamp(void)
  61          {
  62   1              data    U8 i;
  63   1              data    U8 Time_Char[5];
  64   1      
  65   1              Time_Char[0]=(gw_Disp_CurrentSec/60)/10+0x30;
  66   1              Time_Char[1]=((gw_Disp_CurrentSec/60)%10)+0x30;
  67   1              Time_Char[2]=':';
  68   1              Time_Char[3]=(gw_Disp_CurrentSec%60)/10+0x30;
  69   1              Time_Char[4]=(gw_Disp_CurrentSec%10)+0x30;
  70   1              gdw_LrcFileCurrentCluster=gdw_LrcFileStartCluster;
  71   1              gw_LrcOffset=0;
  72   1              gdw_LrcFilePointer=0;   
  73   1              gb_LrcGetTimeOrNot=0;
  74   1              Lyric_ReadLrcFile(0);
  75   1              
  76   1              while(1)
  77   1              {
  78   2                      if(gc_PlayRecordDataBuf[gw_LrcOffset]=='[')
  79   2                      {
  80   3                              for(i=0;i<5;i++)
  81   3                              {
  82   4                                      if(Lyric_OffsetLRC()==0)
  83   4                                      {
  84   5                                              return;
  85   5                                      }
  86   4      
  87   4                                      if(Time_Char[i]!=gc_PlayRecordDataBuf[gw_LrcOffset])
  88   4                                      {
  89   5                                              break;
  90   5                                      }
  91   4                              }
  92   3                              if(i>=5)//(JC)matching timestamp 
  93   3                              {
  94   4                                      while(1)
  95   4                                      {
  96   5                                              while(gc_PlayRecordDataBuf[gw_LrcOffset]!=']')//(JC)bypass the decimal point and digits rite to it
  97   5                                              {       
  98   6                                                      if(Lyric_OffsetLRC()==0)
  99   6                                                      {
 100   7                                                              return; 
 101   7                                                      }
 102   6                                              }
 103   5      
 104   5                                              if(Lyric_OffsetLRC()==0)//(JC)Bypass ']'
 105   5                                              {
 106   6                                                      return;         
 107   6                                              }
 108   5      
 109   5                                              if(gc_PlayRecordDataBuf[gw_LrcOffset]!='[')
 110   5                                              {       
 111   6                                                      gb_LrcGetTimeOrNot=1;//(JC)matching time stamp, following the lyrics
 112   6                                                      return; 
 113   6                                              }
 114   5                                      }
 115   4                              }
C51 COMPILER V9.00   LYRIC                                                                 07/09/2012 21:16:52 PAGE 3   

 116   3                      }
 117   2      
 118   2                      if(Lyric_OffsetLRC()==0)
 119   2                      {
 120   3                              return; 
 121   3                      }
 122   2              }
 123   1      }
 124          
 125          
 126          U8 Lyric_FileSearch()
 127          {
 128   1              data    U8      tc_Status;
 129   1              data    U8      tc_TempBuff[3];
 130   1              data    U16     tw_Lenth;
 131   1      
 132   1              {
 133   2                      gs_File_FCB[2].dw_FDB_StartCluster=gs_File_FCB[0].dw_FDB_StartCluster;
 134   2                      if (!gc_FileLongName[2])
 135   2                      {//0:long                       
 136   3                              EXT_NameC[0]=1;         
 137   3                              ((U8 *)(&tw_Lenth))[0] = gc_FileLongName[3];
 138   3                              ((U8 *)(&tw_Lenth))[1] = gc_FileLongName[4];
 139   3                              tw_Lenth+=5;    
 140   3                                      
 141   3                              tc_TempBuff[0] = gc_FileLongName[tw_Lenth-1];
 142   3                              tc_TempBuff[1] = gc_FileLongName[tw_Lenth-3];                   
 143   3                              tc_TempBuff[2]=gc_FileLongName[tw_Lenth-5];                     
 144   3                              gc_FileLongName[tw_Lenth-5]='L';
 145   3                              gc_FileLongName[tw_Lenth-3]='R';
 146   3                              gc_FileLongName[tw_Lenth-1]='C';
 147   3                              tc_Status=DOS_Search_File(C_File_OneDir|C_By_LName,C_OtherFileType,C_CmpExtName|C_Next);                        
 148   3                      }
 149   2                      else
 150   2                      {               
 151   3                              EXT_NameC[0]=1;
 152   3                              EXT_NameC[1]='L';
 153   3                              EXT_NameC[2]='R';
 154   3                      EXT_NameC[3]='C';
 155   3                              tc_Status=DOS_Search_File(C_File_OneDir|C_By_SName,C_OtherFileType,C_CmpExtName|C_Next);
 156   3                      }       
 157   2                      
 158   2                      if (!gc_FileLongName[2])//(JC)finish searching, restore file name
 159   2                      {
 160   3                              gc_FileLongName[tw_Lenth-1]=tc_TempBuff[0];
 161   3                              gc_FileLongName[tw_Lenth-3]=tc_TempBuff[1]; 
 162   3                              gc_FileLongName[tw_Lenth-5]=tc_TempBuff[2];
 163   3                      }       
 164   2                      
 165   2                      if (tc_Status)
 166   2                      {//no LRC file
 167   3                              return 0;
 168   3                      }
 169   2                      else
 170   2                      {//LRC file is exist    
 171   3                              DOS_Open_File_r(C_OtherFHandle, C_Open_FoundFile, C_NullFileName);//get file_totalsize and startcluster
 172   3                              gdw_LrcFileStartCluster = gs_File_FCB[2].dw_File_StartCluster;
 173   3                              gdw_LrcFileSize = gs_File_FCB[2].dw_File_TotalSize;
 174   3                              return 1;
 175   3                      }
 176   2              }
 177   1      }
C51 COMPILER V9.00   LYRIC                                                                 07/09/2012 21:16:52 PAGE 4   

 178          
 179          U8 Lyric_ReadLrcFile(U8 tc_ReadNextSector)
 180          {
 181   1              data    U16 tdw_ResidualSector;
 182   1              xdata   U32 tdw_DataLogicAddr;
 183   1              xdata   U32 tdw_prevCluster;
 184   1      
 185   1              if(gdw_LrcFilePointer >= gdw_LrcFileSize)
 186   1              {
 187   2                      return 0;
 188   2              }
 189   1              if((gdw_LrcFilePointer>>9)!=0)
 190   1              {
 191   2                      if ((((gdw_LrcFilePointer>>9)&(gc_DOS_SectorPerCluster-1))==0) && tc_ReadNextSector)
 192   2                      {
 193   3                              tdw_prevCluster = gdw_LrcFileCurrentCluster;
 194   3                              gdw_LrcFileCurrentCluster =     DOS_GetNextCluster(gdw_LrcFileCurrentCluster, 1);
 195   3                              if (tdw_prevCluster     == gdw_LrcFileCurrentCluster || gdw_LrcFileCurrentCluster == 0 || gdw_LrcFileCurren
             -tCluster >= 0x0ffffff8)
 196   3                              {
 197   4                                      return 0;
 198   4                              }
 199   3                      }
 200   2              }
 201   1              tdw_ResidualSector = ((gdw_LrcFilePointer>>9))&(gc_DOS_SectorPerCluster-1);
 202   1              tdw_DataLogicAddr = DOS_ClusterLogicAddr(gdw_LrcFileCurrentCluster)+(tdw_ResidualSector);
 203   1              
 204   1              gb_ReadWriteDataArea = 0;
 205   1              return (!DOS_Read_LogicSector(tdw_DataLogicAddr));
 206   1      }
 207          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    921    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----       5
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----      15
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
