C51 COMPILER V9.00   PLAYMENU                                                              07/10/2012 15:51:57 PAGE 1   


C51 COMPILER V9.00, COMPILATION OF MODULE PLAYMENU
OBJECT MODULE PLACED IN .\obj\PlayMenu.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE Play\PlayMenu.C LARGE OPTIMIZE(9,SIZE) BROWSE NOAREGS INCDIR(..\libsource\h
                    -eader) DEFINE(K_ICTYPE=0x03) DEBUG OBJECTEXTEND PRINT(.\lst\PlayMenu.lst) OBJECT(.\obj\PlayMenu.obj)

line level    source

   1          #include "..\Header\SPDA2K.h"
   2          #include "..\header\dos\fs_struct.h"
   3          #include "..\header\Memalloc.h"
   4          #include "PlayMenu.h" 
   5          #include "..\IR\remote.h"  
   6          #include "..\header\variables.h"
   7          #include "..\header\host_init.h"
   8          
   9          #include "..\UI_Display\common_UI_disp_func.c"
  10          #include "..\LCM\TFT_display.h"         // TFT  
  11          #include "..\LCM\TFT_config.h"          // TFT  
  12          
  13          
  14          void PlayMenuProcess();
  15          void PlayMenuProcess_IR();
  16          void PlayModeMenuProcess_IR();
  17          void LanguageMenuProcess_IR();
  18          void EQMenuProcess_IR();
  19          void Play_SourceDetect_Process_Mainmenu();
  20          void IR_Service_Process_Menu_1(void);
  21          extern  void    ir_service_menu(void);
  22          extern void IR_Service_Process_Menu();
  23          extern  void    TFT_ShowMenu();
  24          extern void     FM_drive(void);
  25          xdata U8 LanguageTable[]={2,1,0,3,4,6,5,7,11,12,8,9,10,13,14,15};
  26          
  27          extern  xdata   U8      gc_ShowMenuTimer;
  28          extern  U8              gc_clock_mode;  //20090526 chiayen add
  29          xdata   U8      gc_LanguageSel;
  30          extern xdata    U16     gw_Disp_CurrentSecBak;
  31          extern  U8   USER_LogFile_ReadWrite(U8 tbt_ReadOrWrite);//use reserveblock for log
  32          extern  xdata   U8      gc_MenuItemCount;
  33          extern  data    bit     gb_TFT_refresh;
  34          
  35          #define SetupMenuTpye 41
  36          #define LanguageMenuTpye 42
  37          #define MemeryTitleType 43
  38          #define FWVerTitleType 44
  39          
  40          #ifdef Contrast_Set
  41          #define ContrastTitleType 45
  42          #endif
  43          
  44          
  45          void LanguageMenuProcess()
  46          {
  47   1              bit     tc_Confirm=0;
  48   1      
  49   1              gc_PhaseInx = 0;
  50   1              gc_MenuItem=gc_LanguageSel;
  51   1              //TFT_LanguageMenu();
  52   1          Menu_Disp_Item_Other(LanguageMenuTpye,gc_MenuItem,REFRESH_ALL);
  53   1              while(1)
  54   1          {
C51 COMPILER V9.00   PLAYMENU                                                              07/10/2012 15:51:57 PAGE 2   

  55   2                      if(gc_PhaseInx)
  56   2                      {
  57   3                      switch(gc_PhaseInx)
  58   3                      {
  59   4                          case C_PlayMenu:
  60   4                                              gc_refresh_type = REFRESH_ALL;
  61   4                                              tc_Confirm=1;
  62   4                          break;
  63   4      
  64   4                          case C_PlayNext:
  65   4                                              gc_refresh_type = REFRESH_NEXT;
  66   4                                              if(gc_MenuItem==16)
  67   4                                              {
  68   5                                                      gc_MenuItem=0;
  69   5                                              }
  70   4                                              else
  71   4                                              {
  72   5                                                      gc_MenuItem++;
  73   5                                              }
  74   4                                              //TFT_LanguageMenu();
  75   4                                          Menu_Disp_Item_Other(LanguageMenuTpye,gc_MenuItem,gc_refresh_type);
  76   4                          break;
  77   4      
  78   4                          case C_PlayPrev:
  79   4                                              gc_refresh_type = REFRESH_PREV;
  80   4                                              if(gc_MenuItem==0)
  81   4                                              {
  82   5                                                      gc_MenuItem=16;
  83   5                                              }
  84   4                                              else
  85   4                                              {
  86   5                                                      gc_MenuItem--;
  87   5                                              }
  88   4                                              //TFT_LanguageMenu();
  89   4                                          Menu_Disp_Item_Other(LanguageMenuTpye,gc_MenuItem,gc_refresh_type);
  90   4                          break;
  91   4      
  92   4                                      case C_MainMenu: //Long key mode
  93   4                                              gc_Task_Next=C_Task_Menu;
  94   4                                              return;
  95   4                                      break;  
  96   4                      }
  97   3      
  98   3                              if(tc_Confirm==1) //enter child dir or confirm selected item
  99   3                              {
 100   4                  /*  if(gc_MenuItem>4)      //Terry 20090518
 101   4                          {
 102   4                        gc_MenuItem=0;
 103   4                          }
 104   4                                      gc_LanguageSel=gc_MenuItem;
 105   4                                      gc_MenuHZK=LanguageTable[gc_MenuItem];
 106   4                              //      dbprintf("gc_MenuHZK=%bx\n",gc_MenuHZK);
 107   4                                      USER_LogFile_ReadWrite(1);
 108   4                                      gc_MenuItem=0;
 109   4                                      TFT_SetupMenu();
 110   4                                      return;
 111   4                              */
 112   4                                      gc_LanguageSel=gc_MenuItem;
 113   4                                      gc_MenuHZK=gc_LanguageSel;//LanguageTable[gc_MenuItem];
 114   4                              //      dbprintf("gc_MenuHZK=%bx\n",gc_MenuHZK);
 115   4                                      USER_LogFile_ReadWrite(1);
 116   4                                      gc_MenuItem=0;
C51 COMPILER V9.00   PLAYMENU                                                              07/10/2012 15:51:57 PAGE 3   

 117   4                                      //TFT_SetupMenu();
 118   4                                      Menu_Disp_Item_Other(SetupMenuTpye,gc_MenuItem,REFRESH_ALL);
 119   4                                      return;
 120   4                              }
 121   3                      }
 122   2                      gc_PhaseInx=0;          
 123   2                      Polling_TaskEvents();
 124   2                       IR_Service_Process_Menu_1(); 
 125   2                      if(gc_Task_Next==C_Task_PowerOff)
 126   2                      {
 127   3                              return;
 128   3                      }
 129   2              }       
 130   1      }
 131          
 132          void TFT_ShowContrastAdj(void)
 133          {
 134   1          data        U8 tc_Contrast[3];
 135   1          data        U8 i;
 136   1              xdata   U8 tc_DisplayContrast;
 137   1      
 138   1          tc_DisplayContrast=gc_Contrast;   
 139   1      
 140   1          tc_Contrast[0]=tc_DisplayContrast/100;
 141   1          tc_Contrast[1]=(tc_DisplayContrast%100)/10;
 142   1              tc_Contrast[2]=tc_DisplayContrast-tc_Contrast[0]*100-tc_Contrast[1]*10;
 143   1          for(i=0;i<3;i++)
 144   1                      {
 145   2              LCM_set_view(TFT_IconDispDir,VOLAdj_X_Pos+(VOLAdj_H_Size+2)*i-2,VOLAdj_Y_Pos,VOLAdj_H_Size,VOLAdj_
             -V_Size);
 146   2              LCD_DisplayIcon(VOLAdjID,tc_Contrast[i]);
 147   2                      }
 148   1              }       
 149          
 150          void ContrastMenuProcess()
 151          {
 152   1              bit     tc_Confirm=0;
 153   1              xdata U8 tc_Contrast;
 154   1      
 155   1              gc_PhaseInx = 0; 
 156   1      
 157   1              gc_Contrast_bak = gc_Contrast;
 158   1              tc_Contrast = gc_Contrast;
 159   1      
 160   1              Menu_Disp_Item_Other(ContrastTitleType,gc_MenuItem,REFRESH_ALL);
 161   1              TFT_ShowContrastAdj();
 162   1              while(1)
 163   1          {
 164   2                      if(gc_PhaseInx)
 165   2                      {
 166   3                      switch(gc_PhaseInx)
 167   3                      {
 168   4                          case C_PlayMenu:
 169   4                                              gc_refresh_type = REFRESH_ALL;
 170   4                                              tc_Confirm=1;
 171   4                          break;
 172   4      
 173   4                          case C_PlayNext:
 174   4                                              if(tc_Contrast == 0xFF)
 175   4                                              {
 176   5                                                      gc_Contrast = 0;
 177   5                                              }
C51 COMPILER V9.00   PLAYMENU                                                              07/10/2012 15:51:57 PAGE 4   

 178   4                                              else
 179   4                                              {
 180   5                                                      gc_Contrast++;
 181   5      }
 182   4                                              tc_Contrast = gc_Contrast;
 183   4                                              TFT_ShowContrastAdj();
 184   4                          break;
 185   4      
 186   4                          case C_PlayPrev:
 187   4                                              if(tc_Contrast == 0x00)
 188   4                                              {
 189   5                                                      gc_Contrast = 0xFF;
 190   5                                              }
 191   4                                              else
 192   4                                              {
 193   5                                                      gc_Contrast--;
 194   5                                              }
 195   4                                              tc_Contrast = gc_Contrast;
 196   4                                              TFT_ShowContrastAdj();
 197   4                          break;
 198   4      
 199   4                                      case C_MainMenu: //Long key mode
 200   4                                              gc_Task_Next=C_Task_Menu;
 201   4                                              gc_Contrast = gc_Contrast_bak;
 202   4                                              return;
 203   4                                      break;  
 204   4                      }
 205   3                              if(tc_Confirm==1)
 206   3                              {
 207   4                                      USER_LogFile_ReadWrite(1);
 208   4                                      gc_MenuItem=1;
 209   4                                      Menu_Disp_Item_Other(SetupMenuTpye,gc_MenuItem,REFRESH_ALL);
 210   4                                      return;
 211   4                              }
 212   3                      }
 213   2                      gc_PhaseInx=0;          
 214   2                      Polling_TaskEvents();
 215   2              IR_Service_Process_Menu_1();
 216   2                      if(gc_Task_Next==C_Task_PowerOff)
 217   2                      {
 218   3                              return;
 219   3                      }
 220   2              }
 221   1      }
 222          void count_free_cluster_fat16(U8 xdata * p, U8 size1, U8 size2)
 223          {
 224   1              gdw_TotalFreeClusNumber += count_free_cluster_in_fat16_sector(p, size1);
 225   1              gdw_TotalFreeClusNumber += count_free_cluster_in_fat16_sector(p+size1*2, size2);
 226   1      }
 227          
 228          //! Search or count free clusters in FAT.
 229          /*!
 230           * \param tc_SearchMode 
 231           *                      - 0 is to search free clusters.
 232           *                      - 1 is to count number of free clusters.
 233           * \return Return 0 on success. Otherwise a nonzero number is returned.
 234           */
 235          U8 DOS_SearchFreeCluster(U8 tc_SearchMode)
 236          {
 237   1              U32 tdw_FreeClusterNum;
 238   1              U32 tdw_FAT_sect_address; //Ching 081111
 239   1              U32     tdw_last_FAT_sector;
C51 COMPILER V9.00   PLAYMENU                                                              07/10/2012 15:51:57 PAGE 5   

 240   1              U8      tc_loop1_counter;
 241   1              U8      tc_loop2_counter;
 242   1              U8      tc_temp;
 243   1              U16     tw_size;
 244   1              U32 tdw_end;
 245   1              U8 xdata * p_buf;
 246   1              U8      tc_local_cluster_count_minus_1;
 247   1              U8      tc_log2_local_cluster_count;
 248   1              U8      tc_is_fat16 = (gc_DOS_FileSystemType == 1);
 249   1              U8  tc_status; //Ching 081111
 250   1              U32 tdw_DOS_SectorPerFAT=0; //Ching 081111
 251   1      
 252   1              if (tc_SearchMode==0 && gc_ClusBufValidSize >= 8)
 253   1                              return 0;
 254   1              // if cluster buffer not full, search free clusters first before counting the number.
 255   1              if (gc_ClusBufValidSize < 8 && gdw_FreeClusterNum[0]<(gdw_DOS_FatMaxCluster-1))
 256   1                              tc_SearchMode = 0;
 257   1              tdw_FreeClusterNum = gdw_FreeClusterNum[tc_SearchMode]+1;
 258   1              gb_ReadWriteDataArea = 1; // set read target for DOS_Read_LogicSector().
 259   1              if (gc_DOS_FileSystemType == 1) // FAT16
 260   1              {
 261   2                      tc_local_cluster_count_minus_1 = 256-1;
 262   2                      tc_log2_local_cluster_count = 8;
 263   2              }
 264   1              else
 265   1              {
 266   2                      tc_local_cluster_count_minus_1 = 128-1;
 267   2                      tc_log2_local_cluster_count = 7;
 268   2              }
 269   1      
 270   1              if(gdw_DOS_Fat2Addr!=gdw_DOS_Fat1Addr) tdw_DOS_SectorPerFAT=gdw_DOS_SectorPerFAT; //Ching 081111
 271   1      
 272   1              tdw_FAT_sect_address = gdw_DOS_Fat1Addr + (tdw_FreeClusterNum>>tc_log2_local_cluster_count); // tdw_FreeC
             -lusterNum must be a multiple of 256/128.
 273   1              tdw_last_FAT_sector = gdw_DOS_Fat1Addr + ((gdw_DOS_FatMaxCluster+tc_local_cluster_count_minus_1)>>tc_log2
             -_local_cluster_count) - 1;
 274   1              tdw_end = gdw_DOS_FatMaxCluster-((WORD)tc_local_cluster_count_minus_1+1);
 275   1              while (tdw_FreeClusterNum < gdw_DOS_FatMaxCluster)
 276   1              {
 277   2                      tc_status = DOS_Read_LogicSector(tdw_FAT_sect_address, 1);
 278   2                      if(tc_status) DOS_Read_LogicSector(tdw_FAT_sect_address+tdw_DOS_SectorPerFAT, 1); //Ching 081111
 279   2      
 280   2                      tc_temp  = ((UBYTE)tdw_FreeClusterNum) & tc_local_cluster_count_minus_1; // get the index of cluster ent
             -ry to search yet.
 281   2      
 282   2                      if (tc_temp != 0) // If not start from the beginning of sector buffer.
 283   2                      { // to deal with the case that doesn't search from gc_UserDataBuf[0]
 284   3                              if (tc_is_fat16)
 285   3                                      p_buf = gc_UserDataBuf + (tc_temp*2);
 286   3                              else
 287   3                                      p_buf = gc_UserDataBuf + (tc_temp*4);
 288   3      
 289   3      
 290   3                              if (tdw_FAT_sect_address == tdw_last_FAT_sector)
 291   3                                      tw_size = (WORD)(gdw_DOS_FatMaxCluster - tdw_FreeClusterNum);
 292   3                              else
 293   3                                      tw_size = (tc_local_cluster_count_minus_1+1)-tc_temp;
 294   3                      }
 295   2                      else
 296   2                      {
 297   3                              p_buf = gc_UserDataBuf;
 298   3                              if (tdw_FAT_sect_address == tdw_last_FAT_sector)//(JC)tdw_FreeClusterNum is in the last FAT sector, as 
C51 COMPILER V9.00   PLAYMENU                                                              07/10/2012 15:51:57 PAGE 6   

             -the same sector with gdw_DOS_FatMaxCluster
 299   3                                              tw_size = (WORD)(gdw_DOS_FatMaxCluster - tdw_FreeClusterNum);
 300   3                              else
 301   3                                              tw_size = (tc_local_cluster_count_minus_1+1);
 302   3                      }
 303   2                      if (tw_size > 128)
 304   2                      {
 305   3                              tc_loop1_counter = 128;
 306   3                              tc_loop2_counter = tw_size - 128;
 307   3                      }
 308   2                      else
 309   2                      {
 310   3                              tc_loop1_counter = (UBYTE)tw_size;
 311   3                              tc_loop2_counter = 0;
 312   3                      }
 313   2      
 314   2                      if (tc_SearchMode == 0) // search free clusters
 315   2                      {
 316   3                              if (tc_is_fat16) // FAT16
 317   3                              {
 318   4                                      if (free_clusters_in_sector(p_buf, tc_loop1_counter, 2, tdw_FreeClusterNum))
 319   4                                      {
 320   5                                              return 0;
 321   5                                      }
 322   4                                      tdw_FreeClusterNum += tc_loop1_counter;
 323   4                                      if (free_clusters_in_sector(p_buf+tc_loop1_counter*2, tc_loop2_counter, 2, tdw_FreeClusterNum))
 324   4                                      {
 325   5                                              return 0;
 326   5                                      }
 327   4                                      tdw_FreeClusterNum += tc_loop2_counter;
 328   4                              }
 329   3                              else // FAT32
 330   3                              {
 331   4                                      if (free_clusters_in_sector(p_buf, tc_loop1_counter, 4, tdw_FreeClusterNum))
 332   4                                      {
 333   5                                              return 0;
 334   5                                      }
 335   4                                      tdw_FreeClusterNum += tc_loop1_counter;
 336   4                              }
 337   3                      }
 338   2                      else // count free clusters
 339   2                      {
 340   3                              tdw_FreeClusterNum += tw_size;
 341   3                              if (tc_is_fat16) // FAT16
 342   3                              {
 343   4                                      count_free_cluster_fat16(p_buf, tc_loop1_counter, tc_loop2_counter);
 344   4                              }
 345   3                              else
 346   3                              {
 347   4                                      gdw_TotalFreeClusNumber += count_free_cluster_in_fat32_sector(p_buf, tc_loop1_counter);
 348   4                              }
 349   3                      }
 350   2                      if (((UBYTE)tdw_FAT_sect_address & 0x0f) == 0) // return after every 16 sector analysis
 351   2                              break;
 352   2                      tdw_FAT_sect_address++;
 353   2              }
 354   1              gdw_FreeClusterNum[tc_SearchMode] = tdw_FreeClusterNum-1;
 355   1              return 0;
 356   1      }
 357          
 358          UBYTE fat16_free_cluster_offset(UBYTE xdata * p, UBYTE size);
 359          UBYTE fat32_free_cluster_offset(UBYTE xdata * p, UBYTE size);
C51 COMPILER V9.00   PLAYMENU                                                              07/10/2012 15:51:57 PAGE 7   

 360          
 361          //! \internal
 362          /*! \internal
 363           *      \param  p                                       Buffer for FAT.
 364           *      \param  size                            Should be equal to or less than 128.
 365           *      \param  cluster_entry_size      2 for FAT16 and 4 for FAT32.
 366           *      \param  tdw_FreeClusterNum      The cluster entry number at the address p.
 367           *      \return 1 if cluster buffer full. 0 otherwise.
 368           */
 369          // All size and index variables in this function are in unit of cluster_entry_size.
 370          U8 free_clusters_in_sector(U8 xdata * p, U8 size, U8 cluster_entry_size, U32 tdw_FreeClusterNum)
 371          {
 372   1              U8  search_index;
 373   1              search_index = 0;
 374   1      
 375   1              while(1)
 376   1              {
 377   2                      if (cluster_entry_size == 2)
 378   2                      {
 379   3                              search_index += fat16_free_cluster_offset(p+search_index*cluster_entry_size, size-search_index);
 380   3                      }
 381   2                      else
 382   2                      {
 383   3                              search_index += fat32_free_cluster_offset(p+search_index*cluster_entry_size, size-search_index);
 384   3                      }
 385   2                      if (search_index < size)
 386   2                      {
 387   3                              UBYTE uTemp, i;
 388   3                              //dbprintf("%lx %bx\n", tdw_FreeClusterNum, search_index);
 389   3                              i = gc_ClusBufValidSize;
 390   3                              uTemp = (gc_ClusBufValidPoint+i) & 0x07; // (gc_ClusBufValidPoint+gc_ClusBufValidSize)%8        
 391   3                              gdw_ClusterBuffer[uTemp] = tdw_FreeClusterNum + search_index;
 392   3                              gdw_FreeClusterNum[0]    = tdw_FreeClusterNum + search_index;
 393   3                              i++;
 394   3                              gc_ClusBufValidSize = i;
 395   3                              if (i==8)
 396   3                              {
 397   4                                      return 1;
 398   4                              }
 399   3                              search_index++;
 400   3                              continue;
 401   3                      }
 402   2                      else
 403   2                      {
 404   3                              // end is reached. searched_size should equals to size
 405   3                              return 0;
 406   3                      }
 407   2              }//while(1)
 408   1              return 0;
 409   1      }
 410          
 411          
 412          
 413          
 414          void new_DOS_SearchFreeCluster_loop(void) 
 415          { 
 416   1              while(gdw_FreeClusterNum[1] < (gdw_DOS_FatMaxCluster - 1)) 
 417   1              {         
 418   2                      DOS_SearchFreeCluster(1); 
 419   2              } 
 420   1      }
 421          
C51 COMPILER V9.00   PLAYMENU                                                              07/10/2012 15:51:57 PAGE 8   

 422          
 423          U32 User_GetFreeMemorySize_REC()
 424          {
 425   1          new_DOS_SearchFreeCluster_loop();
 426   1              return(gdw_TotalFreeClusNumber*gc_DOS_SectorPerCluster);
 427   1      }
 428          
 429          
 430          void Menu_GetDiskCap()
 431          {
 432   1          U32 tdw_TotalFreeSectorNumber;
 433   1              U8  tc_clock_mode_backup;  //20090526 chiayen add
 434   1      
 435   1              tc_clock_mode_backup=gc_clock_mode;
 436   1              set_clock_mode(CLOCK_MODE_MJPEG);  //20090526 chiayen add
 437   1      
 438   1              if(gc_CurrentCard==2)
 439   1              {
 440   2                      gdw_CARD_TotalSizeMB = (SD_Capacity.LW>>11);
 441   2                      gdw_CARD_TotalSizeMB=gdw_CARD_TotalSizeMB-1-gdw_CARD_TotalSizeMB/512;           
 442   2              }
 443   1              else if(gc_CurrentCard==0)
 444   1              {
 445   2                      // maxliao-20090602
 446   2                      if(gbt_Support_Dummy_Capacity)
 447   2                      {
 448   3                              gdw_CARD_TotalSizeMB = Dummy_Capacity.LW >> 11;
 449   3                      }
 450   2                      else
 451   2                      {
 452   3                              gdw_CARD_TotalSizeMB = Capacity.LW >> 11;
 453   3                      }
 454   2                      gdw_CARD_TotalSizeMB=gdw_CARD_TotalSizeMB-1-gdw_CARD_TotalSizeMB/512;
 455   2              }
 456   1              else if(gc_CurrentCard==5)
 457   1              {
 458   2                      gdw_CARD_TotalSizeMB=gdw_CARD_TotalSizeMB;      
 459   2              }
 460   1              
 461   1              tdw_TotalFreeSectorNumber = User_GetFreeMemorySize_REC();
 462   1              gdw_Dos_FreeMemorySizeMB = tdw_TotalFreeSectorNumber >> 11;
 463   1              set_clock_mode(tc_clock_mode_backup);  //20090526 chiayen add
 464   1      }
 465          
 466          
 467          void SetupMenuProcess()
 468          {
 469   1              bit     tc_Confirm=0;
 470   1              U8  tc_clock_mode_backup;  //20090526 chiayen add
 471   1              tc_clock_mode_backup=gc_clock_mode;
 472   1      
 473   1              gc_PhaseInx = 0;
 474   1              gc_MenuItem=0;
 475   1              //TFT_SetupMenu();
 476   1              Menu_Disp_Item_Other(SetupMenuTpye,gc_MenuItem,REFRESH_ALL);
 477   1      
 478   1      #ifdef Contrast_Set
 479   1              while(1)
 480   1          {
 481   2                      if(gc_PhaseInx)
 482   2                      {
 483   3                      switch(gc_PhaseInx)
C51 COMPILER V9.00   PLAYMENU                                                              07/10/2012 15:51:57 PAGE 9   

 484   3                      {
 485   4                          case C_PlayMenu:
 486   4                                              gc_refresh_type = REFRESH_ALL;
 487   4                                              tc_Confirm=1;
 488   4                          break;
 489   4      
 490   4                          case C_PlayNext:
 491   4                                              gc_refresh_type = REFRESH_NEXT;
 492   4                                              if(gc_MenuItem==4)
 493   4                                              {
 494   5                                                      gc_MenuItem=0;
 495   5                                              }
 496   4                                              else
 497   4                                              {
 498   5                                                      gc_MenuItem++;
 499   5                                              }
 500   4                                              //TFT_SetupMenu();
 501   4                                              Menu_Disp_Item_Other(SetupMenuTpye,gc_MenuItem,gc_refresh_type);
 502   4                          break;
 503   4      
 504   4                          case C_PlayPrev:
 505   4                                              gc_refresh_type = REFRESH_PREV;
 506   4                                              if(gc_MenuItem==0)
 507   4                                              {
 508   5                                                      gc_MenuItem=4;
 509   5                                              }
 510   4                                              else
 511   4                                              {
 512   5                                                      gc_MenuItem--;
 513   5                                              }
 514   4                                              //TFT_SetupMenu();
 515   4                                              Menu_Disp_Item_Other(SetupMenuTpye,gc_MenuItem,gc_refresh_type);
 516   4                          break;
 517   4      
 518   4                                      case C_MainMenu: //Long key mode
 519   4                                              gc_Task_Next=C_Task_Menu;
 520   4                                      break;
 521   4                      }
 522   3      
 523   3                              if(tc_Confirm==1) //enter child dir or confirm selected item
 524   3                              {
 525   4                                      gc_PhaseInx=0;
 526   4                                      if(gc_MenuItem==0)  //language setting
 527   4                                      {
 528   5                                              LanguageMenuProcess();
 529   5                                              gc_MenuItem=0;
 530   5                                              tc_Confirm=0;
 531   5                                      }
 532   4                                      else if(gc_MenuItem==1)
 533   4                                      {       
 534   5                                              ContrastMenuProcess();
 535   5                                              gc_MenuItem=1;
 536   5                                              tc_Confirm=0;
 537   5                                      }
 538   4                                      else if(gc_MenuItem==2)  //memory info
 539   4                                      {
 540   5                                      //      TFT_MemoryInfo();       // Show Wait... 
 541   5                                      //      TFT_ShowMediaIcon_M();
 542   5                                              set_clock_mode(CLOCK_MODE_MJPEG);
 543   5                                              Menu_GetDiskCap();
 544   5                                              set_clock_mode(tc_clock_mode_backup);  //20090526 chiayen add
 545   5                                              TFT_MemoryInfo();                 
C51 COMPILER V9.00   PLAYMENU                                                              07/10/2012 15:51:57 PAGE 10  

 546   5                                              TFT_ShowMediaIcon_M();
 547   5      
 548   5                                              gc_ShowMenuTimer=150;
 549   5                                              while((gc_ShowMenuTimer!=0))
 550   5                                              {
 551   6                                                      Polling_TaskEvents();
 552   6                              IR_Service_Process_Menu_1(); 
 553   6                                                      if(gc_PhaseInx!=0)
 554   6                                                      {
 555   7                                                              break;
 556   7                                                      }
 557   6                                              }
 558   5                                              gc_MenuItem=2;
 559   5                                              tc_Confirm=0;
 560   5                                              //TFT_SetupMenu();
 561   5                                              Menu_Disp_Item_Other(SetupMenuTpye,gc_MenuItem,gc_refresh_type);
 562   5                                              gc_ShowMenuTimer=0;
 563   5                                      }
 564   4                                      else if(gc_MenuItem==3)  //firmware version
 565   4                                      {
 566   5                                              //TFT_FWVERSION();
 567   5                                          Menu_Disp_Item_Other(FWVerTitleType,0,REFRESH_ALL);
 568   5                                              gc_ShowMenuTimer=150;
 569   5                                              while((gc_ShowMenuTimer!=0))
 570   5                                              {
 571   6                                                      Polling_TaskEvents();
 572   6                              IR_Service_Process_Menu_1(); 
 573   6                                                      if(gc_PhaseInx!=0)
 574   6                                                      {
 575   7                                                              break;
 576   7                                                      }
 577   6                                              }
 578   5                                              gc_MenuItem=3;
 579   5                                              //TFT_SetupMenu();
 580   5                                              Menu_Disp_Item_Other(SetupMenuTpye,gc_MenuItem,gc_refresh_type);
 581   5                                              tc_Confirm=0;
 582   5                                              gc_ShowMenuTimer=0;
 583   5                                      }
 584   4                                      else if(gc_MenuItem==4)  //EXIT
 585   4                                      {
 586   5                                              gc_Task_Next=C_Task_Menu;
 587   5                                      }
 588   4                              }
 589   3                      }
 590   2                      gc_PhaseInx=0;
 591   2                      gc_CurrentCard_backup=gc_CurrentCard;           
 592   2                      Polling_TaskEvents();
 593   2              IR_Service_Process_Menu_1();
 594   2      
 595   2                      Play_SourceDetect_Process_Mainmenu(); 
 596   2      
 597   2              if(gc_Task_Current!=gc_Task_Next)
 598   2              {
 599   3                              gc_Task_Current=gc_Task_Next;
 600   3                  break;  
 601   3              }
 602   2              }
 603   1      #else
                      while(1)
                  {
                              if(gc_PhaseInx)
                              {
C51 COMPILER V9.00   PLAYMENU                                                              07/10/2012 15:51:57 PAGE 11  

                              switch(gc_PhaseInx)
                              {
                                  case C_PlayMenu:
                                                      gc_refresh_type = REFRESH_ALL;
                                                      tc_Confirm=1;
                                  break;
              
                                  case C_PlayNext:
                                                      gc_refresh_type = REFRESH_NEXT;
                                                      if(gc_MenuItem==3)
                                                      {
                                                              gc_MenuItem=0;
                                                      }
                                                      else
                                                      {
                                                              gc_MenuItem++;
                                                      }
                                                      //TFT_SetupMenu();
                                                      Menu_Disp_Item_Other(SetupMenuTpye,gc_MenuItem,gc_refresh_type);
                                  break;
              
                                  case C_PlayPrev:
                                                      gc_refresh_type = REFRESH_PREV;
                                                      if(gc_MenuItem==0)
                                                      {
                                                              gc_MenuItem=3;
                                                      }
                                                      else
                                                      {
                                                              gc_MenuItem--;
                                                      }
                                                      //TFT_SetupMenu();
                                                      Menu_Disp_Item_Other(SetupMenuTpye,gc_MenuItem,gc_refresh_type);
                                  break;
              
                                              case C_MainMenu: //Long key mode
                                                      gc_Task_Next=C_Task_Menu;
                                              break;
                              }
              
                                      if(tc_Confirm==1) //enter child dir or confirm selected item
                                      {
                                              gc_PhaseInx=0;
                                              if(gc_MenuItem==0)  //language setting
                                              {
                                                      LanguageMenuProcess();
                                                      gc_MenuItem=0;
                                                      tc_Confirm=0;
                                              }
                                              else if(gc_MenuItem==1)  //memory info
                                              {
                                              //      TFT_MemoryInfo();       // Show Wait... 
                                              //      TFT_ShowMediaIcon_M();
                                                      set_clock_mode(CLOCK_MODE_MJPEG);
                                                      Menu_GetDiskCap();
                                                      set_clock_mode(tc_clock_mode_backup);  //20090526 chiayen add
                                                      TFT_MemoryInfo();                 
                                                      TFT_ShowMediaIcon_M();
              
                                                      gc_ShowMenuTimer=150;
                                                      while((gc_ShowMenuTimer!=0))
                                                      {
C51 COMPILER V9.00   PLAYMENU                                                              07/10/2012 15:51:57 PAGE 12  

                                                              Polling_TaskEvents();
                                      IR_Service_Process_Menu_1(); 
                                                              if(gc_PhaseInx!=0)
                                                              {
                                                                      break;
                                                              }
                                                      }
                                                      gc_MenuItem=1;
                                                      tc_Confirm=0;
                                                      //TFT_SetupMenu();
                                                      Menu_Disp_Item_Other(SetupMenuTpye,gc_MenuItem,gc_refresh_type);
                                                      gc_ShowMenuTimer=0;
                                              }
                                              else if(gc_MenuItem==2)  //firmware version
                                              {
                                                      //TFT_FWVERSION();
                                                  Menu_Disp_Item_Other(FWVerTitleType,0,REFRESH_ALL);
                                                      gc_ShowMenuTimer=150;
                                                      while((gc_ShowMenuTimer!=0))
                                                      {
                                                              Polling_TaskEvents();
                                      IR_Service_Process_Menu_1(); 
                                                              if(gc_PhaseInx!=0)
                                                              {
                                                                      break;
                                                              }
                                                      }
                                                      gc_MenuItem=2;
                                                      //TFT_SetupMenu();
                                                      Menu_Disp_Item_Other(SetupMenuTpye,gc_MenuItem,gc_refresh_type);
                                                      tc_Confirm=0;
                                                      gc_ShowMenuTimer=0;
                                              }
                                              else if(gc_MenuItem==3)  //EXIT
                                              {
                                                      gc_Task_Next=C_Task_Menu;
                                              }
                                      }
                              }
                              gc_PhaseInx=0;
                              gc_CurrentCard_backup=gc_CurrentCard;           
                              Polling_TaskEvents();
                      IR_Service_Process_Menu_1();
              
                              Play_SourceDetect_Process_Mainmenu(); 
              
                      if(gc_Task_Current!=gc_Task_Next)
                      {
                                      gc_Task_Current=gc_Task_Next;
                          break;  
                      }
                      }       
              #endif  
 723   1      }
 724          
 725          
 726          void Play_SDFlash_DosInit_Mainmenu()
 727          {
 728   1              gb_FindFlag = 0;
 729   1              gc_PhaseInx=0;
 730   1              gw_init_needed=0xFFFF;
 731   1              if (DOS_Initialize())
C51 COMPILER V9.00   PLAYMENU                                                              07/10/2012 15:51:57 PAGE 13  

 732   1              {
 733   2              }
 734   1              else
 735   1              {
 736   2                      gc_ShowTimer=0;  //20090331
 737   2                      gc_DispWallpaper=1;
 738   2                      gc_TuneVolFreqStatus=0;
 739   2                      gb_FindFlag = 0;
 740   2                      gc_PhaseInx=0;
 741   2                      gw_init_needed=0xFFFF;
 742   2      
 743   2                      gc_TaskMode_BkUp=C_Task_Play;//(JC)I0304 for back to rite TASK from Dir-list
 744   2                      gc_Task_Next=C_Task_Play;
 745   2      
 746   2                      gs_System_State.c_FileHandle=0;
 747   2                      gc_MenuItemCount=0;     
 748   2                      gs_File_FCB[0].dw_FDB_StartCluster = gdw_DOS_RootDirClus;           
 749   2                      DOS_Search_File(C_File_All|C_Cnt_FileNo, C_MusicFileType, C_CmpExtName|C_Next);//(JC)count music file no
             -. in root
 750   2                      gc_PhaseInx=0;
 751   2                      gb_TFT_refresh=1;
 752   2                      gc_DispWallpaper=0xFF;
 753   2              }
 754   1      }
 755          
 756          
 757          void Play_SourceDetect_Process_Mainmenu()
 758          {
 759   1              gb_SD_Exist_pre=gb_SD_Exist;
 760   1              if(!SD_Detect)  //SD exist
 761   1          {
 762   2              gb_SD_Exist=1;
 763   2          }
 764   1              else
 765   1              {
 766   2                      gb_SD_Exist=0;
 767   2                      gb_SDNoFileflag=0;
 768   2              }
 769   1      #if 1//(USB_HOST==1)
 770   1              gb_Host_Exist_pre=gb_Host_Exist;
 771   1              if(!Host_DetectDevice())
 772   1              {
 773   2                      gb_Host_Exist=1;        //host_exist            
 774   2              }
 775   1              else
 776   1              {
 777   2                      gb_Host_Exist=0;
 778   2                      gc_HostNoFileflag=0;
 779   2              }
 780   1      #endif
 781   1      
 782   1              if((gc_CurrentCard==0) && ((gb_Host_Exist_pre!=gb_Host_Exist)||(gb_SD_Exist_pre!=gb_SD_Exist)))
 783   1              {
 784   2                      if((gb_Host_Exist_pre!=gb_Host_Exist) && (gb_Host_Exist==1))
 785   2                      {
 786   3                              gc_CurrentCard=5;
 787   3                      }
 788   2                      else if((gb_SD_Exist_pre!=gb_SD_Exist) && (gb_SD_Exist==1))
 789   2                      {
 790   3                              gc_CurrentCard=2;       
 791   3                      }
 792   2                      else
C51 COMPILER V9.00   PLAYMENU                                                              07/10/2012 15:51:57 PAGE 14  

 793   2                      {
 794   3                              gc_CurrentCard=0;       
 795   3                      }
 796   2              }
 797   1              else
 798   1              {
 799   2                      if(gc_CurrentCard==2)
 800   2                      {
 801   3                              if(gc_Dosinitfail==0)  //20090803 chiayen add
 802   3                              {
 803   4                                      if((gb_Host_Exist_pre!=gb_Host_Exist) && (gb_Host_Exist==1))
 804   4                                      {
 805   5                                              gc_CurrentCard=5;
 806   5                                      }
 807   4                                      else if(((gb_SD_Exist==0) || (gb_SDNoFileflag==1)) && (gb_Host_Exist==1))
 808   4                                      {
 809   5                                              gc_CurrentCard=5;
 810   5                                              if(gc_HostNoFileflag==1)
 811   5                                              {
 812   6                                                      gc_CurrentCard=0;       
 813   6                                              }
 814   5                                      }
 815   4                                      else if((gb_SD_Exist==0) || (gb_SDNoFileflag==1))
 816   4                                      {
 817   5                                              gc_CurrentCard=0;       
 818   5                                      }
 819   4                              }
 820   3                              else //20090803 chiayen add for SD Dos initial fail
 821   3                              {
 822   4                                      if((gb_Host_Exist==1) && (gc_HostNoFileflag==0))
 823   4                                      {
 824   5                                              gc_CurrentCard=5;
 825   5                                      }
 826   4                                      else
 827   4                                      {
 828   5                                              gc_CurrentCard=0;
 829   5                                      }
 830   4                                      gc_Dosinitfail=0;                               
 831   4                              }
 832   3                      }
 833   2                      #if 1//(USB_HOST==1)
 834   2                      if(gc_CurrentCard==5)
 835   2                      {
 836   3                              if(gc_Dosinitfail==0)  //20090803 chiayen add
 837   3                              {
 838   4                                      if((gb_SD_Exist_pre!=gb_SD_Exist) && (gb_SD_Exist==1))
 839   4                                      {
 840   5                                              gc_CurrentCard=2;
 841   5                                      }
 842   4                                      else if(((gb_Host_Exist==0) || (gc_HostNoFileflag==1)) && (gb_SD_Exist==1))
 843   4                                      {
 844   5                                              gc_CurrentCard=2;
 845   5                                              if(gb_SDNoFileflag==1)
 846   5                                              {
 847   6                                                      gc_CurrentCard=0;       
 848   6                                              }
 849   5                                      }
 850   4                                      else if((gb_Host_Exist==0) || (gc_HostNoFileflag==1))
 851   4                                      {
 852   5                                              gc_CurrentCard=0;       
 853   5                                      }
 854   4                              }
C51 COMPILER V9.00   PLAYMENU                                                              07/10/2012 15:51:57 PAGE 15  

 855   3                              else //host dos initial fail  //20090803 chiayen add
 856   3                              {
 857   4                                      if((gb_SD_Exist==1) && (gb_SDNoFileflag==0))
 858   4                                      {
 859   5                                              gc_CurrentCard=2;
 860   5                                      }
 861   4                                      else
 862   4                                      {
 863   5                                              gc_CurrentCard=0;
 864   5                                      }
 865   4                                      gc_Dosinitfail=0;
 866   4                              }
 867   3                      }
 868   2                      #endif
 869   2              }
 870   1      
 871   1      
 872   1          if(gc_CurrentCard_backup!=gc_CurrentCard)
 873   1          {
 874   2                      gc_CurrentCard_backup=gc_CurrentCard;
 875   2                      set_clock_mode(CLOCK_MODE_MP3); //20090803 chiayen add for media change
 876   2      
 877   2                      if(gc_CurrentCard==2)
 878   2              {           
 879   3                  if(SD_Identification_Flow())
 880   3                  {
 881   4                      gc_CardExist |=0x02;
 882   4                  }
 883   3                  else if((gb_Host_Exist==1) && (gc_HostNoFileflag==0)) //20090730 chiayen modify
 884   3                  {
 885   4                                      DEVICE_REG[0x00]= 0x01;  //20090730 chiayen add
 886   4                                      if(!Host_Initial())
 887   4                                      {
 888   5                                              gc_CurrentCard = CURRENT_MEDIA_HOST;
 889   5                                              gb_FindFlag = 0;
 890   5                      }
 891   4                          else
 892   4                          {
 893   5                                              gc_CurrentCard=0;
 894   5                                              gc_CardExist &=0xFD;
 895   5                                              gb_FindFlag = 0;
 896   5                                              InitFlash();                                
 897   5                          }
 898   4                      }
 899   3                              else 
 900   3                      {
 901   4                                      DEVICE_REG[0x00]= 0x01;  //20090730 chiayen add
 902   4                                      gc_CurrentCard=0;
 903   4                                      gc_CardExist &=0xFD;
 904   4                                      gb_FindFlag = 0;
 905   4                                      InitFlash();
 906   4                              }
 907   3                              Play_SDFlash_DosInit_Mainmenu();
 908   3              }
 909   2                      else if(gc_CurrentCard==CURRENT_MEDIA_HOST)
 910   2                      {
 911   3                              DEVICE_REG[0x00]= 0x01;  //20090803 chiayen add                 
 912   3                              if(!Host_Initial())
 913   3                              {
 914   4                                      gc_CurrentCard = CURRENT_MEDIA_HOST;
 915   4                                      gb_FindFlag = 0;
 916   4                              }
C51 COMPILER V9.00   PLAYMENU                                                              07/10/2012 15:51:57 PAGE 16  

 917   3                              else if((gb_SD_Exist==1) && (gb_SDNoFileflag==0)) //20090730 chiayen add
 918   3                              {
 919   4                          if(SD_Identification_Flow())
 920   4                          { 
 921   5                              gc_CardExist |=0x02;
 922   5                                              gc_CurrentCard=2;      
 923   5                                      }
 924   4                                      else
 925   4                                      {
 926   5                                              DEVICE_REG[0x00]= 0x01;
 927   5                                              gc_CurrentCard=0;
 928   5                                              gc_CardExist &=0xFD;
 929   5                                              gb_FindFlag = 0;
 930   5                                              InitFlash();
 931   5                                      }
 932   4                              }
 933   3                              else 
 934   3                      {
 935   4                                      DEVICE_REG[0x00]= 0x01;
 936   4                                      gc_CurrentCard=0;
 937   4                                      gb_FindFlag = 0;
 938   4                                      InitFlash();
 939   4                              }
 940   3                              Play_SDFlash_DosInit_Mainmenu();
 941   3                      }
 942   2                      else if(gc_CurrentCard==0)
 943   2              {
 944   3                              DEVICE_REG[0x00]= 0x01;
 945   3                              gc_CardExist &=0xFD;
 946   3                              InitFlash();
 947   3                              Play_SDFlash_DosInit_Mainmenu();
 948   3                      }
 949   2      
 950   2                      #if 0
                              if(gc_CurrentCard==2)
                      {           
                          if(SD_Identification_Flow())
                          {
                              gc_CardExist |=0x02;
                                              Play_SDFlash_DosInit_Mainmenu();      
                          }
                          else
                          {
                                              XBYTE[0xB400]= 0x01;
                                              gc_CurrentCard=0;
                                              gc_CardExist &=0xFD;
                                              gb_FindFlag = 0;
                                              InitFlash();
                                              Play_SDFlash_DosInit_Mainmenu();                                            
                          }
                      }
                      else if(gc_CurrentCard==0)
                      {
                                      XBYTE[0xB400]= 0x01;
                                      gc_CardExist &=0xFD;
                                      InitFlash();
                                      Play_SDFlash_DosInit_Mainmenu();
                      }
                              else if(gc_CurrentCard==CURRENT_MEDIA_HOST)
                              {
                                      if(!Host_Initial())
                                      {
C51 COMPILER V9.00   PLAYMENU                                                              07/10/2012 15:51:57 PAGE 17  

                                              gc_CurrentCard = CURRENT_MEDIA_HOST;
                                              gb_FindFlag = 0;
                                      }
                                      else
                                      {
                                              XBYTE[0xB400]= 0x01;
                                              gc_CurrentCard=0;
                                              gb_FindFlag = 0;
                                              InitFlash();
                                              gc_CurrentCard=0;
                                      }
                                      Play_SDFlash_DosInit_Mainmenu();
                              }
                              #endif
 993   2          }
 994   1      }
 995          
 996          
 997          void MainMenuProcess()
 998          {
 999   1              bit     tc_Confirm=0;
1000   1      
1001   1              gc_PhaseInx = 0;
1002   1              gc_MenuItem=gc_MenuItemCount;
1003   1      
1004   1              while(1)
1005   1          {
1006   2                      if(gc_ShowMenuTimer==0)
1007   2                      {
1008   3                              gc_ShowMenuTimer=10;
1009   3                              TFT_ShowMenu();
1010   3                      }
1011   2      
1012   2                      if(gc_PhaseInx)
1013   2                      {
1014   3                      switch(gc_PhaseInx)
1015   3                      {
1016   4                          case C_PlayMenu:
1017   4                                              tc_Confirm=1;
1018   4                          break;
1019   4              
1020   4                          case C_PlayNext:
1021   4                                              gc_ShowMenuTimer=0;
1022   4                                              if(gc_MenuItem==3)
1023   4                                              {
1024   5                                                      gc_MenuItem=0;
1025   5                                              }
1026   4                                              else
1027   4                                              {
1028   5                                                      gc_MenuItem++;
1029   5                                              }
1030   4                          break;
1031   4              
1032   4                          case C_PlayPrev:
1033   4                                              gc_ShowMenuTimer=0;
1034   4                                              if(gc_MenuItem==0)
1035   4                                              {
1036   5                                                      gc_MenuItem=3;
1037   5                                              }
1038   4                                              else
1039   4                                              {
1040   5                                                      gc_MenuItem--;
C51 COMPILER V9.00   PLAYMENU                                                              07/10/2012 15:51:57 PAGE 18  

1041   5                                              }
1042   4                          break;      
1043   4      
1044   4                          case C_PowerOff:
1045   4                                              gc_Task_Next=C_Task_PowerOff;                                           
1046   4                          break;      
1047   4                      }
1048   3      
1049   3                              if(tc_Confirm==1) //enter child dir or confirm selected item
1050   3                              {
1051   4                                      gc_MenuItemCount=gc_MenuItem;
1052   4                                      if(gc_MenuItem==0)
1053   4                                      {
1054   5                                              gc_ShowTimer=0;  //20090331
1055   5                                              gc_DispWallpaper=1;
1056   5                                              gc_TuneVolFreqStatus=0;
1057   5                                              gb_FindFlag = 0;
1058   5                                              gc_PhaseInx=0;
1059   5                                              gw_init_needed=0xFFFF;
1060   5      
1061   5                                              gc_TaskMode_BkUp=C_Task_Play;//(JC)I0304 for back to rite TASK from Dir-list
1062   5                                              gc_Task_Next=C_Task_Play;
1063   5                                      }
1064   4                                      else if(gc_MenuItem==1)
1065   4                                      {
1066   5                                                      dbprintf("*C_Task_Mjpeg*\n");
1067   5                                                      gb_FindFlag = 0;  //20090331
1068   5                                                      gw_FileIndex[2]=0;
1069   5                                                      gs_str_scroll_state.c_str_1st_char=0;
1070   5                                              gs_str_scroll_state.c_shift_in_1st_char=0;
1071   5                                                      gw_init_needed=0xFFFF;
1072   5              
1073   5                                                      gc_TaskMode_BkUp=C_Task_Mjpeg;//(JC)I0304 for back to rite TASK from Dir-list
1074   5                                                      gc_Task_Next=C_Task_Mjpeg;
1075   5                                              }
1076   4                                      else if(gc_MenuItem==2)
1077   4                                      {
1078   5                                              gc_TaskMode_BkUp=C_Task_Jpeg;//(JC)I0304 for back to rite TASK from Dir-list                                    
1079   5                                              gw_init_needed=0xFFFF;
1080   5                                              gb_FindFlag = 0;
1081   5                                              gc_Task_Next=C_Task_Jpeg;
1082   5                                      }
1083   4                                      else if(gc_MenuItem==3)  //setting
1084   4                                      {
1085   5                                              gc_Task_Next=C_Task_Setting;
1086   5                                      }
1087   4                              }
1088   3                      }
1089   2      
1090   2                      gc_PhaseInx=0;
1091   2                      gc_CurrentCard_backup=gc_CurrentCard;           
1092   2                      Polling_TaskEvents();
1093   2              IR_Service_Process_Menu_1(); 
1094   2                      Play_SourceDetect_Process_Mainmenu();
1095   2      
1096   2              if(gc_Task_Current!=gc_Task_Next)
1097   2              {
1098   3                              gc_LCM_Media=0xff;
1099   3                              gc_DisplayEQIcon=0xFF;
1100   3                              gw_DisplayBitRate=0xFFFF;
1101   3                              gc_DisplayPlayMode=0xFF;
1102   3                              gw_DispSongNum1=0xFF;
C51 COMPILER V9.00   PLAYMENU                                                              07/10/2012 15:51:57 PAGE 19  

1103   3                              gc_DispPlayStatus=0xFF;
1104   3                              gw_DispTotalTime=0xFFFF;
1105   3                              gc_DisplayVol=0xFF;
1106   3                              gc_SelectVol=1;
1107   3                              if((gc_TaskMode_BkUp==C_Task_Jpeg) ||(gc_TaskMode_BkUp==C_Task_Mjpeg))  //20090331
1108   3                              {
1109   4                                      gc_PhaseInx=1;  
1110   4                              }
1111   3                              gc_Task_Current=gc_Task_Next;
1112   3                  break;  
1113   3              }
1114   2              }       
1115   1      }
1116          
1117          
1118          void PowerOffProcess()
1119          {
1120   1              U16 tw_temp,fm_backup;
1121   1      
1122   1              gc_PhaseInx=0;
1123   1              set_clock_mode(CLOCK_MODE_MP3);
1124   1      
1125   1              TFT_PowerOfflogo();
1126   1              LCD_BACKLIGHT_OFF;
1127   1      
1128   1              gc_VolumeMute=0;
1129   1              fm_backup=gw_FM_frequency;
1130   1              gw_FM_frequency =875-5;
1131   1              FM_drive();
1132   1              while(1)
1133   1              {
1134   2                      if(gc_PhaseInx==C_PowerOff)             
1135   2                      {               
1136   3                              gc_ShowTimer=0;  //20090331                     
1137   3                              gc_TuneVolFreqStatus=0;                 
1138   3                              gb_FindFlag = 0;                        
1139   3                              gw_init_needed=0xFFFF;                                                                  
1140   3                              gc_Task_Next=C_Task_Play;                                                                              
             -                              
1141   3                              gc_MenuItemCount=0;                     //add home
1142   3                      }
1143   2      
1144   2                      Polling_TaskEvents();
1145   2      
1146   2      //=========================================================
1147   2      //=========================================================
1148   2      
1149   2                      if(gc_IRCmdStatus!=0)
1150   2                      {
1151   3                              tw_temp=(IR_REG[0x1b]<<8)+IR_REG[0x1a];
1152   3                              
1153   3                              if(tw_temp==IR_21_Key)
1154   3                              {
1155   4                                      if((IR_REG[0x1c]+IR_REG[0x1d])==0xFF)
1156   4                                      {
1157   5                                              if(IR_REG[0x1c] == 0x00)  //Power ON
1158   5                                              {
1159   6                                                      if(gc_IRCmdStatus==1)
1160   6                                                      gc_PhaseInx = C_PowerOff;
1161   6                                              }
1162   5                                      }
1163   4                              }
C51 COMPILER V9.00   PLAYMENU                                                              07/10/2012 15:51:57 PAGE 20  

1164   3                              else if(tw_temp==IR_21_1_Key)
1165   3                              {
1166   4                                      if((IR_REG[0x1c]+IR_REG[0x1d])==0xFF)
1167   4                                      {
1168   5                                              if(IR_REG[0x1c] == 0x45)  //Power ON
1169   5                                              {
1170   6                                                      if(gc_IRCmdStatus==1)
1171   6                                                      gc_PhaseInx = C_PowerOff;
1172   6                                              }
1173   5                                      }                               
1174   4                              }
1175   3                              gc_IRCmdStatus=0;
1176   3                      }
1177   2      
1178   2      //=========================================================
1179   2      
1180   2      //========================================================
1181   2      
1182   2              
1183   2                      if(gc_Task_Current!=gc_Task_Next)
1184   2                      {
1185   3                      gc_Vrefinit_Timer=60;
1186   3                      gc_PhaseInx=0;
1187   3                      gw_Disp_CurrentSecBak=0xFFFF;
1188   3                      gw_Disp_CurrentSec=0;
1189   3                      gc_Task_Current=gc_Task_Next;                         
1190   3                      break;  
1191   3                      }
1192   2      
1193   2      
1194   2      
1195   2              }
1196   1              gw_FM_frequency =fm_backup;
1197   1              FM_drive();
1198   1              TFT_PowerOnlogo();
1199   1              USER_DelayDTms(2500);
1200   1      }
1201          
1202          
1203          void IR_Service_Process_Menu_1(void)
1204          {
1205   1          if(gc_IRCmdStatus==1)
1206   1          {
1207   2      //              gc_PlayMenu_Timeout=160;
1208   2              ir_service_menu();
1209   2          }
1210   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   3218    ----
   CONSTANT SIZE    =     16    ----
   XDATA SIZE       =     17      51
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----       4
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----       4
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
