C51 COMPILER V9.00   HOST_PHY                                                              07/10/2012 15:51:56 PAGE 1   


C51 COMPILER V9.00, COMPILATION OF MODULE HOST_PHY
OBJECT MODULE PLACED IN .\obj\Host_phy.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE Host\Host_phy.c LARGE OPTIMIZE(9,SIZE) BROWSE NOAREGS INCDIR(..\libsource\h
                    -eader) DEFINE(K_ICTYPE=0x03) DEBUG OBJECTEXTEND PRINT(.\lst\Host_phy.lst) OBJECT(.\obj\Host_phy.obj)

line level    source

   1          #include "SPDA2K.h"
   2          #include "dos\fs_struct.h"
   3          #include "Memalloc.h"
   4          #include "..\header\host_init.h"
   5          
   6          
   7          data    bit     gb_shortpack=0;
   8          data    bit     gb_stall_flag=0;
   9          
  10          U8 Host_phy_Command_check(void);
  11          
  12          
  13          void tran_in_ (U8 addr,U8 amount,U16 offset)
  14          {
  15   1              XBYTE[0xB602] = addr;
  16   1              XBYTE[0xB603] = EP_IN;
  17   1              XBYTE[0xB604] = 0;
  18   1              XBYTE[0xB605] = ((offset>>8) & 0xFF) + ((HOST_BUF_SA>>8)&0xFF);
  19   1              XBYTE[0xB606] = amount;
  20   1              XBYTE[0xB607] = 0;
  21   1              if(gb_dtg_in == 0)
  22   1              {
  23   2                      XBYTE[0xB601]=0x91;
  24   2              }
  25   1              else
  26   1              {
  27   2              XBYTE[0xB601]=0x93;
  28   2              }
  29   1      }
  30          
  31          void tran_in(U8 addr,U8 amount,U16 offset)
  32          {
  33   1              tran_in_(addr,amount,offset);
  34   1              gb_dtg_in=!gb_dtg_in;
  35   1      }
  36          
  37          
  38          void tran_out(U8 addr,U8 amount)
  39          {
  40   1              XBYTE[0xB602] = addr;
  41   1              XBYTE[0xB603] = EP_OUT;
  42   1              XBYTE[0xB604] = 0;
  43   1              XBYTE[0xB605] = 0;
  44   1              XBYTE[0xB606] = amount;
  45   1              XBYTE[0xB607] = 0;
  46   1      
  47   1              if(gb_dtg_out==0)       
  48   1              {
  49   2                      XBYTE[0xB601]=0x11;
  50   2              }
  51   1              else
  52   1              {
  53   2                      XBYTE[0xB601]=0x13;
  54   2              }
C51 COMPILER V9.00   HOST_PHY                                                              07/10/2012 15:51:56 PAGE 2   

  55   1      
  56   1          gb_dtg_out=!gb_dtg_out;
  57   1      }
  58          //============================================================================================
  59          void tran_setup (U8 addr)
  60          {
  61   1              XBYTE[0xB602] = addr;
  62   1              XBYTE[0xB603] = 0x00;
  63   1              XBYTE[0xB604] = 0x00;
  64   1              XBYTE[0xB605] = 0x00;
  65   1              XBYTE[0xB606] = 0x08;
  66   1              XBYTE[0xB607] = 0x00;
  67   1              XBYTE[0xB601] = 0xD1;   //go
  68   1      }
  69          //============================================================================================
  70          void setup_in(U8 addr,U8 amount,U8 offset,U8 setup_dtg) 
  71          {
  72   1              XBYTE[0xB602] = addr;
  73   1              XBYTE[0xB603] = 0x00;
  74   1              XBYTE[0xB604]=offset;
  75   1              XBYTE[0xB605] = 0x00;
  76   1              XBYTE[0xB606]=amount;
  77   1              XBYTE[0xB607] = 0x00;
  78   1      
  79   1              if (setup_dtg==0)
  80   1              {
  81   2                      XBYTE[0xB601]=0x91;
  82   2              }
  83   1              else
  84   1              {
  85   2                      XBYTE[0xB601]=0x93;
  86   2              }
  87   1      }
  88          //============================================================================================
  89          void setup_out(U8 addr,U8 endpoint,U16 offset,U8 setup_dtg)
  90          {
  91   1              XBYTE[0xB602] = addr;
  92   1              XBYTE[0xB603] = endpoint;
  93   1              XBYTE[0xB604] = offset & 0xFF;
  94   1              XBYTE[0xB605] = ((offset>>8) & 0xFF) + ((HOST_BUF_SA>>8)&0xFF);
  95   1              XBYTE[0xB606]=0;
  96   1              XBYTE[0xB607]=0;
  97   1      
  98   1              if ( !setup_dtg )
  99   1              {
 100   2                      XBYTE[0xB601]=0x11;
 101   2              }
 102   1              else
 103   1              {
 104   2                      XBYTE[0xB601]=0x13;
 105   2              }
 106   1      }
 107          //============================================================================================
 108          U32     gdw_pollingtime;
 109          U8 Host_phy_Command_check(void)
 110          {
 111   1              xdata   U8      tc_b611_data;
 112   1              xdata   U32 i=0;
 113   1      
 114   1              gb_shortpack=0;
 115   1              while(XBYTE[0xB601]&0x01)
 116   1              {//during transaction
C51 COMPILER V9.00   HOST_PHY                                                              07/10/2012 15:51:56 PAGE 3   

 117   2                      if(gb_HostConnect == 0) 
 118   2                      {
 119   3                              return HOST_PHYCOUNECT_FAIL;
 120   3                      }
 121   2                      if (i>gdw_pollingtime) 
 122   2                      {
 123   3                              return HOST_TEST_ERROR; //TONY
 124   3                      }
 125   2                      else if(XBYTE[0xB611]&0x01)
 126   2                      {
 127   3                              return  HOST_TimeOut_ERROR;
 128   3                      }
 129   2                      else
 130   2                      {
 131   3                               i++;
 132   3                      }
 133   2              }
 134   1      
 135   1              tc_b611_data = XBYTE[0xB611];
 136   1              
 137   1              if(tc_b611_data&0x01)
 138   1              {
 139   2                      return  HOST_TEST_ERROR1;
 140   2              }
 141   1      
 142   1              if(tc_b611_data == 0)
 143   1              {//no any error
 144   2                      return 0;
 145   2              }
 146   1              else
 147   1              {//different kinds of error
 148   2                      if(tc_b611_data&0x10)   //TONY
 149   2                      {
 150   3                              gb_stall_flag = 1;
 151   3                              return  HOST_STALL;
 152   3                      }
 153   2                      else if(tc_b611_data&0x20)
 154   2                      {
 155   3                              gb_shortpack=1;
 156   3                              return 0;
 157   3                      }
 158   2                      else
 159   2                      {
 160   3                              return HOST_PHYCOUNECT_FAIL;
 161   3                      }               
 162   2              }
 163   1      }
 164          
 165          
 166          U8 Host_phy_Command_check_(U8 offset,U16 toggle)
 167          {
 168   1              xdata   U8      tc_b611_data;
 169   1              xdata   U16     time_out=0;
 170   1              xdata   U32     i=0;
 171   1      
 172   1              while(1)
 173   1              {
 174   2                      while(XBYTE[0xB601] & 0x01)
 175   2                      {
 176   3                              if(gb_HostConnect == 0) 
 177   3                              {
 178   4                                      return HOST_PHYCOUNECT_FAIL;
C51 COMPILER V9.00   HOST_PHY                                                              07/10/2012 15:51:56 PAGE 4   

 179   4                              }
 180   3      
 181   3                              if (i>gdw_pollingtime) 
 182   3                              {
 183   4                                      i = 0;
 184   4                                      return HOST_TEST_ERROR; //TONY
 185   4                              }
 186   3                              else
 187   3                              {
 188   4                                       i++;
 189   4                              }
 190   3                      }
 191   2                      if((XBYTE[0xB611] & 0x10) || (XBYTE[0xB608]==0x00))
 192   2                      {
 193   3                              break;
 194   3                      }
 195   2                      if(time_out==0x5000)
 196   2                      {
 197   3                              break;
 198   3                      }
 199   2      
 200   2      //*****************************************************************
 201   2                      XBYTE[0xB604] = offset & 0xFF;
 202   2                      XBYTE[0xB605] = ((offset>>8) & 0xFF) + ((HOST_BUF_SA>>8)&0xFF); 
 203   2      //*************************************************F****************
 204   2      
 205   2                      time_out++;
 206   2                      if(toggle == 0) XBYTE[0xB601]=0x91;
 207   2                      else            XBYTE[0xB601]=0x93;
 208   2              }
 209   1      
 210   1              tc_b611_data = XBYTE[0xB611];
 211   1              if(tc_b611_data == 0)
 212   1              {
 213   2                      return 0;
 214   2              }
 215   1              else
 216   1              {
 217   2                      if(tc_b611_data&0x10)
 218   2                      {
 219   3                              gb_stall_flag=1;
 220   3                              return  HOST_STALL;
 221   3                      }
 222   2                      else if(tc_b611_data & 0x20)
 223   2                      {
 224   3                              gb_shortpack=1;
 225   3                              return 0;
 226   3                      }
 227   2                      else
 228   2                      {
 229   3                              return HOST_PHYCOUNECT_FAIL;
 230   3                      }
 231   2              }
 232   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    487    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =      4      22
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
C51 COMPILER V9.00   HOST_PHY                                                              07/10/2012 15:51:56 PAGE 5   

   IDATA SIZE       =   ----    ----
   BIT SIZE         =      2    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
