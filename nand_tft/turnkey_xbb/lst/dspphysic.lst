C51 COMPILER V9.00   DSPPHYSIC                                                             07/10/2012 15:51:49 PAGE 1   


C51 COMPILER V9.00, COMPILATION OF MODULE DSPPHYSIC
OBJECT MODULE PLACED IN .\obj\dspphysic.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE ..\LIBSOURCE\DSP\dspphysic.c LARGE OPTIMIZE(9,SIZE) BROWSE NOAREGS INCDIR(.
                    -.\libsource\header) DEFINE(K_ICTYPE=0x03) DEBUG OBJECTEXTEND PRINT(.\lst\dspphysic.lst) OBJECT(.\obj\dspphysic.obj)

line level    source

   1          #include "define.h"
   2          #include "Rambase.h"
   3          #include "DSP.h"
   4          #include "dspphysic.h"
   5          
   6          
   7          extern  U8              L2_DSP_DM_Triger(U8 tc_DSP_ErrorStatus);
   8          
   9          void L2_DSP_Write_DMem24(U16 tw_Addr,U32 tdw_Data)
  10          {
  11   1          DSP3_REG[0x40] = LOBYTE(tw_Addr);
  12   1          DSP3_REG[0x41] = HIBYTE(tw_Addr);
  13   1          DSP3_REG[0x42] =*((U8 *)&tdw_Data + 3);
  14   1          DSP3_REG[0x43] =*((U8 *)&tdw_Data + 2);
  15   1          DSP3_REG[0x44] =*((U8 *)&tdw_Data + 1);
  16   1          DSP3_REG[0x45]=0x01;        //write. after R/W, the addr will be incremented
  17   1          L2_DSP_DM_Triger(C_DSP_WriteMemError);
  18   1      }
  19          
  20          
  21          //===================================================
  22          //              DMA Transfer
  23          //===================================================
  24          void L2_DSP_MCU_IM_DMA(U8 BufferIndex, U16 tw_Src)
  25          {
  26   1              U16 tw_DSPAddr;
  27   1              U16 tw_DSP_Word_Align;
  28   1      
  29   1              tw_DSPAddr= (U16)(BufferIndex<<9);
  30   1      
  31   1              // ----- DMA Reset -----
  32   1              DMA_REG[0x04] = 0x09;
  33   1              DMA_REG[0x04] = 0x08;
  34   1              DMA_REG[0xC0] = 0x00;           // clear DMA complete
  35   1              DMA_REG[0x30] = 0x01;           // clear checksum
  36   1              
  37   1              // ----- DMA initial settings for IM transfer -----
  38   1              DSP_REG[0x16] = 0x04;   // Enable IM DMA
  39   1              DMA_REG[0x01] = 0x30;   // DMA : SRAM --> IM
  40   1      
  41   1              // Define data size in DMA transfer =512 byte (0xB302, 0xB303)
  42   1              DMA_REG[0x02] = 0xFF;
  43   1              DMA_REG[0x03] = 0x01;
  44   1      
  45   1              DMA_REG[0x40] = 0x00;   // 24-bit DMA
  46   1      
  47   1              // Destination
  48   1              tw_DSP_Word_Align = tw_DSPAddr/3;
  49   1              DSP_REG[0x1F]=  tw_DSPAddr%3;           // offset
  50   1              DSP_REG[0x1B] = (tw_DSP_Word_Align<<8)>>8;              // DSP_REG[0x1B] = *((U8 *)&tw_DSP_Word_Align + 1);
  51   1              DSP_REG[0x1C] = (tw_DSP_Word_Align)>>8;                 // DSP_REG[0x1C] = *((U8 *)&tw_DSP_Word_Align);
  52   1              // Source
  53   1              CPU_REG[0x12] = (tw_Src<<8)>>8;
  54   1              CPU_REG[0x13] = (tw_Src>>8);
C51 COMPILER V9.00   DSPPHYSIC                                                             07/10/2012 15:51:49 PAGE 2   

  55   1      
  56   1              // ------------------------------------------------
  57   1      
  58   1              DMA_REG[0xB0] = 0x01;   // DMA Run (0xB3B0)
  59   1      
  60   1              // wait until DMA cycle is completed (0xB3C0)
  61   1              while(! (DMA_REG[0xC0]&0x01) );
  62   1              DMA_REG[0xC0] = 0x00;
  63   1      
  64   1              DSP_REG[0xC0] = 0x00;  // Clean 0xB3C0
  65   1              DSP_REG[0x16] = 0x00;  //Enable DM,IM,PM
  66   1      }
  67          
  68          void L2_DSP_MCU_PM_DMA(U8 BufferIndex, U16 tw_Src)
  69          {
  70   1              U16 tw_DSPAddr;
  71   1              U16 tw_DSP_Word_Align;
  72   1      
  73   1              tw_DSPAddr= (U16)(BufferIndex<<9);
  74   1      
  75   1              // ----- DMA Reset -----
  76   1              DMA_REG[0x04] = 0x09;
  77   1              DMA_REG[0x04] = 0x08;
  78   1              DMA_REG[0xC0] = 0x00;           // clear DMA complete
  79   1              DMA_REG[0x30] = 0x01;           // clear checksum
  80   1      
  81   1              // ----- DMA initial settings for PM transfer -----
  82   1              DSP_REG[0x16] = 0x02;   // Enable PM DMA
  83   1              DMA_REG[0x01] = 0x40;   // DMA : SRAM --> PM
  84   1      
  85   1              // Define data size in DMA transfer =512 byte (0xB302, 0xB303)
  86   1              DMA_REG[0x02] = 0xFF;
  87   1              DMA_REG[0x03] = 0x01;
  88   1      
  89   1              DMA_REG[0x40] = 0x00;   // 24-bit DMA
  90   1      
  91   1              // Destination
  92   1              tw_DSP_Word_Align = tw_DSPAddr/3;
  93   1              DSP_REG[0x1E]=  tw_DSPAddr%3;   // offset
  94   1              DSP_REG[0x19] = (tw_DSP_Word_Align<<8)>>8;              // DSP_REG[0x19] = *((U8 *)&tw_DSP_Word_Align);         
  95   1              DSP_REG[0x1A] = (tw_DSP_Word_Align)>>8;                 // DSP_REG[0x1A] = *((U8 *)&tw_DSP_Word_Align + 1);
  96   1              // Source
  97   1              CPU_REG[0x12] = (tw_Src<<8)>>8;
  98   1              CPU_REG[0x13] = (tw_Src>>8);
  99   1                      
 100   1              // ------------------------------------------------
 101   1      
 102   1              DMA_REG[0xB0] = 0x01;   // DMA Run (0xB3B0)
 103   1      
 104   1              // wait until DMA cycle is completed (0xB3C0)
 105   1              while(! (DMA_REG[0xC0]&0x01) );
 106   1              DMA_REG[0xC0] = 0x00;
 107   1              DSP_REG[0xC0] = 0x00;  // Clean 0xB3C0
 108   1      
 109   1              DSP_REG[0x16] = 0x00;  //Enable DM,IM,PM
 110   1      }
 111          
 112          void L2_DSP_MCU_DM_DMA(U16 BufferIndex,U8 tc_Dest_Addr_High, U16 tw_Src, U8 tc_Codec_Mode)
 113          {
 114   1              U16 tw_DSPAddr;
 115   1              U16 tw_DSP_Word_Align;
 116   1              U8  tc_DSPAddr_High;
C51 COMPILER V9.00   DSPPHYSIC                                                             07/10/2012 15:51:49 PAGE 3   

 117   1              code U16 gw_DSP_Addr_Table[47] = 
 118   1              {
 119   1                      0x0, 0x80aa, 0x4155, 0x200, 0x82aa, 0x4355, 0x400, 0x84aa, 
 120   1                      0x4555, 0x600, 0x86aa, 0x4755, 0x800, 0x88aa, 0x4955, 0xa00, 
 121   1                      0x8aaa, 0x4b55, 0xc00, 0x8caa, 0x4d55, 0xe00, 0x8eaa, 0x4f55, 
 122   1                      0x1000, 0x90aa, 0x5155, 0x1200, 0x92aa, 0x5355, 0x1400, 0x94aa, 
 123   1                      0x5555, 0x1600, 0x96aa, 0x5755, 0x1800, 0x98aa, 0x5955, 0x1a00, 
 124   1                      0x9aaa, 0x5b55, 0x1c00, 0x9caa, 0x5d55, 0x1e00, 0x9eaa
 125   1              };
 126   1      
 127   1              // ----- DMA Reset -----
 128   1              DMA_REG[0x04] = 0x09;
 129   1              DMA_REG[0x04] = 0x08;
 130   1              DMA_REG[0xC0] = 0x00;           // clear DMA complete
 131   1              DMA_REG[0x30] = 0x01;           // clear checksum
 132   1      
 133   1              // ----- DMA initial settings for DM transfer -----
 134   1              // DSP_REG[0x16] = 0x01;        // Enable DM DMA (Error)
 135   1              DSP_REG[0x16] = 0x00;   // Remain DSP mode.  When you do MCU -> DM, MCU will stop DSP automaticlly
 136   1              DMA_REG[0x01] = 0x50;   // DMA : SRAM --> DM
 137   1      
 138   1              // Define data size in DMA (assume 512 bytes)
 139   1              DMA_REG[0x02] = 0xFF;
 140   1              DMA_REG[0x03] = 0x01;
 141   1      
 142   1              // Destination
 143   1              switch (tc_Codec_Mode) {
 144   2                      case DMA_24BIT_MODE:
 145   2                              DMA_REG[0x40] = 0x00;   // 24-bit DMA
 146   2      
 147   2                              tw_DSP_Word_Align = gw_DSP_Addr_Table[BufferIndex];
 148   2                              tc_DSPAddr_High = *((U8 *)&tw_DSP_Word_Align);
 149   2                              DSP_REG[0x1D]=  (U8)(tc_DSPAddr_High >> 6);     //(U8)((BufferIndexTmp)%3);
 150   2      
 151   2                              tc_DSPAddr_High = *((U8 *)&tw_DSP_Word_Align);
 152   2                              tc_DSPAddr_High = tc_DSPAddr_High & 0x3F;
 153   2                              tc_DSPAddr_High += tc_Dest_Addr_High;
 154   2      
 155   2                              DSP_REG[0x18] = tc_DSPAddr_High;
 156   2                              DSP_REG[0x17] = *((U8 *)&tw_DSP_Word_Align + 1);
 157   2                              break;
 158   2                      case DMA_16BIT_MODE:
 159   2                              DMA_REG[0x40] = 0x01;   // 16-bit DMA
 160   2      
 161   2                              *((U8 *)&tw_DSPAddr) = ((*((U8 *)&BufferIndex + 1)) << 1);
 162   2                              *((U8 *)&tw_DSPAddr + 1) = 0;
 163   2      
 164   2                              tw_DSP_Word_Align = tw_DSPAddr >> 1;
 165   2                              DSP_REG[0x1D]=  0x01;   // offset
 166   2      
 167   2                              tc_DSPAddr_High = *((U8 *)&tw_DSP_Word_Align);
 168   2                              tc_DSPAddr_High += tc_Dest_Addr_High;
 169   2      
 170   2                              DSP_REG[0x18] = tc_DSPAddr_High;
 171   2                              DSP_REG[0x17] = *((U8 *)&tw_DSP_Word_Align + 1);
 172   2                              break;
 173   2              }
 174   1              // Source
 175   1              CPU_REG[0x12] = (tw_Src<<8)>>8;
 176   1              CPU_REG[0x13] = (tw_Src>>8);
 177   1                      
 178   1              // ------------------------------------------------
C51 COMPILER V9.00   DSPPHYSIC                                                             07/10/2012 15:51:49 PAGE 4   

 179   1      
 180   1              DMA_REG[0xB0] = 0x01;   // DMA Run (0xB3B0)
 181   1              // wait until DMA cycle is completed (0xB3C0)
 182   1              while((DMA_REG[0xC0]&0x01)==0);
 183   1              DMA_REG[0xC0] = 0x00;
 184   1              DSP_REG[0xC0] = 0x00;  // Clean 0xB3C0
 185   1      }
 186          
 187          
 188          void L2_DSP_DM_MCU_DMA(U16 BufferIndex,U8 tc_PowerOf2, U16 tw_Src, U8 tc_Codec_Mode)
 189          {
 190   1              U8  tc_DSPAddr_High;
 191   1              U16 tw_MoveSize;
 192   1              U32     i=0;
 193   1      
 194   1              // ----- DMA Reset -----
 195   1              DMA_REG[0x04] = 0x09;
 196   1              DMA_REG[0x04] = 0x08;
 197   1              DMA_REG[0xC0] = 0x00;           // clear DMA complete
 198   1              DMA_REG[0x30] = 0x01;           // clear checksum               
 199   1                      
 200   1              // ----- DMA initial settings for DM transfer -----             
 201   1              // DSP_REG[0x16] = 0x01;                //Enable DM DMA (Error)
 202   1              DSP_REG[0x16] = 0x00;   // Remain DSP mode.  When you do MCU -> DM, MCU will stop DSP automaticlly
 203   1              DMA_REG[0x01] = 0x05;           // DM -> SRAM
 204   1      
 205   1              // Define data size in DMA              
 206   1              tw_MoveSize = (1 << tc_PowerOf2) - 1;
 207   1              DMA_REG[0x02] = ((U8 *)(&tw_MoveSize))[1];
 208   1              DMA_REG[0x03] = ((U8 *)(&tw_MoveSize))[0];
 209   1      
 210   1              switch(tc_Codec_Mode)
 211   1              {
 212   2                      case DMA_24BIT_MODE:
 213   2                              DMA_REG[0x40] = 0x00;   // 24-bit DMA
 214   2      
 215   2                              DSP_REG[0x1D] = (U8)((BufferIndex<<tc_PowerOf2)%3);
 216   2                              tc_DSPAddr_High = (U8)( ((BufferIndex<<tc_PowerOf2)/3) >>8 );
 217   2                              tc_DSPAddr_High += 0x30;//0x20; // bitstream start address : 0x2000
 218   2                              DSP_REG[0x18] = tc_DSPAddr_High;
 219   2                              DSP_REG[0x17] = (U8)((BufferIndex<<tc_PowerOf2)/3);
 220   2                              break;
 221   2                      case DMA_16BIT_MODE:
 222   2                              DMA_REG[0x40] = 0x01;   // 16-bit DMA
 223   2      
 224   2                              DSP_REG[0x1D] = 0x01;
 225   2                              tc_DSPAddr_High = (U8)( ((BufferIndex<<tc_PowerOf2)>>1) >>8 );
 226   2                              tc_DSPAddr_High += 0x30;//0x20; // bitstream start address : 0x2000
 227   2                              DSP_REG[0x18] = tc_DSPAddr_High;
 228   2                              DSP_REG[0x17] = (U8)((BufferIndex<<tc_PowerOf2)>>1);
 229   2                              break;
 230   2              }
 231   1              // Source
 232   1              CPU_REG[0x14] = (U8)( tw_Src);
 233   1              CPU_REG[0x15] = (U8)( ( tw_Src) >>8 );
 234   1      
 235   1              // ------------------------------------------------
 236   1      
 237   1              DMA_REG[0xB0] = 0x01;   // DMA1 start
 238   1              // wait until DMA cycle is completed (0xB3C0)           
 239   1              while(! (DMA_REG[0xC0]&0x01) )
 240   1              {
C51 COMPILER V9.00   DSPPHYSIC                                                             07/10/2012 15:51:49 PAGE 5   

 241   2                      i++;
 242   2                      if(i>60000)
 243   2                      {
 244   3                              break;
 245   3                      }       
 246   2              }               
 247   1              DMA_REG[0xC0] = 0x00;
 248   1      }
 249          
 250          
 251          
 252          
 253          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    724    ----
   CONSTANT SIZE    =     94    ----
   XDATA SIZE       =   ----      37
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
