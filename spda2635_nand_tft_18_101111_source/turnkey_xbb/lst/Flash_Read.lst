C51 COMPILER V9.00   FLASH_READ                                                            07/10/2012 15:51:48 PAGE 1   


C51 COMPILER V9.00, COMPILATION OF MODULE FLASH_READ
OBJECT MODULE PLACED IN .\obj\Flash_Read.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE ..\libsource\FLASH\Flash_Read.C LARGE OPTIMIZE(9,SIZE) BROWSE NOAREGS INCDI
                    -R(..\libsource\header) DEFINE(K_ICTYPE=0x03) DEBUG OBJECTEXTEND PRINT(.\lst\Flash_Read.lst) OBJECT(.\obj\Flash_Read.obj)

line level    source

   1          /*
   2           *                          Sunplus mMedia Inc.
   3           *
   4           *   (c) Copyright 2008~, Sunplus mMedia Inc., Hsinchu, Taiwan R.O.C.
   5           *                          All Right Reserved
   6           */
   7          /*! \file       flash.c
   8           *      \brief  
   9           *
  10           *      \author jay
  11           */
  12          
  13          #include "SPDA2K.h"
  14          
  15          /*********************************************************************************
  16          * NAME:                   void NAND_FlashReadSector_Large(void)
  17          * DESCRIPTION:// SPDA26xx flash  plan
  18          *********************************************************************************/
  19          void NAND_FlashReadSector_Large(void) {
  20   1              data    bit     tbt_DoSendCommand=0;
  21   1              data    bit     tbt_Extend_Found,tbt_Random_Found,tbt_Find_D_SBlock;
  22   1              data    U8      tc_Extend_Count,tc_Random_Count; 
  23   1              data    U8      tc_Offset; 
  24   1              xdata   U8      tc_Buf_InAddr;
  25   1          data        U8      tc_i;
  26   1          data        U8      tc_RealInAddr;   
  27   1          data        U8      tc_BigSector_Cnt,tc_SmallSector_Cnt;
  28   1          data        U16     tw_TotalESPage;
  29   1          data        U8      tc_Recover_Type;
  30   1          data        U8      tc_Need_Recover;
  31   1          data        U8      tc_OxFF_Cnt;
  32   1         
  33   1          USB_PlugDetect();                                                                                   // 081014 Jay add for usb plug out
  34   1              if(!gbt_USB_Detected){
  35   2                      return ;
  36   2              }
  37   1          DEVICE_REG[0x00]|=0x10;  //for interface switch                                                                     // 將Flash module reset
  38   1              DEVICE_REG[0x00]&=0xEF;
  39   1              DEVICE_REG[0x00]= 0x01;
  40   1              Flash_State_Initial();
  41   1              //dbprintf("\n Read LBA:%lX , CNT:%x",LBA.LW,TotalXferPageNum.WD);
  42   1              Check_LoadMap();        
  43   1              NAND_HPage_To_SBlock_SPage();
  44   1              APort_FBlock[0] = Mapping_Table[HBlock.WD];
  45   1              tbt_Extend_Found = 0;   
  46   1              tbt_Random_Found = 0;
  47   1              tc_Recover_Type  = 0;  
  48   1              tc_Need_Recover  = 0;
  49   1              
  50   1              LoadBlock_From_MAP(0);  
  51   1              for(tc_Extend_Count=0;tc_Extend_Count<Extend_NUM;tc_Extend_Count++){
  52   2                      if(Mapping_Table[EINX+tc_Extend_Count]==HBlock.WD){
  53   3                              tbt_Extend_Found = 1;
  54   3                              Load_E_D_Block_From_MAP(0,tc_Extend_Count);
C51 COMPILER V9.00   FLASH_READ                                                            07/10/2012 15:51:48 PAGE 2   

  55   3                              gc_Q1_SBlock = Mapping_Table[Q1_INX+tc_Extend_Count]>>8;
  56   3                              gc_E_SBlock = Mapping_Table[Q2_INX+tc_Extend_Count]>>8;
  57   3                              gc_E_SPage  = (U8)Mapping_Table[ Q2_INX+tc_Extend_Count];               
  58   3                              tw_TotalESPage = ((U16)gc_E_SBlock*H_INFO.cSMALLPAGE_NUM)+gc_E_SPage;
  59   3                              
  60   3                              break;
  61   3                      }
  62   2              }
  63   1              if(!tbt_Extend_Found){
  64   2                      for(tc_Random_Count=0;tc_Random_Count<MAX_RANDOM_HBLOCK;tc_Random_Count++){
  65   3                              if(Wear_Table[RINX+tc_Random_Count]==HBlock.WD){
  66   4                                      tbt_Random_Found= 1;                               
  67   4                                      break;
  68   4                              }
  69   3                      }
  70   2              }
  71   1              if(tbt_Extend_Found){
  72   2                      if(HPage.WD>= tw_TotalESPage){
  73   3                              APort_FBlock[0] = APort_LBlock[0];
  74   3                              gw_TargetPage = HPage.WD;
  75   3                              tc_Recover_Type =0x10;
  76   3                      }               
  77   2                      else{
  78   3                              tc_Offset= (tc_Extend_Count* MAX_DUMMY_PAGE); 
  79   3                              tbt_Find_D_SBlock =0;
  80   3                              for(tc_i=0; tc_i<MAX_DUMMY_PAGE;tc_i++){
  81   4                                      if(Mapping_Table[D_HPAGE+tc_Offset+tc_i]!=0xFFFF){
  82   5                                              tbt_Find_D_SBlock=1;
  83   5                                              break;
  84   5                                      }
  85   4                              }
  86   3                              if(tbt_Find_D_SBlock){                          
  87   4                                      NAND_E_D_ReadSector(tc_Extend_Count);//轉成一般的RW
  88   4                                      if(!gbt_USB_Detected){
  89   5                                              goto USB_Plug_Out_R;                                    
  90   5                                      }                               
  91   4                                      if(HPage.WD==H_INFO.wHBLOCKPAGE){//0520 Jay add 
  92   5                                              return;
  93   5                                      }                               
  94   4                                      APort_FBlock[0] = APort_LBlock[0];
  95   4                                      gw_TargetPage = HPage.WD;       
  96   4                                      tc_Recover_Type =0x10;  
  97   4                              }               
  98   3                              else{
  99   4                                      if(gc_SBlock<gc_Q1_SBlock){                     
 100   5                                              APort_FBlock[0] =APort_LBlock[0];
 101   5                                              tc_Recover_Type =0x10;
 102   5                                      }
 103   4                                      else{                   
 104   5                                              APort_FBlock[0] = APort_EBlock[0];
 105   5                                              tc_Recover_Type =0x20;
 106   5                                      }
 107   4                                      gw_TargetPage = HPage.WD;       
 108   4                              }                       
 109   3                      }               
 110   2              }
 111   1              else if (tbt_Random_Found){             
 112   2                      if(CHK_RandomPage_Exist(tc_Random_Count,HPage.WD)){
 113   3                              tc_Offset =tc_Random_Count*MAX_RANDOM_HPAGE;
 114   3                              gw_TargetPage =Mapping_Table[R_PAGE+tc_Offset+gc_NowIndex];
 115   3                              APort_FBlock[0] = APort_RBlock[0];
 116   3                              tc_Recover_Type =0x40;
C51 COMPILER V9.00   FLASH_READ                                                            07/10/2012 15:51:48 PAGE 3   

 117   3                      }
 118   2                      else{                                           
 119   3                              APort_FBlock[0] = APort_LBlock[0];
 120   3                              gw_TargetPage = HPage.WD;
 121   3                              tc_Recover_Type =0x10;
 122   3                      }
 123   2                      
 124   2              }
 125   1              else{
 126   2                      APort_FBlock[0] =APort_LBlock[0];
 127   2                      gw_TargetPage = HPage.WD;
 128   2                      tc_Recover_Type =0x10;
 129   2              }
 130   1              tc_Buf_InAddr =gc_HInAddr&0x01;
 131   1              if(tc_Buf_InAddr){
 132   2                      tc_RealInAddr = gc_HInAddr&0xFE;
 133   2                      NAND_SBlock_SPage_To_FDBP();    
 134   2                      FDBP.cFInAddr =tc_RealInAddr;
 135   2                      Device_Read_SRAM_Index.BY[0] = USB_BUF_Bank0_HIGH;                      // 080104 joyce add
 136   2                      Device_Read_SRAM_Index.BY[1] = 0x00;
 137   2                      Flash_ReadPage();
 138   2                      #if  EN_RECOVER_BLOCK
 139   2                      if(gc_ECC_Error_Bit>gc_MAX_ERR_BIT_NUM){                        
 140   3                              tc_OxFF_Cnt=0;
 141   3                              for(tc_i=0;tc_i<4;tc_i++){
 142   4                                      if(FLASH_REG[0x60+tc_i] ==0xFF){
 143   5                                              tc_OxFF_Cnt++;
 144   5                                      }
 145   4                              }
 146   3                              if(tc_OxFF_Cnt<=2){
 147   4                                      //dbprintf("\n 1 ERR_bit:%bx ,T:%bx ",gc_ECC_Error_Bit,tc_Recover_Type);
 148   4                                      //dbprintf("\n BLK:%x,Page:%x,InAddr:%bx",FDBP.wFBlock,FDBP.wFPage,gc_HInAddr);
 149   4                                      tc_Need_Recover |= tc_Recover_Type;
 150   4                                      if(gc_ECC_Error_Bit ==25){
 151   5                                              tc_Need_Recover |=0x02;
 152   5                                      }
 153   4                                      else{
 154   5                                              tc_Need_Recover |=0x01;
 155   5                                      }
 156   4                              }               
 157   3                      }
 158   2                      #endif 
 159   2                      USB_REG[0xC2] &= 0xEF;                                          //Bulk-In Tx done
 160   2                      USB_REG[0x10] = 0x01;                                                   //BulkInEn nonauto turn-on
 161   2                      USB_REG[0xE9] = 0x01;                                                   //Clear Bulk-In(EP1) Buffer.
 162   2                      USB_REG[0x2B] = 0x01;
 163   2                      USB_REG[0x16] = 0x02;   
 164   2                      USB_REG[0x15] = 0x00;
 165   2                      USB_REG[0xA1] = 0x01;                                                   //Allow Bulk-In Tx.
 166   2                      while (USB_REG[0xA1]&0x01){                                                             //Bulk-In Tx done
 167   3                              if(!(GLOBAL_REG[0xD1]&0x02)){// 081023 Jay add                          
 168   4                                      gbt_USB_Detected = 0;
 169   4                                      goto USB_Plug_Out_R;
 170   4                                      break;
 171   4                              }                       
 172   3                      }               
 173   2                      USB_REG[0x10] = 0x00;                                                   //BulkInEn nonauto turn-on
 174   2                      TotalXferPageNum.WD--;  
 175   2                      gc_HInAddr++;
 176   2                      if(gc_HInAddr==NAND_INFO.cINADDRMAX){
 177   3                              gc_HInAddr=0;
 178   3                              HPage.WD++;
C51 COMPILER V9.00   FLASH_READ                                                            07/10/2012 15:51:48 PAGE 4   

 179   3                              NAND_HPage_To_SBlock_SPage();
 180   3                              tbt_DoSendCommand=1;
 181   3                      }
 182   2                      if(HPage.WD==H_INFO.wHBLOCKPAGE){
 183   3                              return ;
 184   3                      }
 185   2                      else{// chk page status
 186   3                              if(tbt_Extend_Found){
 187   4                                      if(HPage.WD>= tw_TotalESPage){
 188   5                                              APort_FBlock[0] = APort_LBlock[0];
 189   5                                              gw_TargetPage = HPage.WD;
 190   5                                              tc_Recover_Type =0x10;
 191   5                                      }       
 192   4                                      else{
 193   5                                              if(gc_SBlock<gc_Q1_SBlock){                     
 194   6                                                      APort_FBlock[0] =APort_LBlock[0];
 195   6                                                      tc_Recover_Type =0x10;
 196   6                                              }
 197   5                                              else{                   
 198   6                                                      APort_FBlock[0] = APort_EBlock[0];
 199   6                                                      tc_Recover_Type =0x20;
 200   6                                              }                               
 201   5                                              gw_TargetPage = HPage.WD;                       
 202   5                                      }
 203   4                              }
 204   3                              else if(tbt_Random_Found){
 205   4                                      if(CHK_RandomPage_Exist(tc_Random_Count,HPage.WD)){
 206   5                                              tc_Offset =tc_Random_Count*MAX_RANDOM_HPAGE;
 207   5                                              gw_TargetPage =Mapping_Table[R_PAGE+tc_Offset+gc_NowIndex];
 208   5                                              APort_FBlock[0] = APort_RBlock[0];
 209   5                                              tc_Recover_Type =0x40;
 210   5                                      }
 211   4                                      else{                                           
 212   5                                              APort_FBlock[0] = APort_LBlock[0];
 213   5                                              gw_TargetPage = HPage.WD;
 214   5                                              tc_Recover_Type =0x10;
 215   5                                      }
 216   4                              }
 217   3                              else{
 218   4                                      APort_FBlock[0] = APort_LBlock[0];
 219   4                                      gw_TargetPage = HPage.WD;
 220   4                                      tc_Recover_Type =0x10;
 221   4                              }       
 222   3                                      
 223   3                      }
 224   2              }
 225   1              //-------- 之後都是 以1024 為單位------------//
 226   1              tc_SmallSector_Cnt= TotalXferPageNum.WD&0x01;
 227   1              tc_BigSector_Cnt= TotalXferPageNum.WD>>1;
 228   1              if(tc_BigSector_Cnt){           
 229   2                      gbt_OddTemp =0;
 230   2                      gc_Flash_CMD1 = 0x00;    
 231   2                      gc_Flash_CMD2 = 0x30;    
 232   2                      gc_Flash_CMD_Type = 0x01;                                                                       // Read -->CMD1+Addr+CMD2
 233   2                      NAND_SBlock_SPage_To_FDBP();    
 234   2                      FDBP.cFInAddr = gc_HInAddr;             
 235   2                      TRIGGER_FLASH_CMD_COL_ADDR_CMD();       
 236   2                      ENA_ECC_Decode();
 237   2                      Device_Xfer_DataLength.WD = 0x03FF; 
 238   2                      Device_Read_SRAM_Index.BY[0] = USB_BUF_Bank0_HIGH;                      // 080104 joyce add
 239   2                      Device_Read_SRAM_Index.BY[1] = 0x00;
 240   2                      SET_DEVICE_READ();      
C51 COMPILER V9.00   FLASH_READ                                                            07/10/2012 15:51:48 PAGE 5   

 241   2                      if(gc_HInAddr==(NAND_INFO.cINADDRMAX-2)){
 242   3                              FLASH_REG[0x1A] =0x11;
 243   3                      }
 244   2                      else{
 245   3                              FLASH_REG[0x1A] =0x10;
 246   3                      }
 247   2                      if(tc_BigSector_Cnt==1){// last dma 
 248   3                              FLASH_REG[0x1A] =0x11;
 249   3                      }               
 250   2                      CHK_Flash_Ready();
 251   2                      FLASH_REG[0xA1]  = 0x01;                                                                
 252   2                      CHK_Flash_Ready();
 253   2                      Trigger_Data_Transfer();
 254   2                      tc_BigSector_Cnt--;
 255   2                      TotalXferPageNum.WD-=2;
 256   2                      gc_HInAddr+=2;
 257   2                      tbt_DoSendCommand=0;    
 258   2                      while(tc_BigSector_Cnt){
 259   3                              if(gc_HInAddr==NAND_INFO.cINADDRMAX){
 260   4                                      gc_HInAddr=0;
 261   4                                      HPage.WD++;
 262   4                                      NAND_HPage_To_SBlock_SPage();
 263   4                                      tbt_DoSendCommand=1;
 264   4                                      
 265   4                              }
 266   3                              if(HPage.WD==H_INFO.wHBLOCKPAGE){
 267   4                                      break;
 268   4                              }
 269   3                              else{// chk page status                         
 270   4                                      if(tbt_Extend_Found){
 271   5                                              if(HPage.WD>= tw_TotalESPage){
 272   6                                                      APort_FBlock[0] = APort_LBlock[0];
 273   6                                                      gw_TargetPage = HPage.WD;
 274   6                                              }       
 275   5                                              else{
 276   6                                                      if(gc_SBlock<gc_Q1_SBlock){
 277   7                                                              APort_FBlock[0] =APort_LBlock[0];
 278   7                                                      }
 279   6                                                      else{
 280   7                                                              APort_FBlock[0] = APort_EBlock[0];
 281   7                                                      }
 282   6                                                      gw_TargetPage = HPage.WD;                       
 283   6                                              }
 284   5                                      }
 285   4                                      else if(tbt_Random_Found){
 286   5                                              if(CHK_RandomPage_Exist(tc_Random_Count,HPage.WD)){
 287   6                                                      tc_Offset =tc_Random_Count*MAX_RANDOM_HPAGE;
 288   6                                                      gw_TargetPage =Mapping_Table[R_PAGE+tc_Offset+gc_NowIndex];
 289   6                                                      APort_FBlock[0] = APort_RBlock[0];
 290   6                                              }
 291   5                                              else{                                           
 292   6                                                      APort_FBlock[0] = APort_LBlock[0];
 293   6                                                      gw_TargetPage = HPage.WD;
 294   6                                              }
 295   5                                      }
 296   4                                      else{
 297   5                                              APort_FBlock[0] = APort_LBlock[0];
 298   5                                              gw_TargetPage = HPage.WD;
 299   5                                      }       
 300   4                                              
 301   4                              }
 302   3                              CHK_Data_Transfer_Done();                       
C51 COMPILER V9.00   FLASH_READ                                                            07/10/2012 15:51:48 PAGE 6   

 303   3                              CHK_ECC_Done();
 304   3                              #if  EN_RECOVER_BLOCK
 305   3                              if(gc_ECC_Error_Bit>gc_MAX_ERR_BIT_NUM){                        
 306   4                                      tc_OxFF_Cnt=0;
 307   4                                      for(tc_i=0;tc_i<4;tc_i++){
 308   5                                              if(FLASH_REG[0x60+tc_i] ==0xFF){
 309   6                                                      tc_OxFF_Cnt++;
 310   6                                              }
 311   5                                      }
 312   4                                      if(tc_OxFF_Cnt<=2){
 313   5                                              //dbprintf("\n 2 ERR_bit:%bx ,T:%bx ",gc_ECC_Error_Bit,tc_Recover_Type);
 314   5                                              //dbprintf("\n BLK:%x,Page:%x,InAddr:%bx",FDBP.wFBlock,FDBP.wFPage,gc_HInAddr);
 315   5                                              tc_Need_Recover |= tc_Recover_Type;
 316   5                                              if(gc_ECC_Error_Bit ==25){
 317   6                                                      tc_Need_Recover |=0x02;
 318   6                                              }
 319   5                                              else{
 320   6                                                      tc_Need_Recover |=0x01;
 321   6                                              }
 322   5                                      }               
 323   4                              }
 324   3                              #endif 
 325   3                              
 326   3                               
 327   3                              
 328   3                              if(tbt_DoSendCommand){                  
 329   4                                      gc_Flash_CMD1 = 0x00;    
 330   4                                      gc_Flash_CMD2 = 0x30;    
 331   4                                      gc_Flash_CMD_Type = 0x01;                                                                       // Read -->CMD1+Addr+CMD2
 332   4                                      NAND_SBlock_SPage_To_FDBP();    
 333   4                                      TRIGGER_FLASH_CMD_COL_ADDR_CMD();                               
 334   4                              }                       
 335   3                              if(!gbt_OddTemp) {      // transfer data to usb          // DMA前需確認USB 不動作                       
 336   4                                      while (USB_REG[0xA2]&0x01){
 337   5                                              if(!(GLOBAL_REG[0xD1]&0x02)){// 081023 Jay add                          
 338   6                                                      gbt_USB_Detected = 0;
 339   6                                                      goto USB_Plug_Out_R;
 340   6                                                      break;
 341   6                                              }                               
 342   5                                      }                       
 343   4                                      USB_REG[0xC2] &= 0xEF;                                          //Bulk-In Tx done
 344   4                                      USB_REG[0x10] = 0x01;                                                   //BulkInEn nonauto turn-on
 345   4                                      USB_REG[0xE9] = 0x01;                                                   //Clear Bulk-In(EP1) Buffer.
 346   4                                      USB_REG[0x2B] = 0x00;
 347   4                                      USB_REG[0x16] = 0x04;   
 348   4                                      USB_REG[0x15] = 0x00;
 349   4                                      USB_REG[0xA1] = 0x01;                                                   //Allow Bulk-In Tx.
 350   4                                      CPU_REG[0x15] = USB_BUF_Bank1_HIGH;                             // 080104 joyce add
 351   4                                      //if (!gbt_USBHostIsHighSpeed) { //USB 1.1
 352   4                                      //      while (USB_REG[0xA1]&0x01);                                                             //Bulk-In Tx done
 353   4                                      //      USB_REG[0x10] = 0x00;                                                   //BulkInEn nonauto turn-on
 354   4                                      //}
 355   4                              }                       
 356   3                              else {
 357   4                                      while(USB_REG[0xA1]&0x01){
 358   5                                              if(!(GLOBAL_REG[0xD1]&0x02)){// 081023 Jay add                          
 359   6                                                      gbt_USB_Detected = 0;
 360   6                                                      goto USB_Plug_Out_R;
 361   6                                                      break;
 362   6                                              }                       
 363   5                                      }
 364   4                                      USB_REG[0xC2] &= 0xFE;  
C51 COMPILER V9.00   FLASH_READ                                                            07/10/2012 15:51:48 PAGE 7   

 365   4                                      USB_REG[0x10] = 0x01;                                                   //BulkInEn nonauto turn-on
 366   4                                      USB_REG[0xE9] = 0x10;                                                   //Clear Bulk-In(EP1) Buffer.
 367   4                                      USB_REG[0x2b] = 0x00;
 368   4                                      USB_REG[0x18] = 0x04;                                                   //1024Byte
 369   4                                      USB_REG[0x17] = 0x00;
 370   4                                      USB_REG[0xA2] = 0x01;                                                   //Allow Bulk-In Tx.                             
 371   4                                      CPU_REG[0x15] = USB_BUF_Bank0_HIGH;                             // 080104 joyce add
 372   4                                      //if(!gbt_USBHostIsHighSpeed){
 373   4                                      //      while (USB_REG[0xA2]&0x01);                                                     //Bulk-In Tx done
 374   4                                      //      USB_REG[0x10] = 0x00;                                                   //BulkInEn nonauto turn-on
 375   4                                      //}                     
 376   4                              }
 377   3                              if(gc_HInAddr==(NAND_INFO.cINADDRMAX-2)){       
 378   4                                      FLASH_REG[0x1A] =0x11;
 379   4                              }
 380   3                              else{                           
 381   4                                      FLASH_REG[0x1A] =0x10;                  }
 382   3                              if(tc_BigSector_Cnt==1){// last dma                             
 383   4                                      FLASH_REG[0x1A] =0x11;
 384   4                              }               
 385   3                              if(tbt_DoSendCommand){// Need to  chk ready
 386   4                                      tbt_DoSendCommand=0;
 387   4                                      CHK_Flash_Ready();
 388   4                              }
 389   3                              if(!gbt_OddTemp){// chk usb done
 390   4                                      while (USB_REG[0xA1]&0x01){
 391   5                                              if(!(GLOBAL_REG[0xD1]&0x02)){// 081023 Jay add                          
 392   6                                                      gbt_USB_Detected = 0;
 393   6                                                      goto USB_Plug_Out_R;
 394   6                                                      break;
 395   6                                              }                                                                                       //Bulk-In Tx done
 396   5                                      }                               
 397   4                                      USB_REG[0x10] = 0x00;                                                   //BulkInEn nonauto turn-on
 398   4                              }
 399   3                              else{
 400   4                                      while (USB_REG[0xA2]&0x01){                                                     //Bulk-In Tx done
 401   5                                              if(!(GLOBAL_REG[0xD1]&0x02)){// 081023 Jay add                          
 402   6                                                      gbt_USB_Detected = 0;
 403   6                                                      goto USB_Plug_Out_R;
 404   6                                                      break;
 405   6                                              }       
 406   5                                      }
 407   4                                      USB_REG[0x10] = 0x00;                                                   //BulkInEn nonauto turn-on
 408   4                              }                       
 409   3                              gbt_OddTemp=!gbt_OddTemp;
 410   3                              FLASH_REG[0xA1]  = 0x01;                                                                //Start Decode RS-Code
 411   3                              Trigger_Data_Transfer();
 412   3                              gc_HInAddr+=2;          
 413   3                              tc_BigSector_Cnt--;
 414   3                              TotalXferPageNum.WD-=2;
 415   3                              
 416   3                      }               
 417   2                      CHK_Data_Transfer_Done();                       
 418   2                      DMA_REG[0xC0] = 0x00;                                                                           //Clear DMA Xfer done interrupt
 419   2                      CHK_ECC_Done();         
 420   2                      #if  EN_RECOVER_BLOCK
 421   2                      if(gc_ECC_Error_Bit>gc_MAX_ERR_BIT_NUM){                        
 422   3                      
 423   3                              tc_OxFF_Cnt=0;
 424   3                              for(tc_i=0;tc_i<4;tc_i++){
 425   4                                      if(FLASH_REG[0x60+tc_i] ==0xFF){
 426   5                                              tc_OxFF_Cnt++;
C51 COMPILER V9.00   FLASH_READ                                                            07/10/2012 15:51:48 PAGE 8   

 427   5                                      }
 428   4                              }
 429   3                              if(tc_OxFF_Cnt<=2){
 430   4                                      //dbprintf("\n 3 ERR_bit:%bx ,T:%bx ",gc_ECC_Error_Bit,tc_Recover_Type);
 431   4                                      //dbprintf("\n BLK:%x,Page:%x,InAddr:%bx",FDBP.wFBlock,FDBP.wFPage,gc_HInAddr);
 432   4                                      tc_Need_Recover |= tc_Recover_Type;
 433   4                                      if(gc_ECC_Error_Bit ==25){
 434   5                                              tc_Need_Recover |=0x02;
 435   5                                      }
 436   4                                      else{
 437   5                                              tc_Need_Recover |=0x01;
 438   5                                      }
 439   4                              }               
 440   3                      }
 441   2                      #endif 
 442   2                      if(!gbt_OddTemp) {      // transfer data to usb                         
 443   3                              while (USB_REG[0xA2]&0x01){
 444   4                                      if(!(GLOBAL_REG[0xD1]&0x02)){// 081023 Jay add                          
 445   5                                              gbt_USB_Detected = 0;
 446   5                                              goto USB_Plug_Out_R;
 447   5                                              break;
 448   5                                      }
 449   4                                              
 450   4                              }               
 451   3                              USB_REG[0xC2] &= 0xEF;                                          //Bulk-In Tx done
 452   3                              USB_REG[0x10] = 0x01;                                                   //BulkInEn nonauto turn-on
 453   3                              USB_REG[0xE9] = 0x01;                                                   //Clear Bulk-In(EP1) Buffer.
 454   3                              USB_REG[0x2B] = 0x00;
 455   3                              USB_REG[0x16] = 0x04;   
 456   3                              USB_REG[0x15] = 0x00;
 457   3                              USB_REG[0xA1] = 0x01;                                                   //Allow Bulk-In Tx.
 458   3                              while (USB_REG[0xA1]&0x01){                                                             //Bulk-In Tx done
 459   4                                      if(!(GLOBAL_REG[0xD1]&0x02)){// 081023 Jay add                          
 460   5                                              gbt_USB_Detected = 0;
 461   5                                              goto USB_Plug_Out_R;
 462   5                                              break;
 463   5                                      }
 464   4                              }                       
 465   3                              USB_REG[0x10] = 0x00;                                                   //BulkInEn nonauto turn-on
 466   3                                      
 467   3                      }                       
 468   2                      else {
 469   3                              
 470   3                              while (USB_REG[0xA1]&0x01){
 471   4                                      if(!(GLOBAL_REG[0xD1]&0x02)){// 081023 Jay add                          
 472   5                                              gbt_USB_Detected = 0;
 473   5                                              goto USB_Plug_Out_R;
 474   5                                              break;
 475   5                                      }
 476   4                              }                       
 477   3                              
 478   3                              USB_REG[0xC2] &= 0xFE;  
 479   3                              USB_REG[0x10] = 0x01;                                                   //BulkInEn nonauto turn-on
 480   3                              USB_REG[0xE9] = 0x10;                                                   //Clear Bulk-In(EP1) Buffer.
 481   3                              USB_REG[0x2b] = 0x00;
 482   3                              USB_REG[0x18] = 0x04;                                                   //512Byte
 483   3                              USB_REG[0x17] = 0x00;
 484   3                              USB_REG[0xA2] = 0x01;                                                   //Allow Bulk-In Tx.
 485   3                              while (USB_REG[0xA2]&0x01){                                                     //Bulk-In Tx done
 486   4                                      if(!(GLOBAL_REG[0xD1]&0x02)){// 081023 Jay add                          
 487   5                                              gbt_USB_Detected = 0;
 488   5                                              goto USB_Plug_Out_R;
C51 COMPILER V9.00   FLASH_READ                                                            07/10/2012 15:51:48 PAGE 9   

 489   5                                              break;
 490   5                                      }
 491   4                              }                       
 492   3                              USB_REG[0x10] = 0x00;                                                   //BulkInEn nonauto turn-on
 493   3                      }
 494   2                      
 495   2              }
 496   1              //-------- 之後都是 以512 為單位------------//  
 497   1              if(HPage.WD==H_INFO.wHBLOCKPAGE){               
 498   2                      return ;
 499   2              }       
 500   1              if(tc_SmallSector_Cnt){
 501   2                      if(gc_HInAddr==NAND_INFO.cINADDRMAX){
 502   3                              gc_HInAddr=0;
 503   3                              HPage.WD++;
 504   3                              NAND_SBlock_SPage_To_FDBP();                            
 505   3                      }
 506   2                      if(HPage.WD==H_INFO.wHBLOCKPAGE){               
 507   3                              return;
 508   3                      }
 509   2                      else{// chk page status
 510   3                              if(tbt_Extend_Found){
 511   4                                      if(HPage.WD>= tw_TotalESPage){
 512   5                                              APort_FBlock[0] = APort_LBlock[0];
 513   5                                              gw_TargetPage = HPage.WD;
 514   5                                              tc_Recover_Type=0x10;
 515   5                                      }       
 516   4                                      else{
 517   5                                              if(gc_SBlock<gc_Q1_SBlock){
 518   6                                                      APort_FBlock[0] =APort_LBlock[0];
 519   6                                                      tc_Recover_Type =0x10;
 520   6                                              }
 521   5                                              else{
 522   6                                                      APort_FBlock[0] = APort_EBlock[0];
 523   6                                                      tc_Recover_Type =0x20;
 524   6                                              }
 525   5                                              gw_TargetPage = HPage.WD;                       
 526   5                                      }
 527   4                              }
 528   3                              else if(tbt_Random_Found){                      
 529   4                                      if(CHK_RandomPage_Exist(tc_Random_Count,HPage.WD)){
 530   5                                              tc_Offset =tc_Random_Count*MAX_RANDOM_HPAGE;
 531   5                                              gw_TargetPage =Mapping_Table[R_PAGE+tc_Offset+gc_NowIndex];
 532   5                                              APort_FBlock[0] = APort_RBlock[0];
 533   5                                              tc_Recover_Type =0x40;
 534   5                                      }
 535   4                                      else{                                           
 536   5                                              APort_FBlock[0] = APort_LBlock[0];
 537   5                                              gw_TargetPage = HPage.WD;
 538   5                                              tc_Recover_Type =0x10;
 539   5                                      }
 540   4                              }
 541   3                              else{
 542   4                                      APort_FBlock[0] = APort_LBlock[0];
 543   4                                      tc_Recover_Type =0x10;
 544   4                                      gw_TargetPage = HPage.WD;
 545   4                              }       
 546   3                      }
 547   2                      tc_RealInAddr = gc_HInAddr&0xFE;
 548   2                      NAND_SBlock_SPage_To_FDBP();    
 549   2                      FDBP.cFInAddr =tc_RealInAddr;
 550   2                      Device_Read_SRAM_Index.BY[0] = USB_BUF_Bank0_HIGH;                      // 080104 joyce add
C51 COMPILER V9.00   FLASH_READ                                                            07/10/2012 15:51:48 PAGE 10  

 551   2                      Device_Read_SRAM_Index.BY[1] = 0x00;
 552   2                      Flash_ReadPage();
 553   2                      #if  EN_RECOVER_BLOCK
 554   2                      if(gc_ECC_Error_Bit>gc_MAX_ERR_BIT_NUM){                        
 555   3                              
 556   3                              tc_OxFF_Cnt=0;
 557   3                              for(tc_i=0;tc_i<4;tc_i++){
 558   4                                      if(FLASH_REG[0x60+tc_i] ==0xFF){
 559   5                                              tc_OxFF_Cnt++;
 560   5                                      }
 561   4                              }
 562   3                              if(tc_OxFF_Cnt<=2){
 563   4                                      //dbprintf("\n 4 ERR_bit:%bx ,T:%bx ",gc_ECC_Error_Bit,tc_Recover_Type);
 564   4                                      //dbprintf("\n BLK:%x,Page:%x,InAddr:%bx",FDBP.wFBlock,FDBP.wFPage,gc_HInAddr);
 565   4                                      tc_Need_Recover |= tc_Recover_Type;
 566   4                                      if(gc_ECC_Error_Bit ==25){
 567   5                                              tc_Need_Recover |=0x02;
 568   5                                      }
 569   4                                      else{
 570   5                                              tc_Need_Recover |=0x01;
 571   5                                      }
 572   4                              }               
 573   3                      }
 574   2                      #endif 
 575   2                      USB_REG[0xC2] &= 0xEF;                                          //Bulk-In Tx done
 576   2                      USB_REG[0x10] = 0x01;                                                   //BulkInEn nonauto turn-on
 577   2                      USB_REG[0xE9] = 0x01;                                                   //Clear Bulk-In(EP1) Buffer.
 578   2                      USB_REG[0x2B] = 0x00;
 579   2                      USB_REG[0x16] = 0x02;   
 580   2                      USB_REG[0x15] = 0x00;
 581   2                      USB_REG[0xA1] = 0x01;                                                   //Allow Bulk-In Tx.
 582   2                      while (USB_REG[0xA1]&0x01){
 583   3                              if(!(GLOBAL_REG[0xD1]&0x02)){// 081023 Jay add                          
 584   4                                      gbt_USB_Detected = 0;
 585   4                                      goto USB_Plug_Out_R;
 586   4                                      break;
 587   4                              }
 588   3                      }                                                                                       //Bulk-In Tx done
 589   2                      USB_REG[0x10] = 0x00;                                                   //BulkInEn nonauto turn-on
 590   2                      TotalXferPageNum.WD--;  
 591   2              }
 592   1              #if  EN_RECOVER_BLOCK
 593   1      
 594   1              if(tc_Need_Recover&0x10){
 595   2      //              dbprintf("\n Recover Block H:%x RN:%bx",HBlock.WD,tc_Need_Recover);
 596   2                      //P3_0=0;P3_0=1;
 597   2                      NAND_Recover_Block(HBlock.WD,tc_Need_Recover);
 598   2                      BMT_KEY[gw_NowBMTPoint]=1; 
 599   2              }       
 600   1              #endif 
 601   1      USB_Plug_Out_R://081113 Jay add
 602   1              if(!gbt_USB_Detected){          
 603   2                      DMA_REG[0xC0] =0x00;
 604   2                      DEVICE_REG[0x00]|=0x10;                                                                         // 將Flash module reset
 605   2                      DEVICE_REG[0x00]&=0xEF;
 606   2                      DEVICE_REG[0x00]= 0x01;
 607   2                      FLASH_REG[0x06] = 0xFF;
 608   2                      FLASH_REG[0x04] = 0x08;
 609   2                      CHK_Flash_Ready();
 610   2                      FLASH_REG[0x03] = 0x01; 
 611   2              }               
 612   1      
C51 COMPILER V9.00   FLASH_READ                                                            07/10/2012 15:51:48 PAGE 11  

 613   1      }
 614          
 615          /*********************************************************************************
 616          * NAME:                   void NAND_E_D_ReadSector(tc_Extend_Count);
 617          * DESCRIPTION:
 618          *********************************************************************************/
 619          void NAND_E_D_ReadSector(U8 tc_Extend_Count){
 620   1              data    bit             tbt_DoSendCommand=0;
 621   1              data    bit             tbt_Find_D_SBlock;
 622   1              xdata   U8    tc_Buf_InAddr;
 623   1          data        U8    tc_RealInAddr;  
 624   1              data    U8    tc_BigSector_Cnt,tc_SmallSector_Cnt;
 625   1              data    U16   tw_TotalESPage;
 626   1              NAND_HPage_To_SBlock_SPage();
 627   1              gc_E_SBlock = Mapping_Table[Q2_INX+tc_Extend_Count]>>8;
 628   1              gc_E_SPage  = (U8)Mapping_Table[ Q2_INX+tc_Extend_Count];               
 629   1              gc_Q1_SBlock =  Mapping_Table[Q1_INX+tc_Extend_Count]>>8;
 630   1              tw_TotalESPage = ((U16)gc_E_SBlock*H_INFO.cSMALLPAGE_NUM)+gc_E_SPage;
 631   1              if(CHK_DSBlock_Exist_Or_New(tc_Extend_Count,gc_SBlock,0)){//no dummy
 632   2                      
 633   2                      tbt_Find_D_SBlock=0;
 634   2                      if(gc_SBlock<gc_Q1_SBlock){                     
 635   3                              APort_FBlock[0] =APort_LBlock[0];
 636   3                      }
 637   2                      else{                   
 638   3                              APort_FBlock[0] = APort_EBlock[0];
 639   3                      }                               
 640   2                      gw_TargetPage = ((U16)gc_SBlock*H_INFO.cSMALLPAGE_NUM)+gc_SPage;        
 641   2                      
 642   2              }
 643   1              else{
 644   2                      tbt_Find_D_SBlock=1;
 645   2                      if((gc_SPage>=SQTable.BY[0])&&(gc_SPage<SQTable.BY[1])){
 646   3                              
 647   3                              APort_FBlock[0] =APort_DBlock[0];                               
 648   3                              gw_TargetPage = ((U16)gc_D_SBlock*H_INFO.cSMALLPAGE_NUM)+(gc_SPage-SQTable.BY[0]);      
 649   3                      }       
 650   2                      else{                   
 651   3                              //APort_FBlock[0] =APort_EBlock[0];                             
 652   3                              if(gc_SBlock<gc_Q1_SBlock){// 0524 Jay add                      
 653   4                                      APort_FBlock[0] =APort_LBlock[0];
 654   4                              }
 655   3                              else{                   
 656   4                              APort_FBlock[0] =APort_EBlock[0];                               
 657   4                              }                       
 658   3                              gw_TargetPage = ((U16)gc_SBlock*H_INFO.cSMALLPAGE_NUM)+gc_SPage;
 659   3                      }
 660   2              }       
 661   1              tc_Buf_InAddr =gc_HInAddr&0x01;
 662   1              
 663   1              if(tc_Buf_InAddr){
 664   2                      tc_RealInAddr = gc_HInAddr&0xFE;
 665   2                      NAND_SBlock_SPage_To_FDBP();    
 666   2                      FDBP.cFInAddr =tc_RealInAddr;
 667   2                      Device_Read_SRAM_Index.BY[0] = USB_BUF_Bank0_HIGH;                      // 080104 joyce add
 668   2                      Device_Read_SRAM_Index.BY[1] = 0x00;
 669   2                      Flash_ReadPage();
 670   2                      USB_REG[0xC2] &= 0xEF;                                          //Bulk-In Tx done
 671   2                      USB_REG[0x10] = 0x01;                                                   //BulkInEn nonauto turn-on
 672   2                      USB_REG[0xE9] = 0x01;                                                   //Clear Bulk-In(EP1) Buffer.
 673   2                      USB_REG[0x2B] = 0x01;
 674   2                      USB_REG[0x16] = 0x02;   
C51 COMPILER V9.00   FLASH_READ                                                            07/10/2012 15:51:48 PAGE 12  

 675   2                      USB_REG[0x15] = 0x00;
 676   2                      USB_REG[0xA1] = 0x01;                                                   //Allow Bulk-In Tx.
 677   2                      while (USB_REG[0xA1]&0x01){                                                             //Bulk-In Tx done
 678   3                              if(!(GLOBAL_REG[0xD1]&0x02)){// 081023 Jay add                          
 679   4                                      gbt_USB_Detected = 0;
 680   4                                      return;
 681   4                              }                       
 682   3                      }               
 683   2                      USB_REG[0x10] = 0x00;                                                   //BulkInEn nonauto turn-on
 684   2                      TotalXferPageNum.WD--;  
 685   2                      gc_HInAddr++;
 686   2                      if(gc_HInAddr==NAND_INFO.cINADDRMAX){
 687   3                              tbt_DoSendCommand=1;
 688   3                              gc_HInAddr=0;
 689   3                              HPage.WD++;
 690   3                              gc_SPage++;
 691   3                              if(gc_SPage==H_INFO.cSMALLPAGE_NUM){
 692   4                                      gc_SPage=0;
 693   4                                      gc_SBlock++;
 694   4                                      if(CHK_DSBlock_Exist_Or_New(tc_Extend_Count,gc_SBlock,0)){// no dummy   
 695   5                                              tbt_Find_D_SBlock=0;
 696   5                                      }
 697   4                                      else{
 698   5                                              tbt_Find_D_SBlock=1;
 699   5                                      }
 700   4                              }                       
 701   3                      }
 702   2                      if(HPage.WD==tw_TotalESPage){
 703   3                              return;
 704   3                      }
 705   2                      else{
 706   3                              if(tbt_Find_D_SBlock){// have dummy     
 707   4                                      if((gc_SPage>=SQTable.BY[0])&&(gc_SPage<SQTable.BY[1])){
 708   5                                              APort_FBlock[0] =APort_DBlock[0];                               
 709   5                                              gw_TargetPage = ((U16)gc_D_SBlock*H_INFO.cSMALLPAGE_NUM)+(gc_SPage-SQTable.BY[0]);      
 710   5                                      }       
 711   4                                      else{
 712   5                                              //APort_FBlock[0] =APort_EBlock[0];                             
 713   5                                              if(gc_SBlock<gc_Q1_SBlock){// 0524 Jay add                      
 714   6                                                      APort_FBlock[0] =APort_LBlock[0];
 715   6                                              }
 716   5                                              else{                   
 717   6                                              APort_FBlock[0] =APort_EBlock[0];                               
 718   6                                              }                       
 719   5                                              gw_TargetPage = ((U16)gc_SBlock*H_INFO.cSMALLPAGE_NUM)+gc_SPage;
 720   5                                      }
 721   4                              }
 722   3                              else{
 723   4                                      if(gc_SBlock<gc_Q1_SBlock){                     
 724   5                                              APort_FBlock[0] =APort_LBlock[0];
 725   5                                      }
 726   4                                      else{                   
 727   5                                              APort_FBlock[0] = APort_EBlock[0];
 728   5                                      }                                               
 729   4                                      gw_TargetPage = ((U16)gc_SBlock*H_INFO.cSMALLPAGE_NUM)+gc_SPage;
 730   4                              }               
 731   3                                      
 732   3                      }
 733   2              
 734   2              }
 735   1              //-------- 之後都是 以1024 為單位------------//
 736   1              tc_SmallSector_Cnt= TotalXferPageNum.WD&0x01;
C51 COMPILER V9.00   FLASH_READ                                                            07/10/2012 15:51:48 PAGE 13  

 737   1              tc_BigSector_Cnt= TotalXferPageNum.WD>>1;       
 738   1              if(tc_BigSector_Cnt){
 739   2                      
 740   2                      gbt_OddTemp =0;
 741   2                      gc_Flash_CMD1 = 0x00;    
 742   2                      gc_Flash_CMD2 = 0x30;    
 743   2                      gc_Flash_CMD_Type = 0x01;                                                                       // Read -->CMD1+Addr+CMD2
 744   2                      NAND_SBlock_SPage_To_FDBP();    
 745   2                      FDBP.cFInAddr = gc_HInAddr;             
 746   2                      TRIGGER_FLASH_CMD_COL_ADDR_CMD();       
 747   2                      ENA_ECC_Decode();
 748   2                      Device_Xfer_DataLength.WD = 0x03FF; 
 749   2                      Device_Read_SRAM_Index.BY[0] = USB_BUF_Bank0_HIGH;                      // 080104 joyce add
 750   2                      Device_Read_SRAM_Index.BY[1] = 0x00;
 751   2                      SET_DEVICE_READ();      
 752   2                      if(gc_HInAddr==(NAND_INFO.cINADDRMAX-2)){
 753   3                              FLASH_REG[0x1A] =0x11;
 754   3                      }
 755   2                      else{
 756   3                              FLASH_REG[0x1A] =0x10;
 757   3                      }
 758   2                      if(tc_BigSector_Cnt==1){// last dma 
 759   3                              FLASH_REG[0x1A] =0x11;
 760   3                      }               
 761   2                      CHK_Flash_Ready();
 762   2                      FLASH_REG[0xA1]  = 0x01;                                                                //Start Decode RS-Code
 763   2                      CHK_Flash_Ready();
 764   2                      Trigger_Data_Transfer();
 765   2                      tc_BigSector_Cnt--;
 766   2                      TotalXferPageNum.WD-=2;
 767   2                      gc_HInAddr+=2;
 768   2                      tbt_DoSendCommand=0;    
 769   2                      while(tc_BigSector_Cnt){
 770   3                              if(gc_HInAddr==NAND_INFO.cINADDRMAX){
 771   4                                      tbt_DoSendCommand=1;
 772   4                                      gc_HInAddr=0;
 773   4                                      HPage.WD++;
 774   4                                      gc_SPage++;
 775   4                                      if(gc_SPage==H_INFO.cSMALLPAGE_NUM){
 776   5                                              gc_SPage=0;
 777   5                                              gc_SBlock++;
 778   5                                              if(CHK_DSBlock_Exist_Or_New(tc_Extend_Count,gc_SBlock,0)){// no dummy   
 779   6                                                      tbt_Find_D_SBlock=0;
 780   6                                              }
 781   5                                              else{
 782   6                                                      tbt_Find_D_SBlock=1;
 783   6                                              }
 784   5                                      }                       
 785   4                              }
 786   3                              if(HPage.WD==tw_TotalESPage){
 787   4                                      break;
 788   4                              }
 789   3                              else{
 790   4                                      if(tbt_Find_D_SBlock){// have dummy     
 791   5                                              if((gc_SPage>=SQTable.BY[0])&&(gc_SPage<SQTable.BY[1])){
 792   6                                                      APort_FBlock[0] =APort_DBlock[0];                               
 793   6                                                      gw_TargetPage = ((U16)gc_D_SBlock*H_INFO.cSMALLPAGE_NUM)+(gc_SPage-SQTable.BY[0]);      
 794   6                                              }       
 795   5                                              else{
 796   6                                                      //APort_FBlock[0] =APort_EBlock[0];                             
 797   6                                                      if(gc_SBlock<gc_Q1_SBlock){// 0524 Jay add                      
 798   7                                                              APort_FBlock[0] =APort_LBlock[0];
C51 COMPILER V9.00   FLASH_READ                                                            07/10/2012 15:51:48 PAGE 14  

 799   7                                                      }
 800   6                                                      else{                   
 801   7                                                      APort_FBlock[0] =APort_EBlock[0];                               
 802   7                                                      }                       
 803   6                                                      gw_TargetPage = ((U16)gc_SBlock*H_INFO.cSMALLPAGE_NUM)+gc_SPage;
 804   6                                              }
 805   5                                      }
 806   4                                      else{
 807   5                                              if(gc_SBlock<gc_Q1_SBlock){                     
 808   6                                                      APort_FBlock[0] =APort_LBlock[0];
 809   6                                              }
 810   5                                              else{                   
 811   6                                                      APort_FBlock[0] = APort_EBlock[0];
 812   6                                              }                                               
 813   5                                              gw_TargetPage = ((U16)gc_SBlock*H_INFO.cSMALLPAGE_NUM)+gc_SPage;
 814   5                                      }               
 815   4                                      
 816   4                              }
 817   3                              CHK_Data_Transfer_Done();                       
 818   3                              CHK_ECC_Done();
 819   3                              if(tbt_DoSendCommand){                  
 820   4                                      gc_Flash_CMD1 = 0x00;    
 821   4                                      gc_Flash_CMD2 = 0x30;    
 822   4                                      gc_Flash_CMD_Type = 0x01;                                                                       // Read -->CMD1+Addr+CMD2
 823   4                                      NAND_SBlock_SPage_To_FDBP();    
 824   4                                      TRIGGER_FLASH_CMD_COL_ADDR_CMD();                               
 825   4                              }       
 826   3                              if(!gbt_OddTemp) {      // transfer data to usb                                 
 827   4                                      while (USB_REG[0xA2]&0x01){
 828   5                                              if(!(GLOBAL_REG[0xD1]&0x02)){// 081023 Jay add                          
 829   6                                                      gbt_USB_Detected = 0;
 830   6                                                      return;
 831   6                                              }                       
 832   5                                      }                                       
 833   4                                      USB_REG[0xC2] &= 0xEF;                                          //Bulk-In Tx done
 834   4                                      USB_REG[0x10] = 0x01;                                                   //BulkInEn nonauto turn-on
 835   4                                      USB_REG[0xE9] = 0x01;                                                   //Clear Bulk-In(EP1) Buffer.
 836   4                                      USB_REG[0x2B] = 0x00;
 837   4                                      USB_REG[0x16] = 0x04;   
 838   4                                      USB_REG[0x15] = 0x00;
 839   4                                      USB_REG[0xA1] = 0x01;                                                   //Allow Bulk-In Tx.
 840   4                                      CPU_REG[0x15] = USB_BUF_Bank1_HIGH;                             // 080104 joyce add
 841   4                                      //if (!gbt_USBHostIsHighSpeed) { //USB 1.1
 842   4                                      //      while (USB_REG[0xA1]&0x01);                                                             //Bulk-In Tx done
 843   4                                      //      USB_REG[0x10] = 0x00;                                                   //BulkInEn nonauto turn-on
 844   4                                      //}
 845   4                              }                       
 846   3                              else {
 847   4                                      
 848   4                                      while(USB_REG[0xA1]&0x01){
 849   5                                              if(!(GLOBAL_REG[0xD1]&0x02)){// 081023 Jay add                          
 850   6                                                      gbt_USB_Detected = 0;
 851   6                                                      return;
 852   6                                              }                       
 853   5                                      }                               
 854   4                                      USB_REG[0xC2] &= 0xFE;  
 855   4                                      USB_REG[0x10] = 0x01;                                                   //BulkInEn nonauto turn-on
 856   4                                      USB_REG[0xE9] = 0x10;                                                   //Clear Bulk-In(EP1) Buffer.
 857   4                                      USB_REG[0x2b] = 0x00;
 858   4                                      USB_REG[0x18] = 0x04;                                                   //512Byte
 859   4                                      USB_REG[0x17] = 0x00;
 860   4                                      USB_REG[0xA2] = 0x01;                                                   //Allow Bulk-In Tx.                             
C51 COMPILER V9.00   FLASH_READ                                                            07/10/2012 15:51:48 PAGE 15  

 861   4                                      CPU_REG[0x15] = USB_BUF_Bank0_HIGH;                             // 080104 joyce add
 862   4                                      //if(!gbt_USBHostIsHighSpeed){
 863   4                                      //      while (USB_REG[0xA2]&0x01);                                                     //Bulk-In Tx done
 864   4                                      //      USB_REG[0x10] = 0x00;                                                   //BulkInEn nonauto turn-on
 865   4                                      //}                     
 866   4                              }
 867   3                              if(tbt_DoSendCommand){
 868   4                                      tbt_DoSendCommand=0;
 869   4                                      CHK_Flash_Ready();
 870   4                              }
 871   3                                      
 872   3                              if(!gbt_OddTemp){// chk usb done
 873   4                                      while (USB_REG[0xA1]&0x01){                                                             //Bulk-In Tx done
 874   5                                              if(!(GLOBAL_REG[0xD1]&0x02)){// 081023 Jay add                          
 875   6                                                      gbt_USB_Detected = 0;
 876   6                                                      return;
 877   6                                              }                       
 878   5                                      }                       
 879   4                                      USB_REG[0x10] = 0x00;                                                   //BulkInEn nonauto turn-on
 880   4                              }
 881   3                              else{
 882   4                                      while (USB_REG[0xA2]&0x01){                                                     //Bulk-In Tx done
 883   5                                              if(!(GLOBAL_REG[0xD1]&0x02)){// 081023 Jay add                          
 884   6                                                      gbt_USB_Detected = 0;
 885   6                                                      return;
 886   6                                              }                       
 887   5                                      }               
 888   4                                      
 889   4                                      USB_REG[0x10] = 0x00;                                                   //BulkInEn nonauto turn-on
 890   4                              }
 891   3                              if(gc_HInAddr==(NAND_INFO.cINADDRMAX-2)){       
 892   4                                      FLASH_REG[0x1A] =0x11;
 893   4                              }
 894   3                              else{                           
 895   4                                      FLASH_REG[0x1A] =0x10;                  }
 896   3                              if(tc_BigSector_Cnt==1){// last dma                             
 897   4                                      FLASH_REG[0x1A] =0x11;
 898   4                              }               
 899   3                              gbt_OddTemp=!gbt_OddTemp;
 900   3                              FLASH_REG[0xA1]  = 0x01;                                                                //Start Decode RS-Code
 901   3                              Trigger_Data_Transfer();                
 902   3                              tc_BigSector_Cnt--;
 903   3                              TotalXferPageNum.WD-=2;
 904   3                              gc_HInAddr+=2;
 905   3                              
 906   3                      }
 907   2                      
 908   2                      CHK_Data_Transfer_Done();                       
 909   2                      DMA_REG[0xC0] = 0x00;                                                                           //Clear DMA Xfer done interrupt
 910   2                      CHK_ECC_Done();         
 911   2                      if(!gbt_OddTemp) {      // transfer data to usb                         
 912   3                              while (USB_REG[0xA2]&0x01){
 913   4                                      if(!(GLOBAL_REG[0xD1]&0x02)){// 081023 Jay add                          
 914   5                                              gbt_USB_Detected = 0;
 915   5                                              return;
 916   5                                      }                       
 917   4                              }                                       
 918   3                              USB_REG[0xC2] &= 0xEF;                                          //Bulk-In Tx done
 919   3                              USB_REG[0x10] = 0x01;                                                   //BulkInEn nonauto turn-on
 920   3                              USB_REG[0xE9] = 0x01;                                                   //Clear Bulk-In(EP1) Buffer.
 921   3                              USB_REG[0x2B] = 0x00;
 922   3                              USB_REG[0x16] = 0x04;   
C51 COMPILER V9.00   FLASH_READ                                                            07/10/2012 15:51:48 PAGE 16  

 923   3                              USB_REG[0x15] = 0x00;
 924   3                              USB_REG[0xA1] = 0x01;                                                   //Allow Bulk-In Tx.
 925   3                              while (USB_REG[0xA1]&0x01){                                                             //Bulk-In Tx done
 926   4                                      if(!(GLOBAL_REG[0xD1]&0x02)){// 081023 Jay add                          
 927   5                                              gbt_USB_Detected = 0;
 928   5                                              return;
 929   5                                      }                       
 930   4                              }               
 931   3                              USB_REG[0x10] = 0x00;                                                   //BulkInEn nonauto turn-on
 932   3                                      
 933   3                      }                       
 934   2                      else {
 935   3                              
 936   3                              while (USB_REG[0xA1]&0x01){
 937   4                                      if(!(GLOBAL_REG[0xD1]&0x02)){// 081023 Jay add                          
 938   5                                              gbt_USB_Detected = 0;
 939   5                                              return;
 940   5                                      }                       
 941   4                              }               
 942   3                              USB_REG[0xC2] &= 0xFE;  
 943   3                              USB_REG[0x10] = 0x01;                                                   //BulkInEn nonauto turn-on
 944   3                              USB_REG[0xE9] = 0x10;                                                   //Clear Bulk-In(EP1) Buffer.
 945   3                              USB_REG[0x2b] = 0x00;
 946   3                              USB_REG[0x18] = 0x04;                                                   //512Byte
 947   3                              USB_REG[0x17] = 0x00;
 948   3                              USB_REG[0xA2] = 0x01;                                                   //Allow Bulk-In Tx.
 949   3                              while (USB_REG[0xA2]&0x01){                                                     //Bulk-In Tx done
 950   4                                      if(!(GLOBAL_REG[0xD1]&0x02)){// 081023 Jay add                          
 951   5                                              gbt_USB_Detected = 0;
 952   5                                              return;
 953   5                                      }                       
 954   4                              }                       
 955   3                              USB_REG[0x10] = 0x00;                                                   //BulkInEn nonauto turn-on
 956   3                      }
 957   2                      
 958   2              }
 959   1              if(HPage.WD==tw_TotalESPage){           
 960   2                      return ;
 961   2              }       
 962   1              if(tc_SmallSector_Cnt){
 963   2                      if(gc_HInAddr==NAND_INFO.cINADDRMAX){
 964   3                              tbt_DoSendCommand=1;
 965   3                              gc_HInAddr=0;
 966   3                              HPage.WD++;
 967   3                              gc_SPage++;
 968   3                              if(gc_SPage==H_INFO.cSMALLPAGE_NUM){
 969   4                                      gc_SPage=0;
 970   4                                      gc_SBlock++;
 971   4                                      if(CHK_DSBlock_Exist_Or_New(tc_Extend_Count,gc_SBlock,0)){// no dummy   
 972   5                                              tbt_Find_D_SBlock=0;
 973   5                                      }
 974   4                                      else{
 975   5                                              tbt_Find_D_SBlock=1;
 976   5                                      }
 977   4                              }                       
 978   3                      }
 979   2                      if(HPage.WD==tw_TotalESPage){
 980   3                              return;
 981   3                      }
 982   2                      else{
 983   3                              if(tbt_Find_D_SBlock){// have dummy     
 984   4                                      if((gc_SPage>=SQTable.BY[0])&&(gc_SPage<SQTable.BY[1])){
C51 COMPILER V9.00   FLASH_READ                                                            07/10/2012 15:51:48 PAGE 17  

 985   5                                              APort_FBlock[0] =APort_DBlock[0];                               
 986   5                                              gw_TargetPage = ((U16)gc_D_SBlock*H_INFO.cSMALLPAGE_NUM)+(gc_SPage-SQTable.BY[0]);      
 987   5                                      }       
 988   4                                      else{
 989   5                                              //APort_FBlock[0] =APort_EBlock[0];                             
 990   5                                              if(gc_SBlock<gc_Q1_SBlock){// 0524 Jay add                      
 991   6                                                      APort_FBlock[0] =APort_LBlock[0];
 992   6                                              }
 993   5                                              else{                   
 994   6                                              APort_FBlock[0] =APort_EBlock[0];                               
 995   6                                              }                       
 996   5                                              gw_TargetPage = ((U16)gc_SBlock*H_INFO.cSMALLPAGE_NUM)+gc_SPage;
 997   5                                      }
 998   4                              }
 999   3                              else{
1000   4                                      if(gc_SBlock<gc_Q1_SBlock){                     
1001   5                                              APort_FBlock[0] =APort_LBlock[0];
1002   5                                      }
1003   4                                      else{                   
1004   5                                              APort_FBlock[0] = APort_EBlock[0];
1005   5                                      }                                       
1006   4                                      gw_TargetPage = ((U16)gc_SBlock*H_INFO.cSMALLPAGE_NUM)+gc_SPage;
1007   4                              }               
1008   3                                      
1009   3                      }
1010   2                      tc_RealInAddr = gc_HInAddr&0xFE;
1011   2                      NAND_SBlock_SPage_To_FDBP();    
1012   2                      FDBP.cFInAddr =tc_RealInAddr;
1013   2                      Device_Read_SRAM_Index.BY[0] = USB_BUF_Bank0_HIGH;                      // 080104 joyce add
1014   2                      Device_Read_SRAM_Index.BY[1] = 0x00;
1015   2                      Flash_ReadPage();
1016   2                      USB_REG[0xC2] &= 0xEF;                                          //Bulk-In Tx done
1017   2                      USB_REG[0x10] = 0x01;                                                   //BulkInEn nonauto turn-on
1018   2                      USB_REG[0xE9] = 0x01;                                                   //Clear Bulk-In(EP1) Buffer.
1019   2                      USB_REG[0x2B] = 0x00;
1020   2                      USB_REG[0x16] = 0x02;   
1021   2                      USB_REG[0x15] = 0x00;
1022   2                      USB_REG[0xA1] = 0x01;                                                   //Allow Bulk-In Tx.
1023   2                      while (USB_REG[0xA1]&0x01){                                                             //Bulk-In Tx done
1024   3                              if(!(GLOBAL_REG[0xD1]&0x02)){// 081023 Jay add                          
1025   4                                      gbt_USB_Detected = 0;
1026   4                                      return;
1027   4                              }                       
1028   3                      }               
1029   2                      USB_REG[0x10] = 0x00;                                                   //BulkInEn nonauto turn-on
1030   2                      TotalXferPageNum.WD--;  
1031   2              }
1032   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   3160    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----       1
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----      17
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----       6
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
