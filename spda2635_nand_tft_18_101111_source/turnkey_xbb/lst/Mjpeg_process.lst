C51 COMPILER V9.00   MJPEG_PROCESS                                                         07/10/2012 15:51:59 PAGE 1   


C51 COMPILER V9.00, COMPILATION OF MODULE MJPEG_PROCESS
OBJECT MODULE PLACED IN .\obj\Mjpeg_process.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE MJpeg\Mjpeg_process.c LARGE OPTIMIZE(9,SIZE) BROWSE NOAREGS INCDIR(..\libso
                    -urce\header) DEFINE(K_ICTYPE=0x03) DEBUG OBJECTEXTEND PRINT(.\lst\Mjpeg_process.lst) OBJECT(.\obj\Mjpeg_process.obj)

line level    source

   1          #include <string.h>
   2          #include "SPDA2K.h"
   3          #include "dos\fs_struct.h"
   4          #include "dos\dosfile.h"
   5          #include "memalloc.h"
   6          #include "..\header\host_init.h"
   7          
   8          #include "..\LCM\model_define.h"
   9          #include "..\DSP\DSPPHYSIC.H"
  10          #include "..\DSP\dspuser.h"
  11          #include "..\LCM\LCM.h"
  12          #include "..\LCM\UI_icon.h"
  13          #include "..\LCM\TFT_display.h"         // TFT
  14          #include "..\LCM\TFT_config.h"          // TFT
  15          #include "..\header\variables.h"
  16          
  17          #define C_LCM_ROW_MAX 5//6  //20090331--sunzhk modify 100702
  18          
  19          xdata   U16     gw_IMG_DMA_Sz;
  20          xdata   U16     gw_IMG_DMABuf_ptr[4];
  21          extern  UBYTE   xdata EXT_NameC[];
  22          extern  void IR_Service_Process_Menu_1();
  23          extern  void IR_Service_Process();
  24          xdata U8 media_changetimes=1; 
  25          extern void MediaChange(void); 
  26          
  27          U8 MJPEG_DataIn(void);
  28          U8 MJPEG_DataOut(void);
  29          
  30          extern  U8              Image_Download(void);
  31          extern  U8              Image_PlayCmd(void);
  32          extern  U8              Music_ResumeCmd(void);
  33          extern  U8      USER_LogFile_ReadWrite(U8 tbt_ReadOrWrite);//use reserveblock for log
  34          extern  U8              X_Unicode2ISN(unsigned char *UnicodeArray, bit Convert);
  35          extern  void    InitDispVariable(void);
  36          extern  void    LCM_Display_Func1(void);
  37          extern  void    LCM_set_view(U8 view_type, U16 x_start, U16 y_start, U16 x_size, U16 y_size);
  38          extern  void    Image_MCU_LCM_DMA(U16 movesize, U16 tw_Src);
  39          extern  void    DecAndReload1sTimeOutCnt(void);
  40          extern  void    Music_VolumeUpCmd(void);
  41          extern  void    Music_VolumeDownCmd(void);
  42          extern  void    Music_SetVolumeCmd(void);
  43          extern  void    LCM_set_view(U8 view_type, U16 x_start, U16 y_start, U16 x_size, U16 y_size);
  44          extern  void    Image_WakeUp(U8 tc_Type);
  45          extern  void    FM_FREQ_CHG(U8 tc_UP_DOWN,U8 offset);  //20090331
  46          extern  xdata   System_Struct gs_System_State;
  47          extern  struct  str_scroll_t    gs_str_scroll_state;
  48          
  49          /* =============== MJPEG function =============== */
  50          //===================================================================================
  51          //
  52          U8 MJPEG_Download(void)
  53          {
  54   1              U8 tc_Cnt = 0;
C51 COMPILER V9.00   MJPEG_PROCESS                                                         07/10/2012 15:51:59 PAGE 2   

  55   1              
  56   1              if (DSP_Download(0x08, 0x00) != DSP_SUCCESS)
  57   1              {
  58   2                      return DSP_PLAY_COMMAND_ERROR;
  59   2              }
  60   1              
  61   1      //      dbprintf("MJPEG_Download\n");
  62   1              
  63   1              for (tc_Cnt=0; tc_Cnt<10; ++tc_Cnt) 
  64   1              {
  65   2                      if (DSP_PlayInit() == DSP_SUCCESS)
  66   2                      {
  67   3                              break;
  68   3                      }
  69   2      //              dbprintf("Retry to start DSP\n");
  70   2      
  71   2                      if (tc_Cnt < 5) 
  72   2                      {
  73   3                              GLOBAL_REG[0x02] &= 0xFE;       // Enable DSP Run Normal Mode
  74   3                      }
  75   2                      else
  76   2                      {
  77   3      //                      dbprintf("Hardware Reset DSP!!!!!\n");
  78   3                              GLOBAL_REG[0x02] |= 0x01;       // DSP reset
  79   3                              GLOBAL_REG[0x02] &= 0xFE;       // Enable DSP Run Normal Mode
  80   3                      }
  81   2              }
  82   1      
  83   1              if (tc_Cnt == 10)
  84   1              {
  85   2                      return DSP_PLAY_COMMAND_ERROR;
  86   2              }
  87   1      
  88   1              return DSP_SUCCESS;
  89   1      }
  90          
  91          U8 MJPEG_PlayCmd(void)
  92          {
  93   1              // sent "PLAY" command to DSP
  94   1              if (L2_DSP_SendCommandSet(DCMD_Play) != DCMD_Play)
  95   1              {
  96   2                      return DSP_PLAY_COMMAND_ERROR;
  97   2              }
  98   1      //      dbprintf("Play Cmd Ok~\n");
  99   1      
 100   1              gs_DSP_GLOBAL_RAM.sc_DM_Index = 0;      // reset bitstream buffer index
 101   1              gs_DSP_GLOBAL_RAM.sc_Pixel_Index = 0;   // reset output pixel buffer index
 102   1              gs_DSP_GLOBAL_RAM.sc_End_Of_File = 0;   // reset file end flag
 103   1              
 104   1              // JPEG file open
 105   1              if (DOS_Open_File_r(C_OtherFHandle, C_Open_FoundFile, C_NullFileName))
 106   1              {
 107   2                      return DSP_PLAY_COMMAND_ERROR;
 108   2              }
 109   1      
 110   1              return DSP_SUCCESS;
 111   1      }
 112          
 113          
 114          void MJPEG_MCU_DM_DMA(U8 BufferIndex)
 115          {
 116   1              U8  tc_DSPAddr_High;
C51 COMPILER V9.00   MJPEG_PROCESS                                                         07/10/2012 15:51:59 PAGE 3   

 117   1              U16     tw_DSP_Word_Align;
 118   1              /*  _______________________________
 119   1               * |___|___________|_______________|
 120   1               *  0 1 2 3 4 5 6 7 0 1 2 3 4 5 6 7 
 121   1               *  msb 2-bit offset, 14-bit DSP DM address
 122   1           */
 123   1              code U16 MJPEG_DSP_Addr_Table[3] = 
 124   1              {
 125   1                      0x2E00, 0xAEaa, 0x6F55
 126   1              };
 127   1      
 128   1              // ----- DMA Reset -----
 129   1              DMA_REG[0x04] = 0x09;
 130   1              DMA_REG[0x04] = 0x08;
 131   1              DMA_REG[0xC0] = 0x00;           // clear DMA complete
 132   1              DMA_REG[0x30] = 0x01;           // clear checksum
 133   1              
 134   1              // ----- DMA initial settings for DM transfer -----
 135   1              DSP_REG[0x16] = 0x00;           // Remain DSP mode.  When you do MCU -> DM, MCU will stop DSP automaticlly
 136   1              DMA_REG[0x01] = 0x50;           // DMA : SRAM --> DM
 137   1      
 138   1              // Define data size in DMA (assume 512 bytes)
 139   1              DMA_REG[0x02] = 0xFF;
 140   1              DMA_REG[0x03] = 0x01;
 141   1      
 142   1              // Destination
 143   1              DMA_REG[0x40] = 0x00;           // 24-bit DMA
 144   1              tw_DSP_Word_Align = MJPEG_DSP_Addr_Table[BufferIndex];
 145   1              tc_DSPAddr_High = *((U8 *)&tw_DSP_Word_Align);
 146   1              DSP_REG[0x1D] = tc_DSPAddr_High >> 6;
 147   1              DSP_REG[0x18] = tc_DSPAddr_High & 0x3F;
 148   1              DSP_REG[0x17] = *((U8 *)&tw_DSP_Word_Align + 1);
 149   1              CPU_REG[0x12] = 0;
 150   1              CPU_REG[0x13] = (U8)((U16)gc_PlayRecordDataBuf >> 8);
 151   1                      
 152   1              // ------------------------------------------------
 153   1              DMA_REG[0xB0] = 0x01;           // DMA Run (0xB3B0)
 154   1              // wait until DMA cycle is completed (0xB3C0)
 155   1              while(!(DMA_REG[0xC0]&0x01));
 156   1              DSP_REG[0xC0] = 0x00;
 157   1      }
 158          
 159          
 160          void MJPEG_DM_MCU_DMA(U8 BufferIndex, U16 movesize)//Jimi 090813
 161          {
 162   1              // ----- DMA Reset -----
 163   1              DMA_REG[0x04] = 0x09;
 164   1              DMA_REG[0x04] = 0x08;
 165   1              DMA_REG[0xC0] = 0x00;           // clear DMA complete
 166   1              DMA_REG[0x30] = 0x01;           // clear checksum               
 167   1              
 168   1              // ----- DMA initial settings for DM transfer -----             
 169   1              DSP_REG[0x16] = 0x00;           // Remain DSP mode.  When you do MCU -> DM, MCU will stop DSP automaticlly
 170   1              DMA_REG[0x01] = 0x05;           // DM -> SRAM
 171   1      
 172   1              //temp = movesize - 1;
 173   1              DMA_REG[0x02] = (U8)movesize - 1;
 174   1              DMA_REG[0x03] = (U8)((movesize - 1)>>8);
 175   1      
 176   1              // Source
 177   1              DMA_REG[0x40] = 0x01;           // 16-bit DMA
 178   1              DSP_REG[0x1D] = 0x01;
C51 COMPILER V9.00   MJPEG_PROCESS                                                         07/10/2012 15:51:59 PAGE 4   

 179   1      
 180   1              DSP_REG[0x17] = (U8)gw_IMG_DMABuf_ptr[BufferIndex];
 181   1              DSP_REG[0x18] = (U8)(gw_IMG_DMABuf_ptr[BufferIndex]>>8);                // bitstream start address : 0x2000
 182   1      
 183   1              // Destination
 184   1              CPU_REG[0x14] = 0;
 185   1              CPU_REG[0x15] = (U8)((U16)gc_MotionJpegOutBuf >> 8);
 186   1      
 187   1              // ------------------------------------------------
 188   1              DMA_REG[0xB0] = 0x01;           // DMA1 start
 189   1              // wait until DMA cycle is completed (0xB3C0)           
 190   1              while(!(DMA_REG[0xC0]&0x01));           
 191   1              DMA_REG[0xC0] = 0x00;
 192   1      }
 193          //===================================================================================
 194          //
 195          //===================================================================================
 196          void MJPEG_MCU_LCM_DMA(U16 movesize, U16 tw_Src)
 197          {
 198   1              XBYTE[0xB304] = 0x09; //reset DMA machine
 199   1              XBYTE[0xB304] = 0x08; 
 200   1              
 201   1              XBYTE[0xB423] = 3;              // set NAND /CS(bit 0), /WP(bit 1), ALE(bit 2), CLE(bit 3)
 202   1              
 203   1              FLASH_REG[0x00] = 0x00;
 204   1              DMA_REG[0x01] = 0x20;           //Sram to Flash
 205   1              
 206   1              // source
 207   1              CPU_REG[0x12] = (U8)(tw_Src);
 208   1              CPU_REG[0x13] = (U8)(tw_Src >> 8);
 209   1      
 210   1              // size
 211   1              DMA_REG[0x02] = (U8)(movesize-1);
 212   1              DMA_REG[0x03] = (U8)((movesize-1) >> 8);
 213   1              
 214   1              DMA_REG[0xC0] = 0x00;           //clear DMA completed flag
 215   1              LCM_A0_HI;
 216   1              LCM_CS_LO;
 217   1              DMA_REG[0xB0] = 0x01;           //trigger DMA
 218   1              while(DMA_REG[0xC0] == 0);
 219   1              DMA_REG[0xC0] = 0;
 220   1              LCM_CS_HI;
 221   1              LCM_A0_LO;
 222   1      
 223   1              FLASH_REG[0x00] = 0x01;
 224   1      }
 225          
 226          
 227          U8 MJPEG_DataIn(void)
 228          {
 229   1              U8 tc_DosRead_Status;
 230   1              
 231   1              if (!gs_DSP_GLOBAL_RAM.sc_End_Of_File)
 232   1              {
 233   2                      while(L2_DSP_Read_DMem16(DSP_EmptyBuffer) >= ONE_SECTOR)
 234   2                      {
 235   3                              tc_DosRead_Status=DOS_Read_File(C_OtherFHandle);
 236   3                                      
 237   3                              if (tc_DosRead_Status != DOS_END_OF_FILE)
 238   3                              {
 239   4                                      if(tc_DosRead_Status!=DOS_FALSE)
 240   4                                      {
C51 COMPILER V9.00   MJPEG_PROCESS                                                         07/10/2012 15:51:59 PAGE 5   

 241   5                                              MJPEG_MCU_DM_DMA(gs_DSP_GLOBAL_RAM.sc_DM_Index++);
 242   5                                              if (L2_DSP_SendCommandSet(DCMD_DatIn) != DCMD_DatIn)
 243   5                                              {
 244   6                                                      return DSP_DATAIN_COMMAND_ERROR;
 245   6                                              }
 246   5                                      
 247   5                                              if (gs_DSP_GLOBAL_RAM.sc_DM_Index >= 3) // JPEG bitstream buffer 0x3400~0x3600, sz = 1536 bytes
 248   5                                              {
 249   6                                                      gs_DSP_GLOBAL_RAM.sc_DM_Index = 0;
 250   6                                              }
 251   5                      
 252   5                                              gs_DSP_GLOBAL_RAM.sdw_sector_num--;
 253   5                                              if (gs_DSP_GLOBAL_RAM.sdw_sector_num == gs_DSP_GLOBAL_RAM.sw_sector_cnt)
 254   5                                              {
 255   6                                                      return DSP_DECODE_END;                          // DSP pre-stop to start ramp down
 256   6                                              }
 257   5                                      }
 258   4                                      else
 259   4                                      {
 260   5      //                                      dbprintf("DOS read state fail!\n");
 261   5                                              L2_DSP_Write_DMem16(0x3F44, 0x00FF);    // JPEG file end flag
 262   5                                              gs_DSP_GLOBAL_RAM.sc_End_Of_File = 1;
 263   5                                              return DSP_DATAIN_COMMAND_ERROR;
 264   5                                      }
 265   4                              }
 266   3                              else
 267   3                              {
 268   4                                      L2_DSP_Write_DMem16(0x3F44, 0x00FF);    // JPEG file end flag
 269   4                                      gs_DSP_GLOBAL_RAM.sc_End_Of_File = 1;
 270   4                                      break;
 271   4                              }                                       
 272   3                      }
 273   2              }
 274   1              return  DSP_SUCCESS;
 275   1      }
 276          
 277          
 278          U8 MJPEG_DataOut(void)
 279          {
 280   1              U16 RemData = L2_DSP_Read_DMem16(DSP_SOutBufRemData);
 281   1      
 282   1              if (RemData >= gw_IMG_DMA_Sz)
 283   1              {
 284   2                      do
 285   2                      {
 286   3                              MJPEG_DM_MCU_DMA(gs_DSP_GLOBAL_RAM.sc_Pixel_Index++, gw_IMG_DMA_Sz);
 287   3      
 288   3                              if (L2_DSP_SendCommandSet(DCMD_DatOut) != DCMD_DatOut)
 289   3                              {
 290   4                                      return DSP_DATAOUT_COMMAND_ERROR;
 291   4                              }
 292   3      
 293   3                              if (gs_DSP_GLOBAL_RAM.sc_Pixel_Index >= 4) //Jimi JPEG SW decoder output buffer from 0x3000~0x3A00
 294   3                              {
 295   4                                      gs_DSP_GLOBAL_RAM.sc_Pixel_Index = 0;
 296   4                              }
 297   3      
 298   3                              /* ==== Display on LCM: DMA Sram to LCM ==== */
 299   3                              MJPEG_MCU_LCM_DMA(gw_IMG_DMA_Sz, (U16)gc_MotionJpegOutBuf);
 300   3                      
 301   3                      }while(L2_DSP_Read_DMem16(DSP_SOutBufRemData) >= gw_IMG_DMA_Sz);
 302   2              
C51 COMPILER V9.00   MJPEG_PROCESS                                                         07/10/2012 15:51:59 PAGE 6   

 303   2              }
 304   1              else if (L2_DSP_Read_DMem16(DSP_DecodeStatus)&0x00C0)
 305   1              {
 306   2                      if (RemData > 0)
 307   2                      {
 308   3                              MJPEG_DM_MCU_DMA(gs_DSP_GLOBAL_RAM.sc_Pixel_Index, RemData);
 309   3                              if (L2_DSP_SendCommandSet(DCMD_DatOut) != DCMD_DatOut)
 310   3                              {
 311   4                                      return DSP_DATAOUT_COMMAND_ERROR;
 312   4                              }
 313   3      
 314   3                              /* ==== Display on LCM: DMA Sram to LCM ==== */
 315   3                              MJPEG_MCU_LCM_DMA(RemData, (U16)gc_MotionJpegOutBuf);
 316   3                      } 
 317   2                      return DSP_DECODE_END;
 318   2              }
 319   1              else if (L2_DSP_Read_DMem16(DSP_DecodeStatus)&0x0020)
 320   1              {
 321   2                      return DSP_USER_FILE_TYPE_ERROR;
 322   2              }
 323   1      
 324   1              return DSP_SUCCESS;
 325   1      }
 326          
 327          
 328          U8 MJPEG_PauseCmd(void) //Jimi 090406, in order to mute op gain.
 329          {       
 330   1              U16 TimeOUT;
 331   1              if (L2_DSP_SendCommandSet(DCMD_Pause) != DCMD_Pause)
 332   1              {
 333   2                      return DSP_PAUSE_COMMAND_ERROR;
 334   2              }
 335   1      
 336   1              if ((gs_System_State.c_Phase != TASK_PHASE_FASTFWD) && (gs_System_State.c_Phase != TASK_PHASE_FASTREV))
 337   1              {
 338   2                      TimeOUT = 0xffff;
 339   2                      do
 340   2                      {
 341   3                              TimeOUT--;
 342   3                              if (TimeOUT == 0)
 343   3                              {
 344   4                                      return DSP_RUNNING_STATUS1_ERROR;
 345   4                              }
 346   3      
 347   3                              if (MJPEG_DataIn() != DSP_SUCCESS)
 348   3                              {
 349   4                                      gc_PhaseInx = 5;        // End file process
 350   4                                      break;
 351   4                              }
 352   3      
 353   3                              if (MJPEG_DataOut() != DSP_SUCCESS )
 354   3                              {       // "file end" or "error format"
 355   4                                      gc_PhaseInx = 5;        // End file process
 356   4                                      break;
 357   4                              }
 358   3                      } while ((!L2_DSP_Read_DMem16(DSP_RampDownComplete))||(!(L2_DSP_Read_DMem16(DSP_RunningStatus)&0x0002)))
             -; //Jimi 090410
 359   2              }
 360   1              return DSP_SUCCESS;
 361   1      }
 362          
 363          
C51 COMPILER V9.00   MJPEG_PROCESS                                                         07/10/2012 15:51:59 PAGE 7   

 364          U8 MJPEG_StopCmd(UBYTE tc_FileHandle)
 365          {
 366   1              U8 tc_Ret, tc_state;
 367   1              U16 TimeOUT;
 368   1              
 369   1              tc_Ret = DSP_StopCmd();
 370   1      
 371   1              if (L2_DSP_Read_DMem16(DSP_DecodeStatus)&0x00C0)        // reset DSP_DecodeStatus
 372   1              {
 373   2                      L2_DSP_Write_DMem16(DSP_DecodeStatus, (L2_DSP_Read_DMem16(DSP_DecodeStatus)&0xFF3F));
 374   2              }
 375   1              
 376   1              TimeOUT = 0xffff;
 377   1              while (1)
 378   1              {
 379   2                      TimeOUT--;
 380   2                      if (TimeOUT == 0)
 381   2                      {
 382   3                              tc_Ret = DSP_DECODE_STATUS_TIMEOUT_ERROR;
 383   3                              break;
 384   3                      }
 385   2      
 386   2                      tc_state = MJPEG_DataIn();
 387   2                      if (tc_state == DSP_DATAIN_COMMAND_ERROR)
 388   2                      {
 389   3                              tc_Ret = tc_state;
 390   3                              break;
 391   3                      }
 392   2      
 393   2                      tc_state = MJPEG_DataOut();
 394   2      
 395   2                      if((SD_Detect==1) && (gc_CurrentCard==2))
 396   2                      {
 397   3                              tc_state=DSP_DECODE_END;        
 398   3                      }
 399   2                      if (tc_state == DSP_DATAOUT_COMMAND_ERROR)
 400   2                      {
 401   3                              tc_Ret = tc_state;
 402   3                              break;
 403   3                      }
 404   2                      else if (tc_state == DSP_USER_FILE_TYPE_ERROR)
 405   2                      {
 406   3                              break;
 407   3                      }
 408   2                      else if (tc_state == DSP_DECODE_END)
 409   2                      {
 410   3                              break;
 411   3                      }
 412   2              }
 413   1      
 414   1              // Close current file
 415   1              DOS_Close_File_r(tc_FileHandle);
 416   1      
 417   1              // wait for ramp down ok and Turn off DSP clock, ycc 081113
 418   1              {
 419   2                      U16 dbgTmp;                
 420   2              U16 TimeOUT = 0xFFFF;
 421   2                      do{
 422   3                              dbgTmp = L2_DSP_Read_DMem16(DSP_RestartFlag);  //read DSP 0x3F0B.0 ready status
 423   3                              TimeOUT --;             
 424   3                              if(TimeOUT==0)
 425   3                      {                       
C51 COMPILER V9.00   MJPEG_PROCESS                                                         07/10/2012 15:51:59 PAGE 8   

 426   4                              break; 
 427   4                              } 
 428   3                      }while(dbgTmp!=0);
 429   2              }
 430   1      
 431   1              if (L2_DSP_Read_DMem16(DSP_DecodeStatus)&0x00E0)        // reset DSP_DecodeStatus
 432   1              {
 433   2                      L2_DSP_Write_DMem16(DSP_DecodeStatus, (L2_DSP_Read_DMem16(DSP_DecodeStatus)&0xFF1F));
 434   2              }
 435   1      
 436   1              set_clock_mode(CLOCK_MODE_MP3);
 437   1      
 438   1              GLOBAL_REG[0x10] &= 0xFE;       //Turn off DSP clock for power saving
 439   1              return tc_Ret;
 440   1      }
 441          
 442          
 443          void mjpeg_idle()
 444          {
 445   1      
 446   1      }
 447          
 448          
 449          void mjpeg_init()
 450          {       
 451   1              U8        tc_media_changetimes=0; 
 452   1      
 453   1              if(gw_init_needed & SET_BIT5)
 454   1              {
 455   2                      gw_init_needed&=CLR_BIT5;
 456   2                      
 457   2                      if((gb_SD_Exist==1) && (gb_Host_Exist==1)) 
 458   2              { 
 459   3                 tc_media_changetimes=3; 
 460   3              } 
 461   2              else if((gb_SD_Exist==1) || (gb_Host_Exist==1)) 
 462   2              { 
 463   3                      tc_media_changetimes=2; 
 464   3              } 
 465   2              else   
 466   2              {                 
 467   3                       tc_media_changetimes=1; 
 468   3              }
 469   2                      gw_init_needed&=CLR_BIT5;
 470   2                      gs_System_State.c_Phase = TASK_PHASE_STOP;
 471   2                      gs_System_State.c_FileHandle=2;
 472   2                      //(JC)search music file overall by FDB, findout 1st one in ROOT
 473   2                      gs_File_FCB[gs_System_State.c_FileHandle].dw_FDB_StartCluster = gdw_DOS_RootDirClus;
 474   2                      EXT_NameC[0] = 2;
 475   2                      EXT_NameC[1] = 'S';
 476   2                      EXT_NameC[2] = 'C';
 477   2                      EXT_NameC[3] = 'V';
 478   2                      EXT_NameC[4] = 'A';
 479   2                      EXT_NameC[5] = 'M';
 480   2                      EXT_NameC[6] = 'V';
 481   2                      DOS_Search_File(C_File_All|C_Cnt_FileNo,C_OtherFileType,C_CmpExtName|C_Next);
 482   2      
 483   2                      if(DOS_Search_File(C_File_All|C_By_FDB, C_OtherFHandle, C_CmpExtName|C_Next))
 484   2                      {
 485   3                              if(media_changetimes==tc_media_changetimes) 
 486   3                              {
 487   4                                      
C51 COMPILER V9.00   MJPEG_PROCESS                                                         07/10/2012 15:51:59 PAGE 9   

 488   4                              gw_init_needed |= SET_BIT8;
 489   4                              gc_Task_Next=C_Task_Menu;
 490   4                                      gc_TaskMode_BkUp=C_Task_Mjpeg;
 491   4      
 492   4                              gc_PhaseInx = 0;
 493   4                              return;
 494   4                      }
 495   3                              else 
 496   3                      { 
 497   4                              MediaChange(); 
 498   4                              media_changetimes++; 
 499   4                              gc_PhaseInx=C_MjpegPause;       
 500   4              
 501   4                      }                                                                       
 502   3      
 503   3      
 504   3                      }
 505   2                      gc_Play_FileType=gs_File_FCB[gs_System_State.c_FileHandle].c_FileType;
 506   2                      set_clock_mode(CLOCK_MODE_MJPEG);
 507   2                      gc_PhaseInx=C_MjpegPause;
 508   2              }
 509   1      }
 510          
 511          
 512          void mjpeg_proc()
 513          {
 514   1              gc_KeyDet_Mask = 0;
 515   1              if (MJPEG_DataIn() != DSP_SUCCESS)
 516   1              {
 517   2                      gc_PhaseInx = 5;        // End file process
 518   2                      return;
 519   2              }
 520   1              if (MJPEG_DataOut() != DSP_SUCCESS )
 521   1              {       // "file end" or "error format"
 522   2                      gc_PhaseInx = 5;        // End file process
 523   2              }
 524   1      }
 525          
 526          
 527          void mjpeg_playpause()
 528          {
 529   1              U8  i;
 530   1              U16 k,tw_temp,tw_AudioBR,tw_VideoBR;
 531   1              U8  tc_second, tc_minute;
 532   1              U8  *p_data;
 533   1              U16 tw_hour;
 534   1      
 535   1              switch(gs_System_State.c_Phase)
 536   1              {
 537   2                      case TASK_PHASE_PLAYACT:
 538   2                              if (MJPEG_PauseCmd() != DSP_SUCCESS)
 539   2                              {
 540   3                              }
 541   2      
 542   2                              gs_System_State.c_Phase = TASK_PHASE_PAUSE;
 543   2                              for(i=0;i<2;i++)  //20090604 temp
 544   2                              {
 545   3                                      TFT_PAUSE();
 546   3                              }
 547   2                      break;
 548   2      
 549   2                      case TASK_PHASE_PAUSE:
C51 COMPILER V9.00   MJPEG_PROCESS                                                         07/10/2012 15:51:59 PAGE 10  

 550   2                      //Draw a black frame
 551   2                              for (k=0; k<512; k++)
 552   2                              {
 553   3                                      ((U32 *)gc_MotionJpegOutBuf)[k] = 0;
 554   3                              }
 555   2                              LCM_set_view(1, 0, 0, TFT_H_Size, TFT_V_Size); // horizontal view
 556   2      
 557   2                              for (i=0; i<20; i++)            //Jimi 090305
 558   2                              {
 559   3                                      MJPEG_MCU_LCM_DMA(2048, (U16)gc_MotionJpegOutBuf);
 560   3                              }
 561   2      
 562   2                              if (gc_Play_FileType == 0)
 563   2                              {       
 564   3                                      LCM_set_view(1, gw_x_start, gw_y_start, gw_width, gw_height); // horizontal view
 565   3                              }
 566   2                              else
 567   2                              {
 568   3                                      LCM_set_view(3, gw_x_start, gw_y_start, gw_width, gw_height); // horizontal view        
 569   3                              }
 570   2                              //------------------------------------------------------------------------------
 571   2                      //MJPEG resume cmd
 572   2                      if (Music_ResumeCmd() != DSP_SUCCESS)
 573   2                      {
 574   3      
 575   3                      }
 576   2                      gs_System_State.c_Phase = TASK_PHASE_PLAYACT;
 577   2                      break;
 578   2      
 579   2                      case TASK_PHASE_FASTFWD:
 580   2                      case TASK_PHASE_FASTREV:
 581   2                              gs_System_State.c_Phase=TASK_PHASE_PLAYACT;
 582   2                      break;
 583   2      
 584   2                      default:
 585   2                              for (k=0; k<512; k++)
 586   2                              {
 587   3                                      ((U32 *)gc_MotionJpegOutBuf)[k] = 0;
 588   3                              }
 589   2                              LCM_set_view(1, 0, 0, TFT_H_Size, TFT_V_Size); // horizontal view
 590   2      
 591   2                              for (i=0; i<20; i++)            //Jimi 090305
 592   2                              {
 593   3                                      MJPEG_MCU_LCM_DMA(2048, (U16)gc_MotionJpegOutBuf);
 594   3                              }
 595   2              
 596   2                              //DSP wake up
 597   2                              Image_WakeUp(DSP_CLK_CTRL | SRAM2T_CTRL);
 598   2                              //DSP download
 599   2                              if(MJPEG_Download())   // Load IM, PM
 600   2                              {
 601   3      //                              dbprintf("DSP IMPM download err\n");
 602   3                              }
 603   2      
 604   2                              //Set file type, 0: SCV, 1: JPEG, 2: BMP, 3: GIF, 4: AMV
 605   2                              if (gc_Play_FileType == 0)
 606   2                              {
 607   3                                      L2_DSP_Write_DMem16(0x3F2F, 0x0000);    // SCV file
 608   3                              }
 609   2                              else
 610   2                              {
 611   3                                      L2_DSP_Write_DMem16(0x3F2F, 0x0004);    // AMV file
C51 COMPILER V9.00   MJPEG_PROCESS                                                         07/10/2012 15:51:59 PAGE 11  

 612   3                              }
 613   2      
 614   2                              //initialize structure 'n variables
 615   2                              gs_DSP_GLOBAL_RAM.s_DSP_RAM.sc_RepeatMode = REPEAT_A;   // initial variables
 616   2      
 617   2                              //set volume;restore the volume value
 618   2                              if(gc_VolumeMute==0)
 619   2                              {
 620   3                              Music_SetVolumeCmd();
 621   3                              }
 622   2                              else
 623   2                              {
 624   3                                      L2_DSP_Write_DMem16(DSP_VolumeControl,0);//20090812 chiayen add VOL=0   
 625   3                              }
 626   2      
 627   2                              //Parsing motion jpeg header
 628   2                              if(DOS_Open_File_r(C_OtherFHandle, C_Open_FoundFile, C_NullFileName) || (gs_File_FCB[0].dw_File_TotalSi
             -ze==0)) 
 629   2                              {
 630   3                              }
 631   2                              if (gc_Play_FileType == 0)
 632   2                              {       // Parsing SCV header
 633   3                                      DOS_Read_File(C_OtherFHandle);
 634   3                                      gw_width = *((U16 *)(gc_PlayRecordDataBuf + 0x06));
 635   3                                      gw_height = *((U16 *)(gc_PlayRecordDataBuf + 0x08));
 636   3      
 637   3                                      gs_DSP_GLOBAL_RAM.sc_frame_rate  = gc_PlayRecordDataBuf[10];                    //Jimi 090410
 638   3                                      gw_TotalSec =   *((U16 *)(gc_PlayRecordDataBuf+19));//Jimi 090410, total seconds.
 639   3      
 640   3                                      gw_x_start = (TFT_H_Size - gw_width) >> 1;
 641   3                                      gw_y_start = (TFT_V_Size - gw_height) >> 1;
 642   3                                      LCM_set_view(1, gw_x_start, gw_y_start, gw_width, gw_height); // horizontal view in normal order
 643   3      
 644   3                                      tw_AudioBR = *((U16 *)(gc_PlayRecordDataBuf + 0x0B));
 645   3                                      tw_VideoBR = *((U16 *)(gc_PlayRecordDataBuf + 0x0D));
 646   3      
 647   3                                      gs_DSP_GLOBAL_RAM.sw_data_start = ONE_SECTOR;
 648   3                                      gs_DSP_GLOBAL_RAM.sw_kbyte_per_sec = (tw_AudioBR + tw_VideoBR)/8;    //Jimi 090410
 649   3                                      gs_DSP_GLOBAL_RAM.sw_sector_cnt = (U16)(((U32)(tw_AudioBR + tw_VideoBR) * 1000) >> (3 + 1 + 9));        // 0.
             -5 sec for ramp down
 650   3                                      gs_DSP_GLOBAL_RAM.sdw_sector_num = (gs_File_FCB[gs_System_State.c_FileHandle].dw_File_TotalSize - ONE_
             -SECTOR) >> 9;        // minus header size            
 651   3                              }
 652   2                              else
 653   2                              {       // Parsing AMV header
 654   3                                      DOS_Read_File(C_OtherFHandle);
 655   3                                      p_data = (U8 *)(gc_PlayRecordDataBuf + 0x40);
 656   3                                      gw_width = (U16)(*p_data++);
 657   3                                      gw_width |= ((U16)(*p_data) << 8);
 658   3                                      p_data += 3;
 659   3                                      gw_height = (U16)(*p_data++);
 660   3                                      gw_height |= ((U16)(*p_data) << 8);
 661   3      
 662   3                                      gs_DSP_GLOBAL_RAM.sc_frame_rate  = gc_PlayRecordDataBuf[72];    //Jimi 090410
 663   3      
 664   3                                      gw_x_start = (TFT_H_Size - gw_width) >> 1;
 665   3                                      gw_y_start = (TFT_V_Size - gw_height) >> 1;
 666   3                                      LCM_set_view(3, gw_x_start, gw_y_start, gw_width, gw_height); // horizontal view in BMP order
 667   3                              
 668   3                                      p_data += 0x0F;
 669   3                                      tc_second = *p_data++;
 670   3                                      tc_minute = *p_data++;
C51 COMPILER V9.00   MJPEG_PROCESS                                                         07/10/2012 15:51:59 PAGE 12  

 671   3                                      tw_hour = (U16)(*p_data++);
 672   3                                      tw_hour |= ((U16)(*p_data++) << 8);
 673   3      
 674   3                                      gw_TotalSec = (tw_hour * 3600) + (tc_minute * 60) + tc_second;
 675   3                                      gs_DSP_GLOBAL_RAM.sw_kbyte_per_sec = gs_File_FCB[gs_System_State.c_FileHandle].dw_File_TotalSize/1000/
             -gw_TotalSec;    //Jimi 090410
 676   3      
 677   3                                      gs_DSP_GLOBAL_RAM.sw_data_start = 0;
 678   3                                      gs_DSP_GLOBAL_RAM.sdw_sector_num = gs_File_FCB[gs_System_State.c_FileHandle].dw_File_TotalSize >> 9;
 679   3                                      gs_DSP_GLOBAL_RAM.sw_sector_cnt = (gs_DSP_GLOBAL_RAM.sdw_sector_num / gw_TotalSec) >> 1;        // 0.5 sec fo
             -r ramp down
 680   3                              }
 681   2      
 682   2                              gw_IMG_DMA_Sz = gw_width << 3;  //DSP_MJPEG_SOutBufDataSz = width *4(Lines) *2(Bytes/pixel)
 683   2                              L2_DSP_Write_DMem16(DSP_MJPEG_SOutBufDataSz, gw_IMG_DMA_Sz);
 684   2                              tw_temp = gw_width <<4;
 685   2                              L2_DSP_Write_DMem16(DSP_MJPEG_SOutBufMaxSzPixel, tw_temp);
 686   2      
 687   2                              gw_IMG_DMABuf_ptr[0] = 0x3000;
 688   2                              tw_temp = gw_IMG_DMA_Sz/2;
 689   2                              for( i =0; i< 3; i++)
 690   2                              {
 691   3                                      gw_IMG_DMABuf_ptr[i+1] = gw_IMG_DMABuf_ptr[i] + tw_temp;
 692   3                              }
 693   2                      
 694   2                              if (MJPEG_PlayCmd() == DSP_PLAY_COMMAND_ERROR)  //motion play cmd
 695   2                              {
 696   3      
 697   3                              }
 698   2      
 699   2                              if(gc_Play_FileType == 0)
 700   2                              {
 701   3                                      DOS_Read_File(C_OtherFHandle);
 702   3                              }
 703   2                      
 704   2                              gs_System_State.c_Phase = TASK_PHASE_PLAYACT;
 705   2                      break;
 706   2              }
 707   1              set_clock_mode(CLOCK_MODE_MJPEG);
 708   1              gc_PhaseInx = 2;
 709   1      }
 710          
 711          
 712          void mjpeg_stop()
 713          {
 714   1              U8 tc_Ret;
 715   1      
 716   1              if (gs_System_State.c_Phase != TASK_PHASE_STOP)
 717   1              {                                       
 718   2                      tc_Ret = MJPEG_StopCmd(gs_System_State.c_FileHandle); //DSP stop cmd
 719   2                      if (tc_Ret != DSP_SUCCESS)
 720   2                      {
 721   3                              //dbprintf("MJPEG stop error !!\n");
 722   3                      }
 723   2      
 724   2                      gs_System_State.c_Phase = TASK_PHASE_STOP;
 725   2              }
 726   1      }
 727          
 728          
 729          void mjpeg_endfile()
 730          {       
C51 COMPILER V9.00   MJPEG_PROCESS                                                         07/10/2012 15:51:59 PAGE 13  

 731   1              mjpeg_stop(); //DSP stop cmd// Mark test code   
 732   1          if(gc_RepPlayMode==C_NoRepeat) //no repeat  //20090331
 733   1          {
 734   2              if(gw_FileIndex[gs_System_State.c_FileHandle]==gw_FileTotalNumber[gs_System_State.c_FileHandle])
 735   2              {
 736   3                  gc_PhaseInx=0;  
 737   3                              gc_DispWallpaper=0;
 738   3                              gw_Disp_CurrentSec=0;
 739   3                              gs_System_State.c_Phase=2;
 740   3                              gc_Play_FileType=2;
 741   3                              gw_TotalSec=0;
 742   3                              LCM_Display_Func1();
 743   3              }
 744   2                      else
 745   2                      {
 746   3                              if(gb_DirPlay_Flag==1)
 747   3                              {
 748   4                                      DOS_Search_File(C_File_OneDir|C_By_FDB, C_OtherFileType, C_CmpExtName|C_Next);
 749   4                              }
 750   3                              else
 751   3                              {
 752   4                      DOS_Search_File(C_File_All|C_By_FDB, C_OtherFileType,C_CmpExtName|C_Next);
 753   4                              }
 754   3                  gc_PhaseInx=3;                              
 755   3                      }  
 756   2          }
 757   1              else
 758   1              {
 759   2                      if(gc_RepPlayMode==C_RepeatOne) //repeat one
 760   2                  {
 761   3                  gc_PhaseInx=3;      
 762   3              }
 763   2                      else
 764   2                      {
 765   3                              DOS_Search_File(C_File_All|C_By_FDB, C_OtherFileType, C_CmpExtName|C_Next);
 766   3                              gc_PhaseInx = 3;
 767   3                      }
 768   2              }
 769   1              gc_Play_FileType=gs_File_FCB[gs_System_State.c_FileHandle].c_FileType;           //Jimi 090305  
 770   1      }
 771          
 772          
 773          void mjpeg_next()
 774          {
 775   1              U8 tc_Ret;
 776   1      
 777   1              switch(gs_System_State.c_Phase)
 778   1              {
 779   2                      case TASK_PHASE_STOP:
 780   2                              if (gw_FileIndex[gs_System_State.c_FileHandle] == 0)
 781   2                              {
 782   3                                      return;
 783   3                              }
 784   2                              gc_PhaseInx = 0;
 785   2                      break;
 786   2      
 787   2                      case TASK_PHASE_PLAYACT:
 788   2                              gc_PhaseInx = 3;
 789   2                              gc_KeyDet_Mask = 1;
 790   2                      break;
 791   2      
 792   2                      case TASK_PHASE_PAUSE:
C51 COMPILER V9.00   MJPEG_PROCESS                                                         07/10/2012 15:51:59 PAGE 14  

 793   2                              gc_PhaseInx = 0;
 794   2                      break;
 795   2              }
 796   1      
 797   1              if (gs_System_State.c_Phase != TASK_PHASE_STOP)
 798   1              {
 799   2                      tc_Ret = MJPEG_StopCmd(gs_System_State.c_FileHandle); //DSP stop cmd
 800   2                      if (tc_Ret != DSP_SUCCESS)
 801   2                      {
 802   3      //                      dbprintf("NEXT MJPEG stop error !!\n");
 803   3                      }               
 804   2                      gs_System_State.c_Phase = TASK_PHASE_STOP;
 805   2              }
 806   1              DOS_Search_File(C_File_All|C_By_FDB, C_OtherFileType, C_CmpExtName|C_Next);     
 807   1              gc_Play_FileType=gs_File_FCB[gs_System_State.c_FileHandle].c_FileType;           //Jimi 090305
 808   1              gs_System_State.c_Phase = TASK_PHASE_STOP;
 809   1      }
 810          
 811          
 812          void mjpeg_prev()
 813          {
 814   1              U8 tc_Ret;
 815   1              switch(gs_System_State.c_Phase)
 816   1              {
 817   2                      case TASK_PHASE_STOP:
 818   2                              if (gw_FileIndex[gs_System_State.c_FileHandle] == 0)
 819   2                              {
 820   3                                      return;
 821   3                              }
 822   2                              gc_PhaseInx=0;
 823   2                      break;
 824   2              
 825   2                      case TASK_PHASE_PLAYACT:
 826   2                              gc_PhaseInx = 3;
 827   2                              gc_KeyDet_Mask = 1;     
 828   2                      break;
 829   2              
 830   2                      case TASK_PHASE_PAUSE:
 831   2                              gc_PhaseInx = 0;
 832   2                      break;
 833   2              }
 834   1              
 835   1              if (gs_System_State.c_Phase != TASK_PHASE_STOP)
 836   1              {               
 837   2                      tc_Ret = MJPEG_StopCmd(gs_System_State.c_FileHandle); //DSP stop cmd
 838   2                      if (tc_Ret != DSP_SUCCESS)
 839   2                      {
 840   3      //                      dbprintf("MJPEG stop error !!\n");
 841   3                      }
 842   2                      gs_System_State.c_Phase = TASK_PHASE_STOP;
 843   2              }
 844   1              DOS_Search_File(C_File_All|C_By_FDB, C_OtherFileType, C_CmpExtName|C_Prev);
 845   1              gc_Play_FileType=gs_File_FCB[gs_System_State.c_FileHandle].c_FileType;           //Jimi 090305
 846   1              gs_System_State.c_Phase = TASK_PHASE_STOP;
 847   1      }
 848          
 849          
 850          void mjpeg_fastfwd()
 851          {
 852   1              U8      tc_Ret;
 853   1              U16     tw_curr_sec;
 854   1              U32     tdw_datapoint,tdw_sector;
C51 COMPILER V9.00   MJPEG_PROCESS                                                         07/10/2012 15:51:59 PAGE 15  

 855   1      
 856   1              if (gs_System_State.c_Phase == TASK_PHASE_STOP)
 857   1              {
 858   2                      return;
 859   2              }
 860   1      
 861   1              if (gs_System_State.c_Phase != TASK_PHASE_FASTFWD)
 862   1              {
 863   2                      gs_System_State.c_Phase = TASK_PHASE_FASTFWD;
 864   2                      L2_DSP_Write_DMem16(0x3F59, 0x0001);
 865   2              }
 866   1              
 867   1              if (L2_DSP_Read_DMem16(0x3F5A) == 0x0001)  //FF/FR mechanism; accumulate time, overflow?
 868   1              {
 869   2                      tdw_sector = gs_DSP_GLOBAL_RAM.sdw_sector_num - gs_DSP_GLOBAL_RAM.sw_sector_cnt;
 870   2                      gs_File_FCB[gs_System_State.c_FileHandle].dw_File_CurrentCluster = gs_File_FCB[gs_System_State.c_FileHan
             -dle].dw_File_StartCluster;
 871   2                      if (tdw_sector > gs_DSP_GLOBAL_RAM.sw_sector_cnt)
 872   2                      {
 873   3                              tdw_datapoint = gs_File_FCB[gs_System_State.c_FileHandle].dw_File_DataPoint + ((U32)gs_DSP_GLOBAL_RAM.s
             -w_sector_cnt << 9);
 874   3                              gs_File_FCB[gs_System_State.c_FileHandle].dw_File_CurrentCluster = DOS_Seek_File(gs_System_State.c_File
             -Handle, tdw_datapoint>>9);
 875   3                              gs_DSP_GLOBAL_RAM.sdw_sector_num = tdw_sector;
 876   3              
 877   3                              tw_curr_sec = tdw_datapoint/1000/gs_DSP_GLOBAL_RAM.sw_kbyte_per_sec;    
 878   3                              gs_DSP_GLOBAL_RAM.sw_frm_cnt = tw_curr_sec * (U16)gs_DSP_GLOBAL_RAM.sc_frame_rate;      
 879   3                              L2_DSP_Write_DMem16(DSP_DecodeFrameCounter, gs_DSP_GLOBAL_RAM.sw_frm_cnt);
 880   3      
 881   3                              gs_DSP_GLOBAL_RAM.sc_DM_Index = 0;              // reset bitstream buffer index
 882   3                              L2_DSP_Write_DMem16(0x3F5A, 0x0000);
 883   3                      }
 884   2                      else
 885   2                      {
 886   3                              tdw_datapoint = gs_File_FCB[gs_System_State.c_FileHandle].dw_File_TotalSize - ((U32)gs_DSP_GLOBAL_RAM.s
             -w_sector_cnt << 9);
 887   3                              gs_File_FCB[gs_System_State.c_FileHandle].dw_File_CurrentCluster = DOS_Seek_File(gs_System_State.c_File
             -Handle, tdw_datapoint>>9);
 888   3                              gs_DSP_GLOBAL_RAM.sdw_sector_num = gs_DSP_GLOBAL_RAM.sw_sector_cnt;
 889   3              
 890   3                              gs_DSP_GLOBAL_RAM.sc_DM_Index = 0;              // reset bitstream buffer index
 891   3                              L2_DSP_Write_DMem16(0x3F59, 0x0000);
 892   3                              L2_DSP_Write_DMem16(0x3F5A, 0x0000);
 893   3      
 894   3                              gs_DSP_GLOBAL_RAM.sw_frm_cnt = gw_TotalSec * (U16)gs_DSP_GLOBAL_RAM.sc_frame_rate;  //20090414 move her
             -e
 895   3                              L2_DSP_Write_DMem16(DSP_DecodeFrameCounter, gs_DSP_GLOBAL_RAM.sw_frm_cnt);
 896   3      
 897   3                              tc_Ret = MJPEG_StopCmd(gs_System_State.c_FileHandle);
 898   3                              if (tc_Ret != DSP_SUCCESS)
 899   3                              {
 900   4                              }
 901   3                              gs_System_State.c_Phase = TASK_PHASE_STOP; //Jimi 090410
 902   3                              return;
 903   3                      }
 904   2              }
 905   1      
 906   1              if (MJPEG_DataIn() == DSP_DATAIN_COMMAND_ERROR)
 907   1              {
 908   2      
 909   2              }
 910   1      
C51 COMPILER V9.00   MJPEG_PROCESS                                                         07/10/2012 15:51:59 PAGE 16  

 911   1              if (MJPEG_DataOut() != DSP_SUCCESS )
 912   1              {       // "file end" or "error format"
 913   2      
 914   2              }
 915   1      }
 916          
 917          
 918          void mjpeg_fastrev()
 919          {
 920   1              U8      tc_Ret;
 921   1              U16     tw_curr_sec;
 922   1              U32     tdw_datapoint;
 923   1      
 924   1              if ((gs_System_State.c_Phase != TASK_PHASE_FASTREV) && (gs_System_State.c_Phase != TASK_PHASE_PAUSE))
 925   1              {
 926   2                      gs_System_State.c_Phase = TASK_PHASE_FASTREV;
 927   2                      L2_DSP_Write_DMem16(0x3F59, 0x0001);
 928   2              }
 929   1      
 930   1              if (L2_DSP_Read_DMem16(0x3F5A) == 0x0001)  //FF/FR mechanism; decrease time, underflow??
 931   1              {
 932   2                      gs_File_FCB[gs_System_State.c_FileHandle].dw_File_CurrentCluster = gs_File_FCB[gs_System_State.c_FileHan
             -dle].dw_File_StartCluster;
 933   2                      tdw_datapoint = gs_File_FCB[gs_System_State.c_FileHandle].dw_File_DataPoint - ((U32)gs_DSP_GLOBAL_RAM.sw
             -_sector_cnt << 9);
 934   2                      
 935   2                      tw_curr_sec = tdw_datapoint/1000/gs_DSP_GLOBAL_RAM.sw_kbyte_per_sec;  //Jimi 090410     
 936   2                      gs_DSP_GLOBAL_RAM.sw_frm_cnt = tw_curr_sec * (U16)gs_DSP_GLOBAL_RAM.sc_frame_rate;
 937   2                      L2_DSP_Write_DMem16(DSP_DecodeFrameCounter, gs_DSP_GLOBAL_RAM.sw_frm_cnt);
 938   2                      if (tdw_datapoint > gs_DSP_GLOBAL_RAM.sw_data_start)
 939   2                      {
 940   3                              gs_DSP_GLOBAL_RAM.sdw_sector_num += gs_DSP_GLOBAL_RAM.sw_sector_cnt;
 941   3                      }
 942   2                      else
 943   2                      {
 944   3                              tdw_datapoint = gs_DSP_GLOBAL_RAM.sw_data_start;
 945   3                              gs_DSP_GLOBAL_RAM.sdw_sector_num = (gs_File_FCB[gs_System_State.c_FileHandle].dw_File_TotalSize - tdw_d
             -atapoint) >> 9;       // minus header size
 946   3      
 947   3                              L2_DSP_Write_DMem16(0x3F59, 0x0000);
 948   3                              tc_Ret = MJPEG_PauseCmd();
 949   3                              if (tc_Ret != DSP_SUCCESS)
 950   3                              {
 951   4      
 952   4                              }
 953   3                              gs_System_State.c_Phase = TASK_PHASE_PAUSE; //090410
 954   3                              gs_DSP_GLOBAL_RAM.sw_frm_cnt = 0;
 955   3                              L2_DSP_Write_DMem16(DSP_DecodeFrameCounter, gs_DSP_GLOBAL_RAM.sw_frm_cnt);      //Jimi 090408
 956   3                      }
 957   2                      gs_File_FCB[gs_System_State.c_FileHandle].dw_File_CurrentCluster = DOS_Seek_File(gs_System_State.c_FileH
             -andle, tdw_datapoint>>9);
 958   2                      gs_DSP_GLOBAL_RAM.sc_DM_Index = 0;              // reset bitstream buffer index
 959   2                      L2_DSP_Write_DMem16(0x3F5A, 0x0000);
 960   2              }
 961   1      
 962   1              if (MJPEG_DataIn() == DSP_DATAIN_COMMAND_ERROR)
 963   1              {
 964   2      
 965   2              }
 966   1      
 967   1              if (MJPEG_DataOut() != DSP_SUCCESS )
 968   1              {       // "file end" or "error format"
C51 COMPILER V9.00   MJPEG_PROCESS                                                         07/10/2012 15:51:59 PAGE 17  

 969   2      
 970   2              }
 971   1      }
 972          
 973          
 974          void mjpeg_fffr_end()
 975          {
 976   1              if ((gs_System_State.c_Phase == TASK_PHASE_FASTFWD) || (gs_System_State.c_Phase == TASK_PHASE_FASTREV))
 977   1              {
 978   2                      L2_DSP_Write_DMem16(0x3F59, 0x0000);
 979   2                      if (L2_DSP_Read_DMem16(0x3F5A) == 0x0001)
 980   2                      {
 981   3                              gs_DSP_GLOBAL_RAM.sc_DM_Index = 0;              // reset bitstream buffer index
 982   3                              L2_DSP_Write_DMem16(0x3F5A, 0x0000);
 983   3                      }
 984   2                      gc_PhaseInx = 3;
 985   2              }
 986   1              else if (gs_System_State.c_Phase == TASK_PHASE_STOP)    // fastfwd to file end
 987   1              {
 988   2                      gc_PhaseInx = 3; //next //Jimi 090406
 989   2                      gc_KeyDet_Mask = 1;
 990   2      
 991   2                      DOS_Search_File(C_File_All|C_By_FDB, C_OtherFileType, C_CmpExtName|C_Next);     
 992   2                      gc_Play_FileType=gs_File_FCB[gs_System_State.c_FileHandle].c_FileType;
 993   2              }
 994   1              else if (gs_System_State.c_Phase == TASK_PHASE_PAUSE)   // fastrev to file start
 995   1              {
 996   2                      gc_PhaseInx = 3;                                                                        // if fast backward to the file start then pause and resume
 997   2              }
 998   1      }
 999          
1000          
1001          void mjpeg_volup()
1002          {
1003   1              gb_Frequency_Song=0;    // 0=Show Frequency    1=Show Song Number/EQ
1004   1              gc_SelectVol=0;                 // 1=Show Vol
1005   1              gb_SelectEQ=0;                  // 0=Show Song Number  1=Show EQ
1006   1              gc_ShowTimer=0;
1007   1              gb_ChannelSet=0;
1008   1              gc_ShowTimer=72;
1009   1              gw_LogData_Timer=60;
1010   1              gc_TuneVolFreqStatus =1;
1011   1              Music_VolumeUpCmd();
1012   1      
1013   1              if(gs_System_State.c_Phase==TASK_PHASE_STOP)  //20090331
1014   1          {
1015   2              gc_PhaseInx=C_MjpegIdle;   
1016   2          }
1017   1          else
1018   1          {
1019   2              gc_PhaseInx=C_MjpegProc;
1020   2          }
1021   1      }
1022          
1023          
1024          void mjpeg_voldn()
1025          {
1026   1              gb_Frequency_Song=0;    // 0=Show Frequency    1=Show Song Number/EQ
1027   1              gc_SelectVol=0;                 // 1=Show Vol
1028   1              gb_SelectEQ=0;                  // 0=Show Song Number  1=Show EQ
1029   1              gc_ShowTimer=0;
1030   1              gb_ChannelSet=0;
C51 COMPILER V9.00   MJPEG_PROCESS                                                         07/10/2012 15:51:59 PAGE 18  

1031   1              gc_ShowTimer=72;
1032   1              gc_TuneVolFreqStatus=1;
1033   1              gw_LogData_Timer=60;
1034   1              Music_VolumeDownCmd();
1035   1      
1036   1              if(gs_System_State.c_Phase==TASK_PHASE_STOP)  //20090331
1037   1          {
1038   2              gc_PhaseInx=C_MjpegIdle;   
1039   2          }
1040   1          else
1041   1          {
1042   2              gc_PhaseInx=C_MjpegProc;
1043   2          }
1044   1      }
1045          
1046          
1047          void mjpeg_back2uplevel()
1048          {
1049   1              if ((gs_System_State.c_Phase == TASK_PHASE_PLAYACT) || (gs_System_State.c_Phase == TASK_PHASE_PAUSE))
1050   1              {               
1051   2                      mjpeg_stop(); //DSP stop cmd    
1052   2              }
1053   1              
1054   1              gc_Task_Next=C_Task_Menu;
1055   1              gw_init_needed |= SET_BIT8;
1056   1              gc_PhaseInx=0;
1057   1      }
1058          
1059          
1060          void MjpegMenu_Process()
1061          {
1062   1              data    bit     tb_Confirm=0;
1063   1              gc_refresh_type = REFRESH_ALL;
1064   1              if(gc_PhaseInx!=2)
1065   1              {
1066   2              switch(gc_PhaseInx)
1067   2              {
1068   3                  case C_MjpegMenu:
1069   3                                      gc_refresh_type = REFRESH_ALL;
1070   3                                      tb_Confirm = 1;
1071   3                                      gc_ShowTimer =150;
1072   3                  break;
1073   3      
1074   3                  case C_MjpegNext:
1075   3                                      gc_ShowTimer =150;
1076   3                                      gc_refresh_type = REFRESH_NEXT;
1077   3                                      if(gc_LCMDispIndex==2)
1078   3                                      {
1079   4                                              gc_LCMDispIndex=0;
1080   4                              }
1081   3                                      else
1082   3                                      {
1083   4                                              gc_LCMDispIndex++;
1084   4                                      }
1085   3                                      //TFT_MovieMenu(); //--sunzhenk add 100703
1086   3                                      Menu_Disp_Item_Other(gc_TuneVolFreqStatus,gc_LCMDispIndex,gc_refresh_type);
1087   3                  break;
1088   3      
1089   3                  case C_MjpegPrev:
1090   3                                      gc_ShowTimer =150;
1091   3                                      gc_refresh_type = REFRESH_PREV;
1092   3                                      if(gc_LCMDispIndex==0)
C51 COMPILER V9.00   MJPEG_PROCESS                                                         07/10/2012 15:51:59 PAGE 19  

1093   3                                      {
1094   4                                              gc_LCMDispIndex=2;
1095   4                                      }
1096   3                                      else
1097   3                                      {
1098   4                                              gc_LCMDispIndex--;
1099   4                                      }
1100   3                                      //FT_MovieMenu();
1101   3                                      Menu_Disp_Item_Other(gc_TuneVolFreqStatus,gc_LCMDispIndex,gc_refresh_type);
1102   3                  break;      
1103   3                      }
1104   2                      
1105   2                      if(tb_Confirm==1) //confirm selected item
1106   2                      {
1107   3                              if(gc_LCMDispIndex==0)  //Mjpeg Dir
1108   3                              {
1109   4                                      mjpeg_stop();
1110   4                                      gc_TaskMode_BkUp=C_Task_Mjpeg;
1111   4                                      gc_Task_Next=C_Task_Dir;
1112   4                                      gc_ShowTimer=0;
1113   4                                      gc_TuneVolFreqStatus=0;
1114   4                                      return;
1115   4                              }
1116   3                              else if(gc_LCMDispIndex==1)  //Select Play Mode
1117   3                              {
1118   4                                      gc_DispPlayMenuAct=1;
1119   4                                      gc_TuneVolFreqStatus=22;
1120   4                                      return;
1121   4                              }
1122   3                              else if(gc_LCMDispIndex==2)  //Exit
1123   3                              {
1124   4                                      gc_ShowTimer=0;
1125   4                                      gc_TuneVolFreqStatus=0;
1126   4                                      gc_PhaseInx=C_MjpegPause;
1127   4                                      return;
1128   4                              }
1129   3                      }
1130   2                      gc_PhaseInx=C_MjpegIdle;
1131   2              }       
1132   1      }
1133          
1134          
1135          void RepeatMode_Process_Mjpeg()
1136          {
1137   1              data    bit     tb_Confirm=0;
1138   1      
1139   1              if(gc_PhaseInx)
1140   1              {
1141   2              switch(gc_PhaseInx)
1142   2              {
1143   3                  case C_MjpegMenu:
1144   3                                      gc_ShowTimer =150;
1145   3                                      gc_refresh_type = REFRESH_ALL;
1146   3                                      tb_Confirm=1;
1147   3                  break;
1148   3      
1149   3                  case C_MjpegNext:
1150   3                                      gc_ShowTimer =150;
1151   3                                      gc_refresh_type = REFRESH_NEXT;
1152   3                                      if(gc_LCMDispIndex==2)
1153   3                                      {
1154   4                                              gc_LCMDispIndex=0;
C51 COMPILER V9.00   MJPEG_PROCESS                                                         07/10/2012 15:51:59 PAGE 20  

1155   4                                      }
1156   3                                      else
1157   3                                      {
1158   4                                              gc_LCMDispIndex++;
1159   4                                      }
1160   3                                      //TFT_MoviePlayMode();
1161   3                                      Menu_Disp_Item_Other(gc_TuneVolFreqStatus,gc_LCMDispIndex,gc_refresh_type);
1162   3                  break;
1163   3      
1164   3                  case C_MjpegPrev:
1165   3                                      gc_ShowTimer =150;
1166   3                                      gc_refresh_type = REFRESH_PREV;
1167   3                                      if(gc_LCMDispIndex==0)
1168   3                                      {
1169   4                                              gc_LCMDispIndex=2;
1170   4                                      }
1171   3                                      else
1172   3                                      {
1173   4                                              gc_LCMDispIndex--;
1174   4                                      }
1175   3                                      //TFT_MoviePlayMode();
1176   3                                      Menu_Disp_Item_Other(gc_TuneVolFreqStatus,gc_LCMDispIndex,gc_refresh_type);
1177   3                  break;
1178   3              }
1179   2              
1180   2                      if(tb_Confirm==1) //enter child dir or confirm selected item
1181   2                      {
1182   3                              if(gc_LCMDispIndex==0)
1183   3                              {
1184   4                                      gc_RepPlayMode=0;
1185   4                              }
1186   3                              else if(gc_LCMDispIndex==1)
1187   3                              {
1188   4                                      gc_RepPlayMode=1;
1189   4                              }
1190   3                              else if(gc_LCMDispIndex==2)
1191   3                              {
1192   4                                      gc_RepPlayMode=2;
1193   4                              }
1194   3                              gc_ShowTimer=0;
1195   3                              gc_TuneVolFreqStatus=0;
1196   3                              gc_DispPlayMenuAct=0;
1197   3                              gc_PhaseInx=C_MjpegPause;
1198   3                              return;
1199   3                      }
1200   2                      gc_PhaseInx=C_MjpegIdle;
1201   2              }
1202   1      }       
1203          
1204          void LCM_Display_Mjpeg2()
1205          {
1206   1              if(gc_TuneVolFreqStatus==1)     // VOLUME ADJ.
1207   1              {
1208   2                      if(gc_DispWallpaper!=2)
1209   2                      {
1210   3                              gb_TFT_VOL_FM=0;        // 0=VOL adj.  1=FM adj.
1211   3                              //TFT_Main_VOL_FM_ADJ();
1212   3                              Menu_Disp_Item_Play(gc_TuneVolFreqStatus,gc_LCMDispIndex,gc_refresh_type);
1213   3                              gc_DispWallpaper=2;
1214   3                              gc_DisplayVol=0xFF;
1215   3                      }
1216   2                      if(gc_DisplayVol!=gs_DSP_GLOBAL_RAM.sw_Volume)
C51 COMPILER V9.00   MJPEG_PROCESS                                                         07/10/2012 15:51:59 PAGE 21  

1217   2                      {
1218   3                              gc_DisplayVol=gs_DSP_GLOBAL_RAM.sw_Volume;
1219   3                              TFT_ShowVOLAdj();
1220   3                      }
1221   2              }
1222   1              else if(gc_TuneVolFreqStatus==2)        // FM ADJ.
1223   1              {
1224   2                      gc_DispPlayMenuAct=0x12;    //hao.yang add for auto back 090603
1225   2      
1226   2                      if(gc_DispWallpaper!=3)
1227   2                      {
1228   3                              gb_TFT_VOL_FM=1;        // 0=VOL adj.  1=FM adj.
1229   3                              //TFT_Main_VOL_FM_ADJ();
1230   3                              Menu_Disp_Item_Play(gc_TuneVolFreqStatus,gc_LCMDispIndex,gc_refresh_type);
1231   3                              gc_DispWallpaper=3;
1232   3                              gw_DisplayFreq=0;
1233   3                      }
1234   2      
1235   2                      if(gw_DisplayFreq!=gw_FM_frequency)
1236   2                      {
1237   3                              gb_FlashNoFileflag=0;
1238   3                              gw_DisplayFreq=gw_FM_frequency;
1239   3                              TFT_ShowFMFreqAdj(); 
1240   3                      }
1241   2              }
1242   1              else if(gc_TuneVolFreqStatus==21)       //Mjpeg menu
1243   1              {
1244   2                      //gc_ShowTimer=72;
1245   2                      IR_Service_Process_Menu_1();
1246   2      
1247   2                      if(gc_DispWallpaper!=22)
1248   2                      {
1249   3                              gc_DispWallpaper=22;
1250   3                              gc_LCMDispIndex=0;
1251   3                              gc_PhaseInx=0;
1252   3                              gc_DispPlayMenuAct=1;
1253   3                              //TFT_MovieMenu(); //--sunzhenk add 100703
1254   3                              Menu_Disp_Item_Other(gc_TuneVolFreqStatus,gc_LCMDispIndex,gc_refresh_type);
1255   3                      }
1256   2                      MjpegMenu_Process();
1257   2              }
1258   1              else if(gc_TuneVolFreqStatus==22)       //Mjpeg repeat mode menu
1259   1              {
1260   2                      //gc_ShowTimer=72;
1261   2                      IR_Service_Process_Menu_1();
1262   2      
1263   2                      if(gc_DispWallpaper!=23)
1264   2                      {
1265   3                              gc_DispWallpaper=23;
1266   3                              gc_LCMDispIndex=0;
1267   3                              gc_PhaseInx=0;
1268   3                              gc_DispPlayMenuAct=0x11;
1269   3                              //TFT_MoviePlayMode(); //--sunzhenk add 100703
1270   3                              Menu_Disp_Item_Other(gc_TuneVolFreqStatus,gc_LCMDispIndex,gc_refresh_type);
1271   3                      }
1272   2                      RepeatMode_Process_Mjpeg();
1273   2              }       
1274   1      }
1275          
1276          void FM_FREQ_CHGUP_MPEG(void) //chiayen0807
1277          {
1278   1              gw_LogData_Timer=60;
C51 COMPILER V9.00   MJPEG_PROCESS                                                         07/10/2012 15:51:59 PAGE 22  

1279   1          FM_FREQ_CHG(1,1);
1280   1      
1281   1              if(gs_System_State.c_Phase==TASK_PHASE_STOP)
1282   1          {
1283   2              gc_PhaseInx=C_MjpegIdle;   
1284   2          }
1285   1          else
1286   1          {
1287   2              gc_PhaseInx=C_MjpegProc;
1288   2          }
1289   1      }
1290          
1291          void FM_FREQ_CHGDOWN_MPEG(void) //chiayen0807
1292          {
1293   1              gw_LogData_Timer=60;
1294   1          FM_FREQ_CHG(0,1);
1295   1      
1296   1              if(gs_System_State.c_Phase==TASK_PHASE_STOP)
1297   1          {
1298   2              gc_PhaseInx=C_MjpegIdle;   
1299   2          }
1300   1          else
1301   1          {
1302   2              gc_PhaseInx=C_MjpegProc;
1303   2          }
1304   1      }
1305          
1306          
1307          void Play_SDFlash_DosInit_Mjpeg()
1308          {
1309   1              U8        tc_media_changetimes=0; 
1310   1              
1311   1           
1312   1              gb_FindFlag = 0;
1313   1              gc_PhaseInx=0;
1314   1              gw_init_needed=0xFFFF;
1315   1      
1316   1              if (DOS_Initialize())
1317   1              {
1318   2              }
1319   1              else
1320   1              {
1321   2      
1322   2                      gc_ShowTimer=0;  //20090331 
1323   2                      gc_DispWallpaper=1; 
1324   2                      gc_TuneVolFreqStatus=0; 
1325   2                      gb_FindFlag = 0; 
1326   2                      gc_PhaseInx=0; 
1327   2                      gw_init_needed=0xFFFF; 
1328   2      
1329   2              gs_System_State.c_Phase = TASK_PHASE_STOP; 
1330   2              gs_System_State.c_FileHandle=2; 
1331   2              //(JC)search music file overall by FDB, findout 1st one in ROOT 
1332   2              gs_File_FCB[gs_System_State.c_FileHandle].dw_FDB_StartCluster = gdw_DOS_RootDirClus; 
1333   2              EXT_NameC[0] = 2; 
1334   2              EXT_NameC[1] = 'S'; 
1335   2              EXT_NameC[2] = 'C'; 
1336   2              EXT_NameC[3] = 'V'; 
1337   2              EXT_NameC[4] = 'A'; 
1338   2              EXT_NameC[5] = 'M'; 
1339   2              EXT_NameC[6] = 'V'; 
1340   2              DOS_Search_File(C_File_All|C_Cnt_FileNo,C_OtherFileType,C_CmpExtName|C_Next); 
C51 COMPILER V9.00   MJPEG_PROCESS                                                         07/10/2012 15:51:59 PAGE 23  

1341   2      
1342   2              if(DOS_Search_File(C_File_All|C_By_FDB, C_OtherFHandle, C_CmpExtName|C_Next)) 
1343   2              { 
1344   3                     // if(media_changetimes==tc_media_changetimes) 
1345   3                      { 
1346   4                              
1347   4                      gc_ShowTimer=0;  //20090331
1348   4                      gc_DispWallpaper=1;
1349   4                      gc_TuneVolFreqStatus=0;
1350   4                      gb_FindFlag = 0;
1351   4                      gc_PhaseInx=0;
1352   4                      gw_init_needed=0xFFFF;
1353   4      
1354   4                      gc_TaskMode_BkUp=C_Task_Play;//(JC)I0304 for back to rite TASK from Dir-list
1355   4                      gc_Task_Next=C_Task_Play;
1356   4      
1357   4                      gs_System_State.c_FileHandle=0;
1358   4                      gc_MenuItemCount=0;       
1359   4                      gs_File_FCB[0].dw_FDB_StartCluster = gdw_DOS_RootDirClus;           
1360   4                      DOS_Search_File(C_File_All|C_Cnt_FileNo, C_MusicFileType, C_CmpExtName|C_Next);//count music file no. in
             - root
1361   4                      gc_PhaseInx=0;
1362   4                      gb_TFT_refresh=1;
1363   4                      gc_DispWallpaper=0xFF;
1364   4      
1365   4                              return; 
1366   4              }
1367   3              
1368   3      
1369   3              } 
1370   2                      gc_Play_FileType=gs_File_FCB[gs_System_State.c_FileHandle].c_FileType; 
1371   2                      set_clock_mode(CLOCK_MODE_MJPEG); 
1372   2                      gc_PhaseInx=C_MjpegPause; 
1373   2      
1374   2              }         
1375   1      } 
1376          
1377          /*void Play_SDFlash_DosInit_Mjpeg()
1378          {
1379                  gb_FindFlag = 0;
1380                  gc_PhaseInx=0;
1381                  gw_init_needed=0xFFFF;
1382          
1383                  if (DOS_Initialize())
1384                  {
1385          }
1386                  else
1387                  {
1388                          gc_ShowTimer=0;  //20090331
1389                          gc_DispWallpaper=1;
1390                          gc_TuneVolFreqStatus=0;
1391                          gb_FindFlag = 0;
1392                          gc_PhaseInx=0;
1393                          gw_init_needed=0xFFFF;
1394          
1395                          gc_TaskMode_BkUp=C_Task_Play;//(JC)I0304 for back to rite TASK from Dir-list
1396                          gc_Task_Next=C_Task_Play;
1397          
1398                          gs_System_State.c_FileHandle=0;
1399                          gc_MenuItemCount=0;       
1400                          gs_File_FCB[0].dw_FDB_StartCluster = gdw_DOS_RootDirClus;           
1401                          DOS_Search_File(C_File_All|C_Cnt_FileNo, C_MusicFileType, C_CmpExtName|C_Next);//count music file no. in
C51 COMPILER V9.00   MJPEG_PROCESS                                                         07/10/2012 15:51:59 PAGE 24  

             - root
1402                          gc_PhaseInx=0;
1403                          gb_TFT_refresh=1;
1404                          gc_DispWallpaper=0xFF;
1405                  }
1406          }
1407          */
1408          
1409          void Play_SourceDetect_Process_Mjpeg()
1410          {
1411   1              gb_SD_Exist_pre=gb_SD_Exist;
1412   1              if(!SD_Detect)  //SD exist
1413   1          {
1414   2                      gb_SD_Exist=1;     //SD exist
1415   2          }
1416   1              else
1417   1              {
1418   2                      gb_SD_Exist=0;
1419   2                      gb_SDNoFileflag=0;
1420   2              }
1421   1              
1422   1              gb_Host_Exist_pre=gb_Host_Exist;
1423   1              if(!Host_DetectDevice())
1424   1              {
1425   2                      gb_Host_Exist=1;        //host_exist            
1426   2              }
1427   1              else
1428   1              {
1429   2                      gb_Host_Exist=0;
1430   2                      gc_HostNoFileflag=0;
1431   2              }
1432   1      
1433   1              if((gc_CurrentCard==0) && ((gb_Host_Exist_pre!=gb_Host_Exist)||(gb_SD_Exist_pre!=gb_SD_Exist)))
1434   1              {
1435   2                      if((gb_Host_Exist_pre!=gb_Host_Exist) && (gb_Host_Exist==1))
1436   2                      {
1437   3                              gc_CurrentCard=5;
1438   3                      }
1439   2                      else if((gb_SD_Exist_pre!=gb_SD_Exist) && (gb_SD_Exist==1))
1440   2                      {
1441   3                              gc_CurrentCard=2;       
1442   3                      }
1443   2                      else
1444   2                      {
1445   3                              gc_CurrentCard=0;       
1446   3                      }
1447   2              }
1448   1              else
1449   1              {
1450   2                      if(gc_CurrentCard==2)
1451   2                      {
1452   3                              if(gc_Dosinitfail==0)  //20090803 chiayen add
1453   3                              {
1454   4                                      if((gb_Host_Exist_pre!=gb_Host_Exist) && (gb_Host_Exist==1))
1455   4                                      {
1456   5                                              gc_CurrentCard=5;
1457   5                                      }
1458   4                                      else if(((gb_SD_Exist==0) || (gb_SDNoFileflag==1)) && (gb_Host_Exist==1))
1459   4                                      {
1460   5                                              gc_CurrentCard=5;
1461   5                                              if(gc_HostNoFileflag==1)
1462   5                                              {
C51 COMPILER V9.00   MJPEG_PROCESS                                                         07/10/2012 15:51:59 PAGE 25  

1463   6                                                      gc_CurrentCard=0;       
1464   6                                              }
1465   5                                      }
1466   4                                      else if((gb_SD_Exist==0) || (gb_SDNoFileflag==1))
1467   4                                      {
1468   5                                              gc_CurrentCard=0;       
1469   5                                      }
1470   4                              }
1471   3                              else //20090803 chiayen add for SD Dos initial fail
1472   3                              {
1473   4                                      if((gb_Host_Exist==1) && (gc_HostNoFileflag==0))
1474   4                                      {
1475   5                                              gc_CurrentCard=5;
1476   5                                      }
1477   4                                      else
1478   4                                      {
1479   5                                              gc_CurrentCard=0;
1480   5                                      }
1481   4                                      gc_Dosinitfail=0;                               
1482   4                              }
1483   3                      }
1484   2                      if(gc_CurrentCard==5)
1485   2                      {
1486   3                              if(gc_Dosinitfail==0)  //20090803 chiayen add
1487   3                              {
1488   4                                      if((gb_SD_Exist_pre!=gb_SD_Exist) && (gb_SD_Exist==1))
1489   4                                      {
1490   5                                              gc_CurrentCard=2;
1491   5                                      }
1492   4                                      else if(((gb_Host_Exist==0) || (gc_HostNoFileflag==1)) && (gb_SD_Exist==1))
1493   4                                      {
1494   5                                              gc_CurrentCard=2;
1495   5                                              if(gb_SDNoFileflag==1)
1496   5                                              {
1497   6                                                      gc_CurrentCard=0;       
1498   6                                              }
1499   5                                      }
1500   4                                      else if((gb_Host_Exist==0) || (gc_HostNoFileflag==1))
1501   4                                      {
1502   5                                              gc_CurrentCard=0;       
1503   5                                      }
1504   4                              }
1505   3                              else //host dos initial fail  //20090803 chiayen add
1506   3                              {
1507   4                                      if((gb_SD_Exist==1) && (gb_SDNoFileflag==0))
1508   4                                      {
1509   5                                              gc_CurrentCard=2;
1510   5                                      }
1511   4                                      else
1512   4                                      {
1513   5                                              gc_CurrentCard=0;
1514   5                                      }
1515   4                                      gc_Dosinitfail=0;
1516   4                              }
1517   3                      }
1518   2              }
1519   1      
1520   1          if(gc_CurrentCard_backup!=gc_CurrentCard)
1521   1          {
1522   2                      U8 tc_CurrentCard;
1523   2                      tc_CurrentCard=gc_CurrentCard;
1524   2                      gc_CurrentCard=gc_CurrentCard_backup;
C51 COMPILER V9.00   MJPEG_PROCESS                                                         07/10/2012 15:51:59 PAGE 26  

1525   2                      mjpeg_stop();
1526   2                      gc_MenuItemCount=0;
1527   2                      gc_CurrentCard=tc_CurrentCard;
1528   2                      gc_CurrentCard_backup=gc_CurrentCard;
1529   2      
1530   2                      set_clock_mode(CLOCK_MODE_MP3); //20090803 chiayen add for media change
1531   2      
1532   2                      if(gc_CurrentCard==2)
1533   2              {           
1534   3                  if(SD_Identification_Flow())
1535   3                  {
1536   4                      gc_CardExist |=0x02;
1537   4                  }
1538   3                  else if((gb_Host_Exist==1) && (gc_HostNoFileflag==0)) //20090730 chiayen modify
1539   3                  {
1540   4                                      DEVICE_REG[0x00]= 0x01;  //20090730 chiayen add
1541   4                                      if(!Host_Initial())
1542   4                                      {
1543   5                                              gc_CurrentCard = CURRENT_MEDIA_HOST;
1544   5                                              gb_FindFlag = 0;
1545   5                      }
1546   4                          else
1547   4                          {
1548   5                                              gc_CurrentCard=0;
1549   5                                              gc_CardExist &=0xFD;
1550   5                                              gb_FindFlag = 0;
1551   5                                              InitFlash();                                
1552   5                          }
1553   4                      }
1554   3                              else 
1555   3                      {
1556   4                                      DEVICE_REG[0x00]= 0x01;  //20090730 chiayen add
1557   4                                      gc_CurrentCard=0;
1558   4                                      gc_CardExist &=0xFD;
1559   4                                      gb_FindFlag = 0;
1560   4                                      InitFlash();
1561   4                              }
1562   3                              Play_SDFlash_DosInit_Mjpeg();
1563   3              }
1564   2                      #if 1//(USB_HOST==1)
1565   2                      else if(gc_CurrentCard==CURRENT_MEDIA_HOST)
1566   2                      {
1567   3                              DEVICE_REG[0x00]= 0x01;  //20090803 chiayen add                 
1568   3                              if(!Host_Initial())
1569   3                              {
1570   4                                      gc_CurrentCard = CURRENT_MEDIA_HOST;
1571   4                                      gb_FindFlag = 0;
1572   4                              }
1573   3                              else if((gb_SD_Exist==1) && (gb_SDNoFileflag==0)) //20090730 chiayen add
1574   3                              {
1575   4                          if(SD_Identification_Flow())
1576   4                          { 
1577   5                              gc_CardExist |=0x02;
1578   5                                              gc_CurrentCard=2;      
1579   5                                      }
1580   4                                      else
1581   4                                      {
1582   5                                              DEVICE_REG[0x00]= 0x01;
1583   5                                              gc_CurrentCard=0;
1584   5                                              gc_CardExist &=0xFD;
1585   5                                              gb_FindFlag = 0;
1586   5                                              InitFlash();
C51 COMPILER V9.00   MJPEG_PROCESS                                                         07/10/2012 15:51:59 PAGE 27  

1587   5                                      }
1588   4                              }
1589   3                              else 
1590   3                      {
1591   4                                      DEVICE_REG[0x00]= 0x01;
1592   4                                      gc_CurrentCard=0;
1593   4                                      gb_FindFlag = 0;
1594   4                                      InitFlash();
1595   4                              }
1596   3                              Play_SDFlash_DosInit_Mjpeg();
1597   3                      }
1598   2                      else if(gc_CurrentCard==0)
1599   2              {
1600   3                              DEVICE_REG[0x00]= 0x01;
1601   3                              gc_CardExist &=0xFD;
1602   3                              InitFlash();
1603   3                              Play_SDFlash_DosInit_Mjpeg();
1604   3                      }
1605   2                      #endif
1606   2      
1607   2                      #if 0
                              if(gc_CurrentCard==2)
                      {           
                          if(SD_Identification_Flow())
                          {
                              gc_CardExist |=0x02;
                                              Play_SDFlash_DosInit_Mjpeg();      
                          }
                          else
                          {
                                              XBYTE[0xB400]= 0x01;
                                              gc_CurrentCard=0;
                                              gc_CardExist &=0xFD;
                                              gb_FindFlag = 0;
                                              InitFlash();
                                              Play_SDFlash_DosInit_Mjpeg();                                       
                          }
                      }
                      else if(gc_CurrentCard==0)
                      {
                                      XBYTE[0xB400]= 0x01;
                                      gc_CardExist &=0xFD;
                                      InitFlash();
                                      Play_SDFlash_DosInit_Mjpeg();
                      }
                              else if(gc_CurrentCard==CURRENT_MEDIA_HOST)
                              {
                                      set_clock_mode(CLOCK_MODE_MP3);
                                      if(!Host_Initial())
                                      {
                                              gc_CurrentCard = CURRENT_MEDIA_HOST;
                                              gb_FindFlag = 0;
                                      }
                                      else
                                      {
                                              XBYTE[0xB400]= 0x01;
                                              gc_CurrentCard=0;
                                              gb_FindFlag = 0;
                                              InitFlash();
                                              gc_CurrentCard=0;
                                      }
                                      Play_SDFlash_DosInit_Mjpeg();
C51 COMPILER V9.00   MJPEG_PROCESS                                                         07/10/2012 15:51:59 PAGE 28  

                              }
                              #endif
1651   2          }   
1652   1      }
1653          
1654          
1655          void Mjpeg_Task()
1656          {
1657   1              LCD_BACKLIGHT_ON;
1658   1              XBYTE[0xB046]&=~0x04;
1659   1              media_changetimes=1;//sunzhk add 100811
1660   1              while (1)
1661   1              {
1662   2                      switch(gc_PhaseInx)
1663   2                      {
1664   3                              case C_MjpegIdle:
1665   3                                      mjpeg_idle();
1666   3                              break;
1667   3      
1668   3                              case C_MjpegInit:
1669   3                                      mjpeg_init();
1670   3                              break;  
1671   3                      
1672   3                              case C_MjpegProc:
1673   3                                      mjpeg_proc();
1674   3                              break;
1675   3                              
1676   3                              case C_MjpegPause:
1677   3                                      if(gc_ShowTimer==0)
1678   3                                      {
1679   4                                              gc_DispWallpaper=1;
1680   4                                              mjpeg_playpause();
1681   4                                      }
1682   3                                      else
1683   3                                      {
1684   4                                              gc_PhaseInx=C_MjpegIdle;        
1685   4                                      }
1686   3                              break;
1687   3      
1688   3                              case C_MjpegStop:
1689   3                                      mjpeg_stop();
1690   3                              break;
1691   3      
1692   3                              case C_MjpegEndfile:
1693   3                                      mjpeg_endfile();        
1694   3                              break;
1695   3      
1696   3                              case C_MjpegNext:
1697   3                                      if(gc_TuneVolFreqStatus==0)  //20090331
1698   3                                      {
1699   4                                              mjpeg_next();
1700   4                                      }
1701   3                                      else if(gc_TuneVolFreqStatus==1)  //20090331
1702   3                                      {
1703   4                                      
1704   4                                                      mjpeg_volup();
1705   4      
1706   4                                      }
1707   3                                      else if(gc_TuneVolFreqStatus==2)
1708   3                                      {
1709   4                                              FM_FREQ_CHGUP_MPEG();   
1710   4                                      }
C51 COMPILER V9.00   MJPEG_PROCESS                                                         07/10/2012 15:51:59 PAGE 29  

1711   3                              break;
1712   3      
1713   3                              case C_MjpegPrev:
1714   3                                      if(gc_TuneVolFreqStatus==0)  //20090331
1715   3                                      {
1716   4                                              mjpeg_prev();
1717   4                                      }
1718   3                                      else if(gc_TuneVolFreqStatus==1)  //20090331
1719   3                                      {
1720   4                                      
1721   4                                                      mjpeg_voldn();
1722   4                                      
1723   4                                      }
1724   3                                      else if(gc_TuneVolFreqStatus==2)
1725   3                                      {
1726   4                                              FM_FREQ_CHGDOWN_MPEG(); 
1727   4                                      }
1728   3                              break;
1729   3      
1730   3                              case C_MjpegFF:
1731   3                                      if(gc_TuneVolFreqStatus==0)  //20090331
1732   3                                      {
1733   4                                              mjpeg_fastfwd();
1734   4                                      }
1735   3                                      else if(gc_TuneVolFreqStatus==1)  //20090331
1736   3                                      {
1737   4                                      
1738   4                                                      mjpeg_volup();
1739   4      
1740   4                                      }
1741   3                                      else if(gc_TuneVolFreqStatus==2)
1742   3                                      {
1743   4                                              FM_FREQ_CHGUP_MPEG();   
1744   4                                      }
1745   3                              break;
1746   3      
1747   3                              case C_MjpegFR:
1748   3                                      if(gc_TuneVolFreqStatus==0)  //20090331
1749   3                                      {
1750   4                                              mjpeg_fastrev();
1751   4                                      }
1752   3                                      else if(gc_TuneVolFreqStatus==1)  //20090331
1753   3                                      {
1754   4                                      
1755   4                                                      mjpeg_voldn();
1756   4      
1757   4                                      }
1758   3                                      else if(gc_TuneVolFreqStatus==2)
1759   3                                      {
1760   4                                              FM_FREQ_CHGDOWN_MPEG(); 
1761   4                                      }
1762   3                              break;
1763   3      
1764   3                              case C_MjpegFfFrEnd:
1765   3                                      if(gc_TuneVolFreqStatus==0) 
1766   3                                      {
1767   4                                              mjpeg_fffr_end();
1768   4                                      }
1769   3                                      else
1770   3                                      {
1771   4                                              gc_PhaseInx=C_MjpegIdle; 
1772   4                                      }
C51 COMPILER V9.00   MJPEG_PROCESS                                                         07/10/2012 15:51:59 PAGE 30  

1773   3              
1774   3                              break;
1775   3      
1776   3                              case C_MjpegVolUp:
1777   3                                      if(gs_System_State.c_Phase==TASK_PHASE_PLAYACT)
1778   3                                      {
1779   4                                              mjpeg_playpause();
1780   4                                      }
1781   3                                              gc_TuneVolFreqStatus=1;
1782   3                                              gc_DispPlayMenuAct=0x11;
1783   3                                              gc_ShowTimer=72;
1784   3                                              if(gs_System_State.c_Phase!=TASK_PHASE_STOP)
1785   3                                              {
1786   4                                                      mjpeg_volup();
1787   4                                              }
1788   3                                      
1789   3                              break;
1790   3      
1791   3                              case C_MjpegVolDn:
1792   3                                      //mjpeg_voldn();
1793   3                                       if(gs_System_State.c_Phase==TASK_PHASE_PLAYACT)
1794   3                                       {
1795   4                                              mjpeg_playpause();
1796   4                                       }
1797   3                                              gc_TuneVolFreqStatus=1;
1798   3                                              gc_DispPlayMenuAct=0x11;
1799   3                                              gc_ShowTimer=72;
1800   3                                              if(gs_System_State.c_Phase!=TASK_PHASE_STOP)
1801   3                                              {
1802   4                                                      mjpeg_voldn();
1803   4                                              }
1804   3                                              
1805   3                              break;
1806   3                              case C_MjpegChgUp:
1807   3                                      if(gs_System_State.c_Phase==TASK_PHASE_PLAYACT)
1808   3                                      {
1809   4                                              mjpeg_playpause();
1810   4                                      }
1811   3                                              gc_TuneVolFreqStatus=2;
1812   3                                              gc_DispPlayMenuAct=0x11;
1813   3                                              gc_ShowTimer=72;
1814   3                                              if(gs_System_State.c_Phase!=TASK_PHASE_STOP)
1815   3                                              {
1816   4                                                      FM_FREQ_CHGUP_MPEG();
1817   4                                              }
1818   3                              break;
1819   3                              case C_MjpegChgDn:
1820   3                                              if(gs_System_State.c_Phase==TASK_PHASE_PLAYACT)
1821   3                                              {
1822   4                                                      mjpeg_playpause();
1823   4                                              }
1824   3                                              gc_TuneVolFreqStatus=2;
1825   3                                              gc_DispPlayMenuAct=0x11;
1826   3                                              gc_ShowTimer=72;
1827   3                                              if(gs_System_State.c_Phase!=TASK_PHASE_STOP)
1828   3                                              {
1829   4                                                      FM_FREQ_CHGDOWN_MPEG();
1830   4                                              }
1831   3                              break;
1832   3      
1833   3                              case C_MjpegUpLevel:
1834   3                                      mjpeg_back2uplevel();
C51 COMPILER V9.00   MJPEG_PROCESS                                                         07/10/2012 15:51:59 PAGE 31  

1835   3                              break;
1836   3      
1837   3                              case C_TuneVolFreq:  //20090331
1838   3                                      if(gs_System_State.c_Phase==TASK_PHASE_PLAYACT)
1839   3                                      {
1840   4                                              mjpeg_playpause();
1841   4                                      }
1842   3                                      
1843   3                                      gc_DispPlayMenuAct=0x11;    
1844   3      
1845   3                                      if(gc_TuneVolFreqStatus<3)
1846   3                                      {
1847   4                                              gc_ShowTimer=72;
1848   4                                              gc_TuneVolFreqStatus++;
1849   4                                              if(gc_TuneVolFreqStatus>2)
1850   4                                              {
1851   5                                                      gc_TuneVolFreqStatus=0;
1852   5                                                      gc_ShowTimer=0;
1853   5                                                      gc_PhaseInx=C_MjpegPause;
1854   5                                              }
1855   4                                      }
1856   3      
1857   3                                      if(gs_System_State.c_Phase==TASK_PHASE_STOP)
1858   3                                  {
1859   4                                      gc_PhaseInx=C_MjpegIdle;   
1860   4                                  }
1861   3                                  else
1862   3                                  {
1863   4                                      gc_PhaseInx=C_MjpegProc;
1864   4                                  }
1865   3                              break;
1866   3      
1867   3                              case C_MjpegMenu:  //20090331
1868   3                                      if(gs_System_State.c_Phase==TASK_PHASE_PLAYACT)
1869   3                                      {
1870   4                                              mjpeg_playpause();
1871   4                                      }
1872   3      
1873   3                              gc_ShowTimer=72;
1874   3                                      if((gc_DispPlayMenuAct==0) || (gc_DispPlayMenuAct==0x11))
1875   3                                      {
1876   4                                              gc_TuneVolFreqStatus=21;
1877   4                                      }                                       
1878   3                              break;
1879   3      
1880   3                  case C_PowerOff:
1881   3                                      if(gs_System_State.c_Phase!=TASK_PHASE_STOP)
1882   3                                      {
1883   4                                              mjpeg_stop();
1884   4                                      }
1885   3                                      gc_Task_Next=C_Task_PowerOff;                                           
1886   3                  break;
1887   3      
1888   3                              case C_MainMenu:  //Long Key Mode
1889   3                                      mjpeg_stop();
1890   3                                      gc_Task_Next=C_Task_Menu;
1891   3                              break;
1892   3                      }
1893   2      
1894   2                      if((gc_TuneVolFreqStatus!=0) && (gc_ShowTimer!=0))
1895   2                      {
1896   3                              LCM_Display_Mjpeg2();           
C51 COMPILER V9.00   MJPEG_PROCESS                                                         07/10/2012 15:51:59 PAGE 32  

1897   3                      }
1898   2                      else
1899   2                      {
1900   3                              if((gc_DispPlayMenuAct!=0)&&(gs_System_State.c_Phase==TASK_PHASE_PAUSE))
1901   3                              {
1902   4                                      gc_DispPlayMenuAct=0;
1903   4                                      gc_PhaseInx=C_MjpegPause;                               
1904   4                              }
1905   3                      }
1906   2      
1907   2                      Polling_TaskEvents();
1908   2      
1909   2              if(gc_LogDataFlag==1)
1910   2              {
1911   3                  USER_LogFile_ReadWrite(1);
1912   3                  gc_LogDataFlag=0;
1913   3              }
1914   2      
1915   2                      if(gc_PhaseInx==C_MjpegProc)
1916   2                      {
1917   3                              mjpeg_proc();   
1918   3                      }
1919   2      
1920   2                      if((gc_TuneVolFreqStatus!=21) && (gc_TuneVolFreqStatus!=22))
1921   2                      {
1922   3                              IR_Service_Process();
1923   3                      }
1924   2      
1925   2                      Play_SourceDetect_Process_Mjpeg();
1926   2      
1927   2                      if (gc_Task_Current != gc_Task_Next)
1928   2                      {
1929   3                              gc_Task_Current = gc_Task_Next;
1930   3                              break;  
1931   3                      }
1932   2              }
1933   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   5392    ----
   CONSTANT SIZE    =      6    ----
   XDATA SIZE       =     11      46
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----       2
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
