C51 COMPILER V9.00   HOST_INIT                                                             07/10/2012 15:51:55 PAGE 1   


C51 COMPILER V9.00, COMPILATION OF MODULE HOST_INIT
OBJECT MODULE PLACED IN .\obj\Host_init.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE Host\Host_init.c LARGE OPTIMIZE(9,SIZE) BROWSE NOAREGS INCDIR(..\libsource\
                    -header) DEFINE(K_ICTYPE=0x03) DEBUG OBJECTEXTEND PRINT(.\lst\Host_init.lst) OBJECT(.\obj\Host_init.obj)

line level    source

   1          #include "SPDA2K.h"
   2          #include "dos\fs_struct.h"
   3          #include "Memalloc.h"
   4          #include "..\header\host_init.h"
   5          #include "..\header\variables.h"
   6          
   7          data    bit     gb_HostInitial;
   8          data    bit     gb_dtg_in=0;
   9          data    bit     gb_dtg_out=0;
  10          data    bit     gb_HostConnect;
  11          
  12          xdata   U8      EP_IN;
  13          xdata   U8      EP_OUT;
  14          xdata   U8      CFGValue;
  15          xdata   U8      DeviceAddress;
  16          xdata   U8      ConfigurationDescriptorLength;
  17          xdata   U8      Max_Trans_Length;
  18          xdata   U8      gc_HostUnitNum;
  19          xdata   U16     gw_VID;
  20          
  21          extern  xdata   U8  Host_StallCmd_Timeout; 
  22          extern  xdata   U32     gdw_CARD_TotalSizeMB;  
  23          extern  xdata   U32     gdw_HOSTStartSectorRead;
  24          
  25          extern  data    bit     gb_stall_flag;
  26          extern  data    bit     gb_shortpack;
  27          extern  data    bit gb_Repeat;
  28          
  29          extern  void tran_in_(U8 addr,U8 amount,U16 offset);
  30          extern  U8              HOST_Read_Logicsector(U32 tdw_LogicSectorAddr);
  31          
  32          void Host_register_INIT(void)
  33          {
  34   1              XBYTE[0xB011] |= 0x20;   //bit 4   turn on usb_device clk
  35   1          XBYTE[0xB002] |= 0x04;   //bit 2   turn on USB_SW_RESET
  36   1          XBYTE[0xB002]&=~0x04;  //bit 2   trun off USB_SW_RESET
  37   1              XBYTE[0xB0E9]&=~0x01;
  38   1          XBYTE[0xB017]  = 0x01;   //USB2.0 UTMI op mode set
  39   1          XBYTE[0xB002] |= 0x02;   //bit 2   turn on USB_host_SW_RESET
  40   1              XBYTE[0xB002]&=~0x02;  //bit 2   turn off USB_host_SW_RESET
  41   1              XBYTE[0xB5e6]  = 0x00;   //bulk sram gated clock
  42   1              XBYTE[0xB522]  = 0x01;   //USB2.0 UTMI clock mode set                           
  43   1              Syn_Reset();
  44   1              XBYTE[0xB019]  = 0x01;   //host mode
  45   1      }
  46          
  47          U8 Host_Initial(void)
  48          {
  49   1              data    U8      i;
  50   1              data    U8      EP_flag=0;
  51   1              data    U8      states;
  52   1              data    U8      tc_StrProductName;
  53   1              data    U8      tc_StrSerialNum;
  54   1              data    U16     Stg_idx;
C51 COMPILER V9.00   HOST_INIT                                                             07/10/2012 15:51:55 PAGE 2   

  55   1      
  56   1      USB_HOST_Init:
  57   1              DeviceAddress = 1;
  58   1              gb_HostConnect = 1;
  59   1              gb_HostInitial=1;
  60   1      
  61   1              EA=0;
  62   1              XBYTE[0xB530]=0xFF;
  63   1              XBYTE[0xB01F]=0x01;
  64   1              Host_register_INIT();
  65   1              XBYTE[0xB01C]&=0xDF;    //Auto Ack in   
  66   1              delay(5000);
  67   1      
  68   1              // USB SUSPEND
  69   1              XBYTE[0xB610]=0x04; //force full-speed
  70   1              delay(60000);
  71   1              XBYTE[0xB610]=0x04;     
  72   1              delay(200);
  73   1              // USB RESET
  74   1              XBYTE[0xB610]=0x03; //force full-speed
  75   1              delay(20000);
  76   1              XBYTE[0xB610]=0x03;     
  77   1              delay(200);
  78   1      
  79   1              XBYTE[0xB630]=0x01;             //SOF ON
  80   1              XBYTE[0xB632]=0xB8;             //EOF point
  81   1              XBYTE[0xB633]=0x0B;
  82   1              delay(10000);
  83   1      
  84   1              gdw_pollingtime=320000;
  85   1      
  86   1              i=0;
  87   1              EA=1;
  88   1              while(1)
  89   1              {
  90   2                      delay(2000);
  91   2                      states = GetDescriptor(0,0x100,0,0x40);
  92   2                      if(states == 0x00)
  93   2                      {
  94   3                      Max_Trans_Length = XBYTE[HOST_BUF_SA+7];
  95   3                              break;
  96   3                      }
  97   2                      else
  98   2                      {
  99   3                              i++;
 100   3                              if(i==3)
 101   3                              {
 102   4                                      gb_HostConnect=0;
 103   4                                      return HOST_GETDESCRIPTOR_FAIL;
 104   4                              }
 105   3      
 106   3                              if(gb_HostConnect == 0)
 107   3                              {
 108   4                                      return HOST_PHYCOUNECT_FAIL;
 109   4                              }
 110   3                      }
 111   2              }
 112   1              EA=0;
 113   1              gb_HostInitial=0;
 114   1              XBYTE[0xB002] |= 0x02;   //bit 2   turn on USB_host_SW_RESET
 115   1              XBYTE[0xB002] &=~0x02;   //bit 2   turn off USB_host_SW_RESET
 116   1      
C51 COMPILER V9.00   HOST_INIT                                                             07/10/2012 15:51:55 PAGE 3   

 117   1              // USB RESET
 118   1              XBYTE[0xB610]=0x03; //force full-speed
 119   1              delay(1200);
 120   1              XBYTE[0xB610]=0x03;     
 121   1              delay(200);
 122   1              XBYTE[0xB630]=0x01;             //SOF ON
 123   1              XBYTE[0xB632]=0xB8;             //EOF point
 124   1              XBYTE[0xB633]=0x0B;
 125   1              delay(5000);
 126   1              XBYTE[0xB01C]|=0x10;    //clear RX error flags
 127   1              XBYTE[0xB01C]&=0xEF;
 128   1              EA=1;   
 129   1      
 130   1              // Set address--00 05 01 00 00 00 00 00
 131   1              states = SetAddress();
 132   1              if(states)
 133   1              {
 134   2                      return HOST_SETADDRESS_FAIL;
 135   2              }
 136   1              delay(50000);
 137   1              gb_dtg_in=0;
 138   1              gb_dtg_out=0;
 139   1      
 140   1              //---- 80 06 00 01 00 00 12 00----
 141   1          if(gb_HostConnect == 0)
 142   1              {
 143   2                  return HOST_PHYCOUNECT_FAIL;
 144   2              }
 145   1          states = GetDescriptor(DeviceAddress,0x0100,0x00,0x12);
 146   1      
 147   1              if(states)
 148   1              {
 149   2                      return HOST_GETDESCRIPTOR_FAIL;
 150   2              }
 151   1      
 152   1          tc_StrProductName=XBYTE[HOST_BUF_SA+15];
 153   1          tc_StrSerialNum=XBYTE[HOST_BUF_SA+16];
 154   1      
 155   1              gw_VID=XBYTE[HOST_BUF_SA+8]+(XBYTE[HOST_BUF_SA+9]<<8);
 156   1      
 157   1              //---- 80 06 00 02 00 00 09 00 ----
 158   1              if(gb_HostConnect == 0)
 159   1              {
 160   2                      return HOST_PHYCOUNECT_FAIL;
 161   2              }
 162   1              delay(1000);
 163   1              states = GetDescriptor(DeviceAddress,0x200,0,0x09);
 164   1              if(states)  
 165   1              {
 166   2                      return HOST_GETDESCRIPTOR_FAIL;
 167   2              }            
 168   1              Syn_Reset();
 169   1              ConfigurationDescriptorLength=XBYTE[HOST_BUF_SA+2];
 170   1      
 171   1              //---- 80 06 00 03 00 00 FF 00 ----
 172   1              //---- 80 06 3r 03 09 04 FF 00 ----
 173   1              if(tc_StrSerialNum!=0)
 174   1              {
 175   2              if(gb_HostConnect == 0)
 176   2                      {
 177   3                      return HOST_PHYCOUNECT_FAIL;
 178   3                      }
C51 COMPILER V9.00   HOST_INIT                                                             07/10/2012 15:51:55 PAGE 4   

 179   2                      delay(1000);
 180   2                      states = GetDescriptor(DeviceAddress,0x300,0,0xFF);
 181   2      
 182   2                      if(states) 
 183   2                      {
 184   3                              return HOST_GETDESCRIPTOR_FAIL;
 185   3                      }                       
 186   2      
 187   2                      Stg_idx=(U16)(XBYTE[HOST_BUF_SA+3]<<8)+XBYTE[HOST_BUF_SA+2];
 188   2      
 189   2                  if(gb_HostConnect == 0)
 190   2                      {
 191   3                          return HOST_PHYCOUNECT_FAIL;
 192   3                      }
 193   2                      delay(1000);
 194   2                      states = GetDescriptor(DeviceAddress,tc_StrSerialNum+0x0300,Stg_idx,0xFF);
 195   2      
 196   2                  if(states) 
 197   2                      {
 198   3                              return HOST_GETDESCRIPTOR_FAIL;
 199   3                      }                       
 200   2                  Syn_Reset();
 201   2              }
 202   1      
 203   1              //---- 80 06 00 02 00 00 FF 00 ----
 204   1              if(gb_HostConnect == 0)
 205   1              {
 206   2                      return HOST_PHYCOUNECT_FAIL;
 207   2              }
 208   1              delay(1000);
 209   1              states = GetDescriptor(DeviceAddress,0x200,0,0xFF);
 210   1      
 211   1              if(states)  
 212   1              {
 213   2                      return HOST_GETDESCRIPTOR_FAIL;
 214   2              }       
 215   1      
 216   1              //---- 80 06 00 06 00 00 0A 00 ----
 217   1      //      delay(1000);
 218   1      //      GetDescriptor(DeviceAddress,0x0600,0,0x0A);
 219   1      
 220   1              //---- 80 06 00 03 00 00 FF 00 ----
 221   1              //---- 80 06 PP 03 09 04 FF 00 ----
 222   1              //---- 80 06 00 03 00 00 FF 00 ----
 223   1              //---- 80 06 PP 03 09 04 FF 00 ----
 224   1              if(tc_StrProductName!=0)
 225   1              {
 226   2                      U8      i;
 227   2                      for(i=0;i<2;i++)
 228   2                      {
 229   3                      if(gb_HostConnect == 0)
 230   3                              {
 231   4                              return HOST_PHYCOUNECT_FAIL;
 232   4                              }
 233   3                              delay(1000);
 234   3                      states = GetDescriptor(DeviceAddress,0x300,0,0xFF);
 235   3      
 236   3                              if(states) 
 237   3                              {
 238   4                                      return HOST_GETDESCRIPTOR_FAIL;
 239   4                              }                       
 240   3      
C51 COMPILER V9.00   HOST_INIT                                                             07/10/2012 15:51:55 PAGE 5   

 241   3                              Stg_idx=(U16)(XBYTE[HOST_BUF_SA+3]<<8)+XBYTE[HOST_BUF_SA+2];
 242   3      
 243   3                          if(gb_HostConnect == 0)
 244   3                              {
 245   4                                  return HOST_PHYCOUNECT_FAIL;
 246   4                              }
 247   3                              delay(1000);
 248   3                              states = GetDescriptor(DeviceAddress,tc_StrProductName+0x0300,Stg_idx,0xFF);
 249   3              
 250   3                          if(states)  
 251   3                              {
 252   4                                      return HOST_GETDESCRIPTOR_FAIL;
 253   4                              }                       
 254   3                      }
 255   2              }
 256   1      
 257   1              //---- 80 06 00 01 00 00 12 00 ----
 258   1          if(gb_HostConnect == 0)
 259   1              {
 260   2                  return HOST_PHYCOUNECT_FAIL;
 261   2              }
 262   1              delay(1000);
 263   1          states = GetDescriptor(DeviceAddress,0x0100,0x00,0x12);
 264   1              if(states)
 265   1              {
 266   2                      return HOST_GETDESCRIPTOR_FAIL;
 267   2              }
 268   1      
 269   1              //---- 80 06 00 02 00 00 09 00 ----
 270   1              delay(1000);
 271   1              GetDescriptor(DeviceAddress,0x0200,0x00,0x09);
 272   1              //---- 80 06 00 02 00 00 xx 00 ----
 273   1              delay(1000);
 274   1              GetDescriptor(DeviceAddress,0x0200,0x00,ConfigurationDescriptorLength);
 275   1      
 276   1              CFGValue=XBYTE[HOST_BUF_SA+0x05];
 277   1      
 278   1              //---- Set Endpoint Value ----
 279   1              for(i=0;i<ConfigurationDescriptorLength;)
 280   1              {
 281   2                      if(XBYTE[HOST_BUF_SA+i]== 0x09)
 282   2                      {
 283   3                              i += 0x09;
 284   3                      }
 285   2                      else if(XBYTE[HOST_BUF_SA+i]== 0x07)
 286   2                      {
 287   3                              if((XBYTE[HOST_BUF_SA+i+1]==0x05)&&(XBYTE[HOST_BUF_SA+i+3]==0x02))
 288   3                  {                   
 289   4                                      if(XBYTE[HOST_BUF_SA+i+2]&0x80)
 290   4                      { 
 291   5                              EP_IN   = XBYTE[HOST_BUF_SA+i+2]&0x0F;
 292   5                              EP_flag = EP_flag + 0x01;
 293   5                      }
 294   4                      else
 295   4                      {              
 296   5                                      EP_OUT  = XBYTE[HOST_BUF_SA+i+2]&0x0F;  
 297   5                              EP_flag = EP_flag + 0x10;
 298   5                      }
 299   4                              }
 300   3                  if(EP_flag == 0x11)
 301   3                              {
 302   4                                      break;
C51 COMPILER V9.00   HOST_INIT                                                             07/10/2012 15:51:55 PAGE 6   

 303   4                              }
 304   3                  i += 0x07;
 305   3                      }
 306   2              else
 307   2                      {
 308   3                              i++;
 309   3                      }
 310   2              }
 311   1      
 312   1              //---- 80 06 00 03 00 00 02 00 ----
 313   1              delay(1000);
 314   1              GetDescriptor(DeviceAddress,0x0300,0x00,0x02);
 315   1              //---- 80 06 00 03 00 00 04 00 ----
 316   1              delay(1000);
 317   1              GetDescriptor(DeviceAddress,0x0300,0x00,0x04);
 318   1      
 319   1              //---- 80 06 SS 03 09 04 02 00 ----
 320   1              if(tc_StrSerialNum!=0)
 321   1              {
 322   2                      U8      tc_leng;
 323   2                      if(gb_HostConnect == 0)
 324   2                      {
 325   3                              return HOST_PHYCOUNECT_FAIL;
 326   3                      }
 327   2                      delay(1000);
 328   2                      states = GetDescriptor(DeviceAddress,0x300+tc_StrSerialNum,Stg_idx,0x02);
 329   2                      if(states) 
 330   2                      {
 331   3                              return HOST_GETDESCRIPTOR_FAIL;
 332   3                      }                       
 333   2      
 334   2                      tc_leng=XBYTE[HOST_BUF_SA];
 335   2      
 336   2                  if(gb_HostConnect == 0)
 337   2                      {
 338   3                          return HOST_PHYCOUNECT_FAIL;
 339   3                      }
 340   2                      delay(1000);
 341   2                  states = GetDescriptor(DeviceAddress,0x0300+tc_StrSerialNum,Stg_idx,tc_leng);
 342   2      
 343   2                  if(states)  
 344   2                      {
 345   3                              return HOST_GETDESCRIPTOR_FAIL;
 346   3                      }                       
 347   2              }
 348   1      
 349   1              //---- 00 09 xx 00 00 00 00 00 ----
 350   1              if(gb_HostConnect == 0)
 351   1              {
 352   2                      return HOST_PHYCOUNECT_FAIL;
 353   2              }
 354   1              delay(1000);
 355   1              states = SetConfiguration(DeviceAddress,CFGValue,0,0);
 356   1      
 357   1              //---- Get MaxLun ----
 358   1              if(gb_HostConnect == 0)
 359   1              {
 360   2              return HOST_PHYCOUNECT_FAIL;
 361   2              }
 362   1              gb_stall_flag=0;
 363   1              delay(1000);
 364   1              GetMAXLUN();
C51 COMPILER V9.00   HOST_INIT                                                             07/10/2012 15:51:55 PAGE 7   

 365   1              if(gb_stall_flag == 1)
 366   1              {
 367   2                      MaxLUN=0;
 368   2                      gb_stall_flag=0;
 369   2              }
 370   1      
 371   1              XBYTE[0xB01C]&=0xdf;    //Auto Ack in   
 372   1              delay(30000);
 373   1      
 374   1              SCSICMD_12_INQUIRY();
 375   1              delay(1000);
 376   1              states = SCSICMD_23_READFORMATCAPACITY();
 377   1              if(states!=0) 
 378   1              {
 379   2              return HOST_PHYCOUNECT_FAIL;            
 380   2              }
 381   1      
 382   1              if(gb_HostConnect == 0)
 383   1              {
 384   2              return HOST_PHYCOUNECT_FAIL;
 385   2              }
 386   1      
 387   1              Host_StallCmd_Timeout=0;
 388   1              while(1)
 389   1              {
 390   2                      states = SCSICMD_25_READCAPACITY();
 391   2                      if(gb_HostConnect == 0)
 392   2                      {
 393   3                      return HOST_PHYCOUNECT_FAIL;
 394   3                      }
 395   2      
 396   2                      if(Host_StallCmd_Timeout>60)
 397   2                      {
 398   3                              return 0x77;    // Initial fail 
 399   3                      }
 400   2      
 401   2                      if(states!=HOST_STALL)
 402   2                      {
 403   3                              break;
 404   3                      }
 405   2              }               
 406   1      
 407   1          gc_CurrentCard = CURRENT_MEDIA_HOST;
 408   1              gdw_pollingtime=3000;
 409   1              gdw_HOSTStartSectorRead=0xFFFFFFF0;
 410   1              states=HOST_Read_Logicsector(0);
 411   1      
 412   1              if(states==3)
 413   1              {       
 414   2                      goto USB_HOST_Init;
 415   2              }
 416   1              return 0;
 417   1      }
 418          
 419          
 420          U8 GetDescriptor(U8 addr,U16 wValue,U16 wIndex,U16 wLength)
 421          {
 422   1          data        bit     toggle = 1;
 423   1              data    U8      tc_state;
 424   1              data    U16     offset=0;
 425   1      
 426   1              XBYTE[HOST_BUF_SA]              =0x80;
C51 COMPILER V9.00   HOST_INIT                                                             07/10/2012 15:51:55 PAGE 8   

 427   1              XBYTE[HOST_BUF_SA+1]    =0x06;
 428   1              XBYTE[HOST_BUF_SA+2]    =(U8)(wValue&0xff);
 429   1              XBYTE[HOST_BUF_SA+3]    =(U8)((wValue>>8)&0xff);
 430   1              XBYTE[HOST_BUF_SA+4]    =(U8)(wIndex&0xff);
 431   1              XBYTE[HOST_BUF_SA+5]    =(U8)((wIndex>>8)&0xff);
 432   1              XBYTE[HOST_BUF_SA+6]    =(U8)(wLength&0xff);
 433   1              XBYTE[HOST_BUF_SA+7]    =(U8)((wLength>>8)&0xff);
 434   1      
 435   1          //trans Descript CMD    
 436   1              tran_setup(addr);
 437   1              tc_state = Host_phy_Command_check();
 438   1              
 439   1              if((tc_state!=0)&&(gb_HostInitial!=1))
 440   1              {
 441   2                      if(tc_state!=HOST_TEST_ERROR1)
 442   2                      {
 443   3                              return HOST_TRANSETUP_ERROR;
 444   3                      }
 445   2              }
 446   1      
 447   1              gb_shortpack=0;
 448   1          if(addr == 0x00) 
 449   1              {               
 450   2                      setup_in(addr, wLength, offset, toggle);
 451   2                      tc_state = Host_phy_Command_check();
 452   2      
 453   2                      if(tc_state!=0)
 454   2                      {
 455   3                              return HOST_SETUPIN_ERROR;
 456   3                      }
 457   2                      else
 458   2                      {
 459   3                              if(gb_HostConnect == 0)
 460   3                              {
 461   4                                      return HOST_PHYCOUNECT_FAIL;
 462   4                              }
 463   3                              setup_out(addr, 0, offset, 1);
 464   3      
 465   3                              tc_state = Host_phy_Command_check();
 466   3                              if((tc_state==HOST_TEST_ERROR)||(tc_state==HOST_TimeOut_ERROR))            
 467   3                              {
 468   4                              }
 469   3                              else if(tc_state)
 470   3                              {
 471   4                                      return HOST_SETUPOUT_ERROR;
 472   4                              }
 473   3                  else 
 474   3                              {
 475   4                                      return 0;
 476   4                      }
 477   3              }
 478   2              }
 479   1          else
 480   1          {
 481   2                      while (wLength>0)
 482   2              {
 483   3                      if(gb_HostConnect == 0)
 484   3                              {
 485   4                                      return HOST_PHYCOUNECT_FAIL;
 486   4                              }
 487   3      
 488   3                      if(wLength <  Max_Trans_Length) 
C51 COMPILER V9.00   HOST_INIT                                                             07/10/2012 15:51:55 PAGE 9   

 489   3                              {
 490   4                                      setup_in(addr, wLength, offset, toggle);
 491   4                                      tc_state = Host_phy_Command_check();
 492   4                              }
 493   3                      else 
 494   3                      {
 495   4                                      setup_in(addr, Max_Trans_Length, offset, toggle);
 496   4                                      tc_state = Host_phy_Command_check();
 497   4                              }
 498   3      
 499   3                              if(gb_shortpack==1)
 500   3                              {
 501   4                                      break;
 502   4                              }
 503   3                      if(tc_state != 0)
 504   3                      {
 505   4                      if(tc_state == 0x20)
 506   4                                      {
 507   5                              break;
 508   5                                      }
 509   4                      if((tc_state > 0x20)&&(offset>0))
 510   4                              {
 511   5                                              break;
 512   5                                      }
 513   4      
 514   4                      return HOST_SETUPIN_ERROR;
 515   4                      }
 516   3      
 517   3                      if((wValue>0x0300)&(offset == 0))
 518   3                      {
 519   4                                      if(wLength > XBYTE[HOST_BUF_SA])
 520   4                                      {
 521   5                                              wLength = XBYTE[HOST_BUF_SA];
 522   5                                      }
 523   4                      }
 524   3                      toggle ^= 1;
 525   3                      offset  = offset  + Max_Trans_Length;
 526   3        
 527   3                      if(wLength >= Max_Trans_Length)
 528   3                      {
 529   4                                      wLength = wLength - Max_Trans_Length;
 530   4                      }
 531   3                      else
 532   3                      {
 533   4                                      wLength = 0;
 534   4                              }
 535   3                      }
 536   2              }
 537   1      
 538   1          setup_out(addr, 0, offset, 1);
 539   1              tc_state = Host_phy_Command_check();
 540   1      
 541   1          if(tc_state)
 542   1              {
 543   2                      return HOST_SETUPOUT_ERROR;
 544   2              }
 545   1          else 
 546   1              {
 547   2                      return 0;
 548   2              }
 549   1      }
 550          //========================================================================================================
C51 COMPILER V9.00   HOST_INIT                                                             07/10/2012 15:51:55 PAGE 10  

             -==============
 551          void GetMAXLUN(void)
 552          {
 553   1              data    U8 tc_state;
 554   1      
 555   1              XBYTE[HOST_BUF_SA+0]=0xA1;
 556   1              XBYTE[HOST_BUF_SA+1]=0xFE;
 557   1              XBYTE[HOST_BUF_SA+2]=0x00;
 558   1              XBYTE[HOST_BUF_SA+3]=0x00;
 559   1              XBYTE[HOST_BUF_SA+4]=0x00;
 560   1              XBYTE[HOST_BUF_SA+5]=0x00;
 561   1              XBYTE[HOST_BUF_SA+6]=0x01;
 562   1              XBYTE[HOST_BUF_SA+7]=0x00;
 563   1          
 564   1              tran_setup(1);
 565   1              tc_state = Host_phy_Command_check();
 566   1              if(tc_state)
 567   1          {
 568   2                      Syn_Reset();
 569   2              return;
 570   2          }
 571   1              setup_in(1, 1, 0, 1);
 572   1              tc_state = Host_phy_Command_check();
 573   1              if(tc_state)
 574   1          {
 575   2                      Syn_Reset();
 576   2                      return;
 577   2          }
 578   1      
 579   1              setup_out(1, 0, 0, 1);
 580   1              tc_state = Host_phy_Command_check();
 581   1              if(tc_state == 0)
 582   1          {
 583   2                 MaxLUN=XBYTE[HOST_BUF_SA];
 584   2          }
 585   1              else
 586   1          {
 587   2                      Syn_Reset();
 588   2                      return;
 589   2          }    
 590   1      }
 591          
 592          
 593          U8 SetConfiguration(U8 addr, U16 wValue, U16 wIndex, U16 wLength)
 594          {
 595   1              data    U16     offset;
 596   1              xdata   U8      tc_state;
 597   1              
 598   1              XBYTE[HOST_BUF_SA]              =0x00;
 599   1              XBYTE[HOST_BUF_SA+1]    =0x09;
 600   1              XBYTE[HOST_BUF_SA+2]    =(U8)(wValue&0xff);
 601   1              XBYTE[HOST_BUF_SA+3]    =(U8)((wValue>>8)&0xff);
 602   1              XBYTE[HOST_BUF_SA+4]    =(U8)(wIndex&0xff);
 603   1              XBYTE[HOST_BUF_SA+5]    =(U8)((wIndex>>8)&0xff);
 604   1              XBYTE[HOST_BUF_SA+6]    =(U8)(wLength&0xff);
 605   1              XBYTE[HOST_BUF_SA+7]    =(U8)((wLength>>8)&0xff);
 606   1      
 607   1              offset = 0;
 608   1              tran_setup(addr);
 609   1              tc_state = Host_phy_Command_check();
 610   1      
 611   1          if(tc_state)
C51 COMPILER V9.00   HOST_INIT                                                             07/10/2012 15:51:55 PAGE 11  

 612   1              {
 613   2                      return HOST_TRANSETUP_ERROR;
 614   2              }
 615   1      
 616   1              delay(1000);
 617   1              setup_in(addr, 0, offset, 1);
 618   1              tc_state = Host_phy_Command_check();
 619   1      
 620   1          if(tc_state)
 621   1              {
 622   2                      return HOST_SETUPIN_ERROR;
 623   2              }
 624   1              else
 625   1              {
 626   2                      return 0;
 627   2              }
 628   1      }
 629          
 630          
 631          U8 SetAddress(void)
 632          {
 633   1              U8 tc_state;
 634   1      
 635   1              XBYTE[HOST_BUF_SA+0]=0x00;
 636   1              XBYTE[HOST_BUF_SA+1]=0x05;
 637   1              XBYTE[HOST_BUF_SA+2]=0x01;      // Address=1
 638   1              XBYTE[HOST_BUF_SA+3]=0x00;
 639   1              XBYTE[HOST_BUF_SA+4]=0x00;
 640   1              XBYTE[HOST_BUF_SA+5]=0x00;
 641   1              XBYTE[HOST_BUF_SA+6]=0x00;
 642   1              XBYTE[HOST_BUF_SA+7]=0x00;
 643   1      
 644   1              tran_setup(0);
 645   1              tc_state = Host_phy_Command_check();
 646   1      
 647   1              if(tc_state)
 648   1              {
 649   2                      return HOST_TRANSETUP_ERROR;
 650   2              }
 651   1      
 652   1              delay(1000);
 653   1      
 654   1              setup_in(0, 0, 0, 1);
 655   1              tc_state = Host_phy_Command_check();
 656   1      
 657   1              if(tc_state)
 658   1              {
 659   2                      return HOST_SETUPIN_ERROR;
 660   2              }
 661   1              else
 662   1              {
 663   2                      return 0;
 664   2              }
 665   1      }
 666          
 667          
 668          U8 SCSICMD_25_READCAPACITY(void)
 669          {
 670   1              code    U8      READ_CAPACITY[31]={0x55,0x53,0x42,0x43,0x55,0xAA,0xBB,0x05,0x08,0x00,0x00,0x00,0x80,0x00,0x0A,0x2
             -5,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};
 671   1              data    U8      tc_state;
 672   1              xdata   U8      i;
C51 COMPILER V9.00   HOST_INIT                                                             07/10/2012 15:51:55 PAGE 12  

 673   1      
 674   1              // Prepare CBW data
 675   1              for(i=0;i<31;i++)
 676   1              {
 677   2                      XBYTE[HOST_BUF_SA+i]=READ_CAPACITY[i];
 678   2              }
 679   1      
 680   1              // OUT CBW
 681   1              tran_out(DeviceAddress, 31); 
 682   1              Host_phy_Command_check();
 683   1              delay(1000);    //for action mp3 player
 684   1      
 685   1              // IN data
 686   1              tran_in(DeviceAddress, 8 , 0);
 687   1              tc_state=Host_phy_Command_check();
 688   1      
 689   1              gc_HostSectorUnit=XBYTE[HOST_BUF_SA+6]/2;
 690   1      
 691   1              if(!tc_state)
 692   1              {
 693   2                      ((U8 *)(&gdw_CARD_TotalSizeMB))[0]=XBYTE[HOST_BUF_SA+0];
 694   2                      ((U8 *)(&gdw_CARD_TotalSizeMB))[1]=XBYTE[HOST_BUF_SA+1];
 695   2                      ((U8 *)(&gdw_CARD_TotalSizeMB))[2]=XBYTE[HOST_BUF_SA+2];
 696   2                      ((U8 *)(&gdw_CARD_TotalSizeMB))[3]=XBYTE[HOST_BUF_SA+3];
 697   2              }
 698   1      
 699   1              if(tc_state==HOST_STALL)
 700   1              {
 701   2                      Host_StallCmd_Timeout++;
 702   2                      gb_dtg_in=0;
 703   2                      ClearFeature(DeviceAddress,0,EP_IN,0);
 704   2                      tran_in(DeviceAddress, 13, 0);
 705   2                      tc_state = Host_phy_Command_check();
 706   2      
 707   2                      if(tc_state!=0) // 20080620
 708   2                      {
 709   3                              return tc_state;
 710   3                      }                           
 711   2                      SCSICMD_03_REQUESTSENSE();
 712   2                      delay(10000);
 713   2                      return HOST_STALL;
 714   2              }
 715   1      
 716   1              if(tc_state!=0)
 717   1              {
 718   2                      gb_dtg_in=0;
 719   2                      Syn_Reset();
 720   2                      ClearFeature(DeviceAddress,0,EP_IN,0);
 721   2              }
 722   1              // IN CSW
 723   1              delay(1000);
 724   1              tran_in(DeviceAddress, 13, 0);
 725   1              Host_phy_Command_check();
 726   1                      
 727   1              if(XBYTE[HOST_BUF_SA+12]!=0)
 728   1              {
 729   2                      SCSICMD_03_REQUESTSENSE();
 730   2                      return 1;
 731   2              }
 732   1              else
 733   1              {
 734   2                      return 0;
C51 COMPILER V9.00   HOST_INIT                                                             07/10/2012 15:51:55 PAGE 13  

 735   2              }
 736   1      }
 737          
 738          
 739          U8 SCSICMD_23_READFORMATCAPACITY(void)
 740          {
 741   1              xdata   U8      i;
 742   1              data    U8      j;
 743   1              data    U8      tc_state;
 744   1              code    U8      READ_FORMAT_CAPACITY[31]={0x55,0x53,0x42,0x43,0x55,0xAA,0xBB,0x05,0xFC,0x00,0x00,0x00,0x80,0x00,0
             -x0A,0x23,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFC,0x00,0x00,0x00,0x00,0x00,0x00,0x00};
 745   1      
 746   1              while(1)
 747   1              {
 748   2                      // Prepare CBW data
 749   2                  for(i=0;i<31;i++)           
 750   2                      {
 751   3                      XBYTE[HOST_BUF_SA+i]=READ_FORMAT_CAPACITY[i];
 752   3                      }               
 753   2              
 754   2                      // OUT CBW
 755   2                      tran_out(DeviceAddress, 31); 
 756   2                      Host_phy_Command_check();
 757   2                      delay(1000);
 758   2      
 759   2                      // IN data(The data is useless)
 760   2                      if(gb_HostConnect == 0)
 761   2                      { 
 762   3                              return HOST_PHYCOUNECT_FAIL;
 763   3                      }       
 764   2                      for(j=0;j<4;j++)
 765   2                      {
 766   3                              gb_shortpack=0;
 767   3                              tran_in(DeviceAddress, 64, 0);
 768   3                              tc_state = Host_phy_Command_check();               
 769   3                              if((gb_shortpack==1)||(tc_state==HOST_STALL)) // 20080620
 770   3                              {
 771   4                                      break;
 772   4                              }
 773   3                      }
 774   2      
 775   2                      if(tc_state==HOST_STALL)
 776   2                      {                       
 777   3                              gb_dtg_in=0;
 778   3                              ClearFeature(DeviceAddress,0,EP_IN,0);
 779   3                              tran_in(DeviceAddress, 13, 0);
 780   3                              tc_state = Host_phy_Command_check();
 781   3              
 782   3                              if(tc_state!=0) // 20080620
 783   3                              {
 784   4                                      return tc_state;
 785   4                              }               
 786   3                      delay(10000);
 787   3                              SCSICMD_03_REQUESTSENSE();
 788   3                              delay(10000);
 789   3                      }
 790   2                      else
 791   2                      {
 792   3                              // 20080623
 793   3                              tran_in_(DeviceAddress, 13, 0);
 794   3                              tc_state=Host_phy_Command_check();
 795   3                              if(tc_state==HOST_STALL)
C51 COMPILER V9.00   HOST_INIT                                                             07/10/2012 15:51:55 PAGE 14  

 796   3                              {
 797   4                                      gb_dtg_in=0;
 798   4                                      ClearFeature(DeviceAddress,0,EP_IN,0);
 799   4                                      tran_in(DeviceAddress, 13, 0);
 800   4                                      Host_phy_Command_check();
 801   4                              }
 802   3                              return 0;
 803   3                      }
 804   2      
 805   2                      if(gb_Repeat==0)
 806   2                      {
 807   3                              return 0;
 808   3                      }
 809   2              }
 810   1      }
 811          
 812          
 813          U8 SCSICMD_12_INQUIRY(void)
 814          {
 815   1              xdata   U8      i;
 816   1              xdata   U8      tc_state;
 817   1              xdata   U16     Offset;
 818   1              code    U8      INQUIRY[31]={0x55,0x53,0x42,0x43,0xf8,0x98,0x56,0x85,0x24,0x00,0x00,0x00,0x80,0x00,0x06,0x12,0x00
             -,0x00,0x00,0x24,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};
 819   1      
 820   1              // Prepare CBW data
 821   1          for(i=0;i<31;i++)
 822   1              {
 823   2                      XBYTE[HOST_BUF_SA+i]=INQUIRY[i];
 824   2              }
 825   1      
 826   1              // OUT CBW
 827   1              if(gb_HostConnect == 0)
 828   1              {
 829   2                      return HOST_PHYCOUNECT_FAIL;
 830   2              }
 831   1              Offset = 0;
 832   1              tran_out(DeviceAddress, 31);
 833   1          Host_phy_Command_check();
 834   1      
 835   1              delay(1000);    //for action mp3 player
 836   1              
 837   1              // IN data      
 838   1              if(gb_HostConnect == 0) 
 839   1              {
 840   2                      return HOST_PHYCOUNECT_FAIL;
 841   2              }
 842   1      
 843   1              for(i=0;i<250;i++)
 844   1              {
 845   2                      tran_in(DeviceAddress, 36, Offset);
 846   2                      tc_state=Host_phy_Command_check();              
 847   2                      if((tc_state==0)&&(gb_shortpack==0))
 848   2                      {
 849   3                              break;
 850   3                      }
 851   2                      gb_dtg_in = (!gb_dtg_in);
 852   2              }
 853   1      
 854   1              // IN CSW
 855   1              if(gb_HostConnect == 0)
 856   1              { 
C51 COMPILER V9.00   HOST_INIT                                                             07/10/2012 15:51:55 PAGE 15  

 857   2                      return HOST_PHYCOUNECT_FAIL;
 858   2              }
 859   1      
 860   1              for(i=0;i<20;i++)
 861   1              {
 862   2                      tran_in(DeviceAddress, 13, Offset);
 863   2                      tc_state=Host_phy_Command_check();              
 864   2                      if((tc_state==0)&&(gb_shortpack==0))
 865   2                      {
 866   3                              break;
 867   3                      }
 868   2                      gb_dtg_in = (!gb_dtg_in);
 869   2              }
 870   1              return 0;
 871   1      }
 872          
 873          
 874          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   2486    ----
   CONSTANT SIZE    =     93    ----
   XDATA SIZE       =      9      19
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----      16
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      4       1
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
