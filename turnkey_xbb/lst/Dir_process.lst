C51 COMPILER V7.10   DIR_PROCESS                                                           02/28/2011 10:30:46 PAGE 1   


C51 COMPILER V7.10, COMPILATION OF MODULE DIR_PROCESS
OBJECT MODULE PLACED IN .\obj\Dir_process.obj
COMPILER INVOKED BY: F:\Keil C 7.10\chengxu\C51\BIN\C51.EXE DIR\Dir_process.c LARGE OPTIMIZE(9,SIZE) BROWSE NOAREGS INCD
                    -IR(..\libsource\header) DEFINE(K_ICTYPE=0x03) DEBUG OBJECTEXTEND PRINT(.\lst\Dir_process.lst) OBJECT(.\obj\Dir_process.o
                    -bj)

line level    source

   1          #include <string.h>
   2          #include "..\Header\SPDA2K.h"
   3          #include "..\header\dos\fs_struct.h"
   4          #include "Dir_process.h"
   5          #include "..\header\Memalloc.h"
   6          #include "..\LCM\model_define.h"//(JC)H1124
   7          #include "..\Header\unicode_hzk.h"
   8          #include "..\header\variables.h"
   9          #include "..\LCM\TFT_config.h"
  10          #include "..\LCM\TFT_display.h"
  11          #include "..\header\host_init.h"
  12          
  13          #define USE_TFT_disp_HZKCharBMP
  14          #define USE_UI_StringTrigger
  15          #define USE_UI_get_string_hzk_bitmap
  16          #define USE_UI_render_strings
  17          
  18          #include "..\LCM\LCM.h"
  19          #include "..\LCM\LCM_func.h"
  20          #include "..\LCM\UI_icon.h"
  21          
  22          #include "..\LCM\common_LCM_func.c"
  23          #include "..\UI_Display\common_UI_disp_func.c"
  24          #include "..\UI_Display\unicode_hzk.c"
  25          
  26          xdata   U8      gc_IconType;
  27          xdata   U8      gc_IconY;
  28          xdata   U16     gc_DispFilePage,gc_DispFilePageBak;
  29          
  30          extern xdata System_Struct gs_System_State;
  31            /*
  32          #define C_LCM_ROW_MAX   5
  33          #define C_BUF_LENGTH    85 //512/6
  34          #define C_BUF_STRING    80 //取小於85-5且為偶數者
  35             */
  36          
  37          U8 DOS_DIRtable(void);
  38          U8 DOS_Search_DIR(U8 tc_Mode);
  39          U8 Count_Dir_Fdb(SearchFdb *p_mp);
  40          void USER_MarkTable(U8 tc_MarkFlag);
  41          void USER_GetUISetIndex(void);
  42          U8 LCD_disp_HZK_string(U8 Page,U8 *DataBuf,U8 tc_ISNOrUnicode, U8 nByte,U8 ColumnOffset,bit reverse);
  43          void UI_DispGetDirName(U8 tc_DIRtableIndex);
  44          void FatherDir_FDBInit(U16 tw_FatherIndex);
  45          void Get_TotalNumber(U16 tw_DirIndex);
  46          void UI_DispGet_FatherName(void);
  47          void UI_DispGet_ChildName(void);
  48          void LCD_Disp_FatherName_Dir(void);
  49          void LCD_erase_one_page(U8 tc_page);
  50          void UI_Disp_ChildName();
  51          void DirManagement_Init();
  52          void UI_DIRStoreOrRecover(bit tb_SaveOrRecover);
  53          void DirManagement_Process();
C51 COMPILER V7.10   DIR_PROCESS                                                           02/28/2011 10:30:46 PAGE 2   

  54          void Dir_Task();
  55          
  56          U8 GetCurrentDirInfo();
  57          
  58          extern  U8   Find_Fdb(SearchFdb *p_mp);
  59          extern  U8   Get_LogData_PageIndex(void);
  60          extern  U8   USER_LogFile_ReadWrite(U8 tbt_ReadOrWrite);
  61          extern void ir_service_menu(void);  //20090206 chiayen add for IR_DIR
  62          
  63          extern UBYTE  xdata EXT_NameC[];
  64          extern  data    bit     gb_TFT_refresh;
  65          data bit gb_SourceChange_Dir=0;
  66          bit gbt_DIRwFakeFDB=0;
  67          
  68          
  69          U8 DOS_DIRtable(void)
  70          {
  71   1              U32 tdw_LongFDB_LogAdd1;
  72   1              U16 tw_DirTabNum, tw_DirTotalNumber;
  73   1              U16 tw_TempTotalNum; //add for the sum of dir and file number in one directory
  74   1              U16 tw_DirIndex[2];
  75   1              U16 tw_FatherIndex, tw_OldFatherIndex;
  76   1              U8  tc_DirTableNo, tc_IndexInOneDir;
  77   1              U8  tc_SpanNumber; //跨越2KB Page的標誌位, 0: 1st page, 1: 2nd page...
  78   1              U8      tc_CurrentCard = gc_CurrentCard; //Ching 090306
  79   1              bit tb_HasNextDirFlag=0;
  80   1      
  81   1              if(tc_CurrentCard!=0)  //20090721 chiayen add for host
  82   1              {
  83   2                      tc_CurrentCard=2;       
  84   2              }
  85   1              
  86   1              if(!tc_CurrentCard)
  87   1              {
  88   2                      gc_DirReBuildFlag=D_Expired;//Mark DirTable is In-Valid
  89   2                      USER_MarkTable(gc_DirReBuildFlag);//在保留區標誌DirTable無效，防止建立Table時突然掉電
  90   2                      gc_SetIndex++; //NandFlash
  91   2              }
  92   1              else    
  93   1              {
  94   2                      gc_SDSetIndex++; //SD or HOST
  95   2              }
  96   1      
  97   1              memset(gc_DIRtable,0,2048);     //clear buffer gc_DIRtable
  98   1              memset(gc_DirLCMtempBuf,0,512); //clear buffer gc_DIRtable
  99   1              {//1st 32-byte is used for root dir, whose father/previous/next folder are still root dir (Offset 0)
 100   2                      gs_DIRtable[0].c_occupied_flag          = 1;
 101   2                      gs_DIRtable[0].dw_File_StartCluster     = gdw_DOS_RootDirClus;
 102   2                      gs_DIRtable[0].dw_FDB_StartCluster      = gdw_DOS_RootDirClus;
 103   2      
 104   2                      tw_DirIndex[0]=0;
 105   2                      tw_DirIndex[1]=0;
 106   2                      tdw_LongFDB_LogAdd1 = gs_DIR_FCB[0].dw_LongFDB_LogAdd1;
 107   2                      gs_DIR_FCB[0].dw_FDB_StartCluster       = gs_DIRtable[0].dw_File_StartCluster;
 108   2                      gs_File_FCB[0].dw_FDB_StartCluster      = gs_DIRtable[0].dw_File_StartCluster;
 109   2                      gb_FindFlag = 0;
 110   2                      DOS_Search_DIR(0x3b);                   //count directory number in this directory, get gw_DirTotalNumber
 111   2                      DOS_Search_File(0x10,0,0x10);   //count file number in this directory, get gw_FileTotalNumber[0]
 112   2      
 113   2                      if(gw_DirTotalNumber>=0xff)
 114   2                      {
 115   3                              gw_DirTotalNumber=0xff;
C51 COMPILER V7.10   DIR_PROCESS                                                           02/28/2011 10:30:46 PAGE 3   

 116   3                      }
 117   2      
 118   2                      tw_TempTotalNum=gw_DirTotalNumber+gw_FileTotalNumber[0];
 119   2      
 120   2                      gs_DIRtable[0].w_file_folder_num        = tw_TempTotalNum;
 121   2                      gs_DIRtable[0].c_file_num_hi            = ((U8 *)(&gw_FileTotalNumber[0]))[0];//save file number High 8bit of this
             - directory
 122   2                      gs_DIRtable[0].c_file_num_lo            = ((U8 *)(&gw_FileTotalNumber[0]))[1];//save file number Low 8bit of this 
             -directory
 123   2                      gs_DIRtable[0].c_subdir_num                     = ((U8 *)(&gw_DirTotalNumber))[1];      //save dir number of this directory
 124   2      
 125   2                      if(gs_DIRtable[0].c_subdir_num == 0) //No Directory
 126   2                  {
 127   3                              USER_WriteReserveBlock_DIR(0, tc_CurrentCard);
 128   3      //                      dbprintf("NoDir\n");
 129   3                              if(!tc_CurrentCard)
 130   3                              {
 131   4                              gc_DirReBuildFlag=0x55; //Mark DirTable is Valid, Ching 081003
 132   4                              USER_MarkTable(gc_DirReBuildFlag);
 133   4                              }
 134   3                              return 2;
 135   3                      }
 136   2                      else
 137   2                      {
 138   3                              gs_DIRtable[0].c_index_child_folder = 1;
 139   3                      }
 140   2      
 141   2                      tc_SpanNumber = 0;//前63個目錄信息和Root目錄信息(32x64=共2KB),存在第1個2K Page
 142   2                      tw_FatherIndex=0;
 143   2                      tc_IndexInOneDir=1;
 144   2                      tw_DirTotalNumber=gw_DirTotalNumber;
 145   2              }
 146   1      
 147   1              for( tw_DirTabNum=1; tw_DirTabNum<256; tw_DirTabNum++ )//擴展到256個Dir
 148   1              {
 149   2                      tc_DirTableNo = tw_DirTabNum&63;
 150   2                      if(tw_DirTabNum > tw_DirTotalNumber)
 151   2                      {
 152   3                              USER_WriteReserveBlock_DIR(tc_SpanNumber, tc_CurrentCard);
 153   3                              break;
 154   3                      }
 155   2      
 156   2                      if(tc_SpanNumber)//當目錄存儲信息有跨2K Page時
 157   2                      {
 158   3                              if((tw_FatherIndex&0xC0)!=(tw_DirTabNum&0xC0)) //Father Dir and Child Dir aren't in the same page
 159   3                                      USER_Read512BReserveBlock_DIR(tw_FatherIndex, tc_CurrentCard); //gc_UserDataBuf
 160   3                              else
 161   3                                      memcpy(&gc_UserDataBuf[0], &gc_DIRtable[((tw_FatherIndex&0x3F)<<5)&0xFE00], 512); //>>4<<9
 162   3                              if(tc_IndexInOneDir <= gc_UserDataBuf[((tw_FatherIndex&0x0F)<<5)+0x1f]) //同一層目錄信息(Total Dir Num)
 163   3                              {
 164   4                                      if(tc_IndexInOneDir == gc_UserDataBuf[((tw_FatherIndex&0x0F)<<5)+0x1f]) tb_HasNextDirFlag=0; //it's th
             -e last dir in its father dir
 165   4                                      else tb_HasNextDirFlag=1;
 166   4      
 167   4                                      if(tc_DirTableNo)
 168   4                                      {
 169   5                                              gs_DIR_FCB[0].dw_File_StartCluster      = gs_DIRtable[tc_DirTableNo-1].dw_File_StartCluster;
 170   5                                              gs_DIR_FCB[0].dw_FDB_StartCluster       = gs_DIRtable[tc_DirTableNo-1].dw_FDB_StartCluster;
 171   5                                              gs_DIR_FCB[0].dw_LongFDB_LogAdd0        = gs_DIRtable[tc_DirTableNo-1].dw_LongFDB_LogAdd0;
 172   5                                              gs_DIR_FCB[0].dw_FDB_Cluster            = gs_DIRtable[tc_DirTableNo-1].dw_FDB_Cluster;
 173   5                                              gs_DIR_FCB[0].dw_FDB_LogAdd                     = gs_DIRtable[tc_DirTableNo-1].dw_FDB_LogAdd;
 174   5                                              gs_DIR_FCB[0].w_FDB_Offset                      = gs_DIRtable[tc_DirTableNo-1].w_FDB_Offset;
C51 COMPILER V7.10   DIR_PROCESS                                                           02/28/2011 10:30:46 PAGE 4   

 175   5                                      }
 176   4                                      else
 177   4                                      {
 178   5                                              USER_Read512BReserveBlock_DIR(tw_DirTabNum-1, tc_CurrentCard); //gc_UserDataBuf
 179   5                                              gs_DIR_FCB[0].dw_File_StartCluster      = *((U32 *)&gc_UserDataBuf[480+0x01]); 
 180   5                                              gs_DIR_FCB[0].dw_FDB_StartCluster       = *((U32 *)&gc_UserDataBuf[480+0x05]);
 181   5                                              gs_DIR_FCB[0].dw_LongFDB_LogAdd0        = *((U32 *)&gc_UserDataBuf[480+0x09]);
 182   5                                              gs_DIR_FCB[0].dw_FDB_Cluster            = *((U32 *)&gc_UserDataBuf[480+0x0d]);
 183   5                                              gs_DIR_FCB[0].dw_FDB_LogAdd                     = *((U32 *)&gc_UserDataBuf[480+0x11]);
 184   5                                              gs_DIR_FCB[0].w_FDB_Offset                      = *((U16 *)&gc_UserDataBuf[480+0x15]);
 185   5                                      }
 186   4                                      gw_DirIndex[0] = tw_DirIndex[0];
 187   4                                      gw_DirIndex[1] = tw_DirIndex[1];
 188   4                                      gs_DIR_FCB[0].dw_LongFDB_LogAdd1 = tdw_LongFDB_LogAdd1;
 189   4                              }
 190   3                              else 
 191   3                              {
 192   4                                      tc_IndexInOneDir = 1;
 193   4      
 194   4                                      tw_OldFatherIndex = tw_FatherIndex;
 195   4                                      tw_FatherIndex++;
 196   4                                      if(tw_FatherIndex > tw_DirTotalNumber) 
 197   4                                      {
 198   5                                              return 1;
 199   5                                      }
 200   4      
 201   4                                      if((tw_FatherIndex&0x30)!=(tw_OldFatherIndex&0x30)) //not in the same sector
 202   4                                      {
 203   5                                              if((tw_FatherIndex&0xC0)!=(tw_DirTabNum&0xC0))  //need to read from reserved block
 204   5                                                      USER_Read512BReserveBlock_DIR(tw_FatherIndex, tc_CurrentCard); //gc_UserDataBuf
 205   5                                              else
 206   5                                                      memcpy(gc_UserDataBuf, &gc_DIRtable[((tw_FatherIndex&0x3F)<<5)&0xFE00], 512); //>>4<<9
 207   5                                      }
 208   4      
 209   4                                      while(gc_UserDataBuf[((tw_FatherIndex&0x0F)<<5)+0x1f]==0)
 210   4                                      {
 211   5                                              tw_OldFatherIndex = tw_FatherIndex; //Ching 081218
 212   5                                              tw_FatherIndex++;
 213   5                                              if(tw_FatherIndex > tw_DirTotalNumber) 
 214   5                                              {
 215   6                                                      return 1;
 216   6                                              }
 217   5      
 218   5                                              if((tw_FatherIndex&0x30)!=(tw_OldFatherIndex&0x30)) //not in the same sector
 219   5                                              {
 220   6                                                      if((tw_FatherIndex&0xC0)!=(tw_DirTabNum&0xC0))  //need to read from reserved block
 221   6                                                              USER_Read512BReserveBlock_DIR(tw_FatherIndex, tc_CurrentCard); //gc_UserDataBuf
 222   6                                                      else
 223   6                                                              memcpy(gc_UserDataBuf, &gc_DIRtable[((tw_FatherIndex&0x3F)<<5)&0xFE00], 512); //>>4<<9
 224   6                                              }
 225   5                                      }
 226   4                                      if(tc_IndexInOneDir == gc_UserDataBuf[((tw_FatherIndex&0x0F)<<5)+0x1f]) tb_HasNextDirFlag=0; //it's th
             -e last dir in its father dir
 227   4                                      else tb_HasNextDirFlag=1;
 228   4      
 229   4                                      gw_DirIndex[0] = 0;//tw_DirIndex[0];
 230   4                                      gw_DirIndex[1] = 0;//tw_DirIndex[1];
 231   4                                      gs_DIR_FCB[0].dw_LongFDB_LogAdd1 = tdw_LongFDB_LogAdd1;
 232   4                                      gs_File_FCB[0].dw_FDB_StartCluster      = *((U32 *)&gc_UserDataBuf[((tw_FatherIndex&0x0F)<<5)+0x01]); //cou
             -nt which directory for file
 233   4                                      gs_DIR_FCB[0].dw_FDB_StartCluster       = *((U32 *)&gc_UserDataBuf[((tw_FatherIndex&0x0F)<<5)+0x01]); //from
             - which cluster to search      
C51 COMPILER V7.10   DIR_PROCESS                                                           02/28/2011 10:30:46 PAGE 5   

 234   4                              }
 235   3                      }//if(tc_SpanNumber)//當目錄存儲信息有跨2K Page時
 236   2                      else
 237   2                      {
 238   3                              if( tc_IndexInOneDir <= gs_DIRtable[tw_FatherIndex].c_subdir_num)//同一層目錄信息(Total Dir Num)
 239   3                              {
 240   4                                      if(tc_IndexInOneDir == gs_DIRtable[tw_FatherIndex].c_subdir_num)
 241   4                                              tb_HasNextDirFlag=0; //it's the last dir in its father dir
 242   4                                      else
 243   4                                              tb_HasNextDirFlag=1;
 244   4      
 245   4                                      gs_DIR_FCB[0].dw_File_StartCluster      = gs_DIRtable[tc_DirTableNo-1].dw_File_StartCluster;
 246   4                                      gs_DIR_FCB[0].dw_FDB_StartCluster       = gs_DIRtable[tc_DirTableNo-1].dw_FDB_StartCluster;
 247   4                                      gs_DIR_FCB[0].dw_LongFDB_LogAdd0        = gs_DIRtable[tc_DirTableNo-1].dw_LongFDB_LogAdd0;
 248   4                                      gs_DIR_FCB[0].dw_FDB_Cluster            = gs_DIRtable[tc_DirTableNo-1].dw_FDB_Cluster;
 249   4                                      gs_DIR_FCB[0].dw_FDB_LogAdd                     = gs_DIRtable[tc_DirTableNo-1].dw_FDB_LogAdd;
 250   4                                      gs_DIR_FCB[0].w_FDB_Offset                      = gs_DIRtable[tc_DirTableNo-1].w_FDB_Offset;
 251   4      
 252   4                                      gw_DirIndex[0] = tw_DirIndex[0];
 253   4                                      gw_DirIndex[1] = tw_DirIndex[1];
 254   4                                      gs_DIR_FCB[0].dw_LongFDB_LogAdd1 = tdw_LongFDB_LogAdd1;
 255   4                              }
 256   3                              else 
 257   3                              {
 258   4                                      tc_IndexInOneDir = 1;
 259   4                                      tw_FatherIndex++;
 260   4                                      if(tw_FatherIndex > tw_DirTotalNumber) 
 261   4                                      {
 262   5                                              return 1;
 263   5                                      }
 264   4      
 265   4                                      while(gs_DIRtable[tw_FatherIndex].c_subdir_num==0)
 266   4                                      {
 267   5                                              tw_FatherIndex++;
 268   5                                              if(tw_FatherIndex > tw_DirTotalNumber) 
 269   5                                              {
 270   6                                                      return 1;
 271   6                                              }
 272   5                                      }
 273   4                                      if(tc_IndexInOneDir == gs_DIRtable[tw_FatherIndex].c_subdir_num)
 274   4                                              tb_HasNextDirFlag=0; //it's the last dir in its father dir
 275   4                                      else
 276   4                                              tb_HasNextDirFlag=1;
 277   4      
 278   4                                      gw_DirIndex[0] = 0;
 279   4                                      gw_DirIndex[1] = 0;
 280   4                                      gs_DIR_FCB[0].dw_LongFDB_LogAdd1 = tdw_LongFDB_LogAdd1;
 281   4      
 282   4                                      gs_File_FCB[0].dw_FDB_StartCluster      = gs_DIRtable[tw_FatherIndex].dw_File_StartCluster; //count which d
             -irectory for file
 283   4                                      gs_DIR_FCB[0].dw_FDB_StartCluster       = gs_DIRtable[tw_FatherIndex].dw_File_StartCluster; //from which clu
             -ster to search        
 284   4                              }
 285   3                      }
 286   2      
 287   2                      if( DOS_Search_DIR(0x33) ) //search dir by order in one directory
 288   2                      {
 289   3                              return 1; //Read Error or no dir be found(not reasonable)
 290   3                      }
 291   2      
 292   2                      gs_DIRtable[tc_DirTableNo].c_occupied_flag              = 1;    //mark this 32Bytes is used to save the information of 
             -the found dir
C51 COMPILER V7.10   DIR_PROCESS                                                           02/28/2011 10:30:46 PAGE 6   

 293   2                      gs_DIRtable[tc_DirTableNo].dw_File_StartCluster = gs_DIR_FCB[0].dw_File_StartCluster;
 294   2                      gs_DIRtable[tc_DirTableNo].dw_FDB_StartCluster  = gs_DIR_FCB[0].dw_FDB_StartCluster;
 295   2                      gs_DIRtable[tc_DirTableNo].dw_LongFDB_LogAdd0   = gs_DIR_FCB[0].dw_LongFDB_LogAdd0;
 296   2                      gs_DIRtable[tc_DirTableNo].dw_FDB_Cluster               = gs_DIR_FCB[0].dw_FDB_Cluster;
 297   2                      gs_DIRtable[tc_DirTableNo].dw_FDB_LogAdd                = gs_DIR_FCB[0].dw_FDB_LogAdd;
 298   2                      gs_DIRtable[tc_DirTableNo].w_FDB_Offset                 = gs_DIR_FCB[0].w_FDB_Offset;
 299   2                      
 300   2                      tw_DirIndex[0]=gw_DirIndex[0];
 301   2                      tw_DirIndex[1]=gw_DirIndex[1];
 302   2                      tdw_LongFDB_LogAdd1=gs_DIR_FCB[0].dw_LongFDB_LogAdd1;
 303   2                              
 304   2                      gs_DIR_FCB[0].dw_FDB_StartCluster       = gs_DIRtable[tc_DirTableNo].dw_File_StartCluster; //count which direc
             -tory for dir
 305   2                      gs_File_FCB[0].dw_FDB_StartCluster      = gs_DIRtable[tc_DirTableNo].dw_File_StartCluster; //count which dire
             -ctory for file
 306   2                      gb_FindFlag=0;
 307   2                      DOS_Search_DIR(0x3b);                   //count directory number in this directory, get gw_DirTotalNumber
 308   2                      if(!gbt_DIRwFakeFDB) //Ching 090420
 309   2                      {
 310   3                              DOS_Search_File(0x10,0,0x10);   //count file number in this directory, get gw_FileTotalNumber[0]
 311   3                              if(gw_DirTotalNumber>=0xff)     
 312   3                              {
 313   4                                      gw_DirTotalNumber=0xff;
 314   4                              }
 315   3                              tw_TempTotalNum=gw_DirTotalNumber+gw_FileTotalNumber[0];
 316   3                      }
 317   2                      else
 318   2                      {
 319   3                              gbt_DIRwFakeFDB=0;
 320   3                              gw_DirTotalNumber=0;
 321   3                              gw_FileTotalNumber[0]=0;
 322   3                              tw_TempTotalNum=0;
 323   3                      }
 324   2      
 325   2                      gs_DIRtable[tc_DirTableNo].w_file_folder_num = tw_TempTotalNum; //save total number of dir and file in t
             -his directory
 326   2                      gs_DIRtable[tc_DirTableNo].c_file_num_hi = ((U8 *)(&gw_FileTotalNumber[0]))[0]; //save file number High 
             -8bit of this directory
 327   2                      gs_DIRtable[tc_DirTableNo].c_file_num_lo = ((U8 *)(&gw_FileTotalNumber[0]))[1]; //save file number Low 8
             -bit of this directory
 328   2                      gs_DIRtable[tc_DirTableNo].c_subdir_num = ((U8 *)(&gw_DirTotalNumber))[1];              //save dir number of this di
             -rectory
 329   2                      gs_DIRtable[tc_DirTableNo].c_index_parent_folder = tw_FatherIndex;
 330   2      
 331   2                      //child folder
 332   2                      if(gw_DirTotalNumber>0)
 333   2                      {
 334   3                              if(tw_DirTotalNumber>=255)
 335   3                                      gs_DIRtable[tc_DirTableNo].c_index_child_folder = tw_DirTabNum; //OverSize, then set itself to child f
             -older
 336   3                              else
 337   3                                      gs_DIRtable[tc_DirTableNo].c_index_child_folder = tw_DirTotalNumber+1;
 338   3                      }
 339   2                      else
 340   2                              gs_DIRtable[tc_DirTableNo].c_index_child_folder = tw_DirTabNum;
 341   2      
 342   2                      //prev folder
 343   2                      if(tc_IndexInOneDir==1) //1st dir in some dir, set itself to prev dir
 344   2                              gs_DIRtable[tc_DirTableNo].c_index_prev_folder = tw_DirTabNum;
 345   2                      else 
 346   2                              gs_DIRtable[tc_DirTableNo].c_index_prev_folder = tw_DirTabNum-1;//prev folder
 347   2      
C51 COMPILER V7.10   DIR_PROCESS                                                           02/28/2011 10:30:46 PAGE 7   

 348   2                      //next folder
 349   2                      if(tb_HasNextDirFlag)
 350   2                              gs_DIRtable[tc_DirTableNo].c_index_next_folder = tw_DirTabNum+1;
 351   2                      else
 352   2                              gs_DIRtable[tc_DirTableNo].c_index_next_folder = tw_DirTabNum;
 353   2      
 354   2                      tc_IndexInOneDir++;     
 355   2                      tw_DirTotalNumber += gw_DirTotalNumber;
 356   2      
 357   2                      if((tw_DirTabNum&0x3F)==0x3F)
 358   2                      {//處理超過64個目錄
 359   3                      USER_WriteReserveBlock_DIR(tc_SpanNumber, tc_CurrentCard);
 360   3                              memset(gc_DIRtable,0,2048);     //clear buffer gc_DIRtable
 361   3                              tc_SpanNumber++;
 362   3                      }
 363   2              }//for( tw_DirTabNum=1; tw_DirTabNum<256; tw_DirTabNum++ )//擴展到256個Dir
 364   1      
 365   1      //      dbprintf("All Dir--%x\n",tw_DirTotalNumber);
 366   1      
 367   1              if(!tc_CurrentCard)
 368   1              {
 369   2              gc_DirReBuildFlag=0x55; //Mark DirTable is Valid
 370   2              USER_MarkTable(gc_DirReBuildFlag);
 371   2              }
 372   1      
 373   1              gs_File_FCB[0].dw_FDB_StartCluster = gdw_DOS_RootDirClus;
 374   1      
 375   1              return 0;
 376   1      }
 377          
 378          
 379          U8 DOS_Search_DIR(U8 tc_Mode)
 380          {
 381   1          U8 tc_sts,tc_IniFlag,tc_FindDir,tc_FindFile ;//whether search file or search dir flag
 382   1          U8 tc_SearchTime ;
 383   1              U8 tc_Type=0;
 384   1              U8 tc_PrevOrNext=0;
 385   1              U32 tdw_SectorAdd,tdw_CurrentDirCluster,tdw_PrevDirCluster,tdw_NextDirCluster;
 386   1          SearchFdb ptr ;
 387   1      
 388   1              gs_File_FCB[0].dw_File_StartCluster=0xffffffff ;
 389   1          gs_File_FCB[0].dw_FDB_LogAdd=0 ;
 390   1          tc_sts=1 ;
 391   1          tc_IniFlag=0 ;      
 392   1          ptr.w_DirTotalNum=0 ;
 393   1          gb_ReadWriteDataArea=1 ;
 394   1      
 395   1          ptr.pc_LongFileName=gc_FileLongName ;
 396   1          ptr.c_Search_Mode=tc_Mode&0x0f; //0x03 or 0x0B
 397   1          ptr.c_EXTSelect=0;                  //the directory doesn't need to compare ExtName, default value
 398   1          ptr.c_Search_Direction=0 ;  //defalut: search next
 399   1              ptr.c_Search_Attribute=1 ;      //default: find dir
 400   1          ptr.c_type=0 ;                              //default
 401   1              ptr.Compare.dw_BubbleFlag=gdw_CurrFlag ;
 402   1              ptr.dw_File_StartCluster=gdw_StartCluster2 ;
 403   1          tc_SearchTime=2 ;
 404   1          while(tc_SearchTime)
 405   1          {
 406   2              {//find dir in one dir
 407   3                  tc_FindFile=0 ;
 408   3                  tc_FindDir=1 ;
 409   3                  ptr.dw_FDB_StartCluster=gs_DIR_FCB[0].dw_FDB_StartCluster ;
C51 COMPILER V7.10   DIR_PROCESS                                                           02/28/2011 10:30:46 PAGE 8   

 410   3              }
 411   2      
 412   2              if(!(gb_FindFlag))
 413   2              {//have not searched                                   
 414   3                              gb_FindFlag=1 ;
 415   3                  //first search next: default
 416   3                  gw_DirIndex[0]=0 ;
 417   3                  gw_DirIndex[1]=0 ;
 418   3              }
 419   2              if((tc_Mode&0x0f0)==0x30)//find dir in one dir
 420   2              {            
 421   3                  if((tc_Mode&0x0f)==0x0b)//count dir total number
 422   3                      tc_sts=Count_Dir_Fdb(&ptr);
 423   3                  else
 424   3                              {
 425   4                      tc_sts=Find_Fdb(&ptr);
 426   4                          if(DOS_Read_LogicSector(ptr.dw_FDB_LogAdd,1)) //read fail
 427   4                              return 0xff ;
 428   4                          
 429   4                          ((U8*)(&ptr.dw_File_StartCluster))[3]=gc_UserDataBuf[ptr.w_FDB_Offset+0x1a];
 430   4                          ((U8*)(&ptr.dw_File_StartCluster))[2]=gc_UserDataBuf[ptr.w_FDB_Offset+0x1b];
 431   4                          ((U8*)(&ptr.dw_File_StartCluster))[1]=gc_UserDataBuf[ptr.w_FDB_Offset+0x14];
 432   4                          ((U8*)(&ptr.dw_File_StartCluster))[0]=gc_UserDataBuf[ptr.w_FDB_Offset+0x15];
 433   4                              }
 434   3              }
 435   2                      else //(tc_Mode&0x0f0)==0x20
 436   2                      {//find in all dir
 437   3                              while(1)
 438   3                              { 
 439   4                                      ptr.c_Search_Mode = (tc_Mode&0x0f);
 440   4                                                                                                      
 441   4                                      if(tc_FindDir==1 && ptr.c_Search_Mode==0x0b)
 442   4                                      {//count dir number in all directories
 443   5                                              tc_sts=Count_Dir_Fdb(&ptr);
 444   5                                              gw_DirTotalNumber = ptr.w_DirTotalNum;
 445   5                                      }
 446   4      
 447   4                                      if(tc_sts) //Here, tc_sts=1
 448   4                                      {//have not found the specific file in one dir or count dir number in one dir
 449   5                                              ptr.c_Search_Mode=0x03;  //if count filenum now,please search dir by order
 450   5      
 451   5                                              if((tc_Mode&0xf0)==0x20 && (tc_Mode&0x0f)!=0x0b) //for tc_Mode=0x28, 
 452   5                                                      ptr.c_Search_Mode=(tc_Mode&0x0f);                     //it has counted in this dir. Then it must be 
             -searching new dir to count overall directories
 453   5      
 454   5                                              ptr.c_Search_Attribute=1;
 455   5                                              tc_sts=Find_Fdb(&ptr);   //look for dir in the dir
 456   5      
 457   5                                              if(tc_sts)
 458   5                                              {//not find dir
 459   6                                                      if(ptr.dw_FDB_StartCluster!=gdw_DOS_RootDirClus)                 //not rootdir
 460   6                                                      {
 461   7                                                              tdw_SectorAdd = DOS_ClusterLogicAddr(ptr.dw_FDB_StartCluster);
 462   7                                                              gb_ReadWriteDataArea=1;
 463   7                                                              if(DOS_Read_LogicSector(tdw_SectorAdd,1))
 464   7                                                                      return 0xff;
 465   7      
 466   7                                                              ((U8 *)(&tdw_PrevDirCluster))[3]=gc_UserDataBuf[32+0x1a];
 467   7                                                              ((U8 *)(&tdw_PrevDirCluster))[2]=gc_UserDataBuf[32+0x1b];
 468   7                                                              ((U8 *)(&tdw_PrevDirCluster))[1]=gc_UserDataBuf[32+0x14];
 469   7                                                              ((U8 *)(&tdw_PrevDirCluster))[0]=gc_UserDataBuf[32+0x15];
 470   7                                                              if(!(tdw_PrevDirCluster))
C51 COMPILER V7.10   DIR_PROCESS                                                           02/28/2011 10:30:46 PAGE 9   

 471   7                                                              {//predir is rootdir
 472   8                                                                      tdw_PrevDirCluster=gdw_DOS_RootDirClus;
 473   8                                                              }
 474   7                                                              ptr.dw_File_StartCluster=ptr.dw_FDB_StartCluster;
 475   7                                                              ptr.dw_FDB_StartCluster=tdw_PrevDirCluster;                   //return to predir
 476   7      
 477   7                                                              if((tc_Mode&0x0f)==0x0b) //add by Ching 051220
 478   7                                                                      tc_FindDir=0;
 479   7                                                              
 480   7                                                              tc_FindFile=0;
 481   7      
 482   7                                                              if(ptr.c_Search_Mode==0x03)
 483   7                                                              {//find by order
 484   8                                                                      gw_DirIndex[1] = 0;
 485   8                                                                      ptr.c_Search_Mode = K_SPECIFIC_STARTCLUSTER;
 486   8                                                                      ptr.Compare.dw_StartCluster =ptr.dw_File_StartCluster;
 487   8                                                                      ptr.c_Search_Attribute=1;
 488   8                                                                      if(Find_Fdb(&ptr))
 489   8                                                                              break;
 490   8                                                              }
 491   7                                                      }
 492   6                                                      else
 493   6                                                      {//not find dir in rootdir
 494   7                                                              gs_DIR_FCB[tc_Type].dw_FDB_StartCluster=ptr.dw_FDB_StartCluster;
 495   7                                                              break; 
 496   7                                                      }
 497   6                                              }
 498   5                                              else
 499   5                                              {//have found dir
 500   6                                                      gb_ReadWriteDataArea=1;
 501   6                                                      if(DOS_Read_LogicSector(ptr.dw_FDB_LogAdd,1))
 502   6                                                              return 0xff;
 503   6      
 504   6                                                      tdw_CurrentDirCluster=ptr.dw_FDB_StartCluster; //save current dir
 505   6                                                      ((U8 *)(&ptr.dw_FDB_StartCluster))[3]=gc_UserDataBuf[ptr.w_FDB_Offset+0x1a];
 506   6                                                      ((U8 *)(&ptr.dw_FDB_StartCluster))[2]=gc_UserDataBuf[ptr.w_FDB_Offset+0x1b];
 507   6                                                      ((U8 *)(&ptr.dw_FDB_StartCluster))[1]=gc_UserDataBuf[ptr.w_FDB_Offset+0x14];
 508   6                                                      ((U8 *)(&ptr.dw_FDB_StartCluster))[0]=gc_UserDataBuf[ptr.w_FDB_Offset+0x15];    //next dir cluster
 509   6      
 510   6                                                      tdw_SectorAdd = DOS_ClusterLogicAddr(ptr.dw_FDB_StartCluster);
 511   6                                                      if(DOS_Read_LogicSector((tdw_SectorAdd),1))
 512   6                                                              return 0xff; 
 513   6      
 514   6                                                      ((U8 *)(&tdw_PrevDirCluster))[3]=gc_UserDataBuf[32+0x1a];
 515   6                                                      ((U8 *)(&tdw_PrevDirCluster))[2]=gc_UserDataBuf[32+0x1b];
 516   6                                                      ((U8 *)(&tdw_PrevDirCluster))[1]=gc_UserDataBuf[32+0x14];
 517   6                                                      ((U8 *)(&tdw_PrevDirCluster))[0]=gc_UserDataBuf[32+0x15];       //current dir
 518   6      
 519   6                                                      ((U8 *)(&tdw_NextDirCluster))[3]=gc_UserDataBuf[0x1a];
 520   6                                                      ((U8 *)(&tdw_NextDirCluster))[2]=gc_UserDataBuf[0x1b];
 521   6                                                      ((U8 *)(&tdw_NextDirCluster))[1]=gc_UserDataBuf[0x14];
 522   6                                                      ((U8 *)(&tdw_NextDirCluster))[0]=gc_UserDataBuf[0x15];  //next dir
 523   6      
 524   6                                                      if((tdw_PrevDirCluster!=tdw_CurrentDirCluster)&&(tdw_CurrentDirCluster!=gdw_DOS_RootDirClus)||(tdw_N
             -extDirCluster!=ptr.dw_FDB_StartCluster))
 525   6                                                      {//dos error 
 526   7                                                              ptr.dw_FDB_StartCluster=tdw_CurrentDirCluster; 
 527   7                                                              tc_FindFile=0; 
 528   7                                                      }
 529   6                                                      else
 530   6                                                      {
 531   7                                                              gw_DirIndex[0] = 0;
C51 COMPILER V7.10   DIR_PROCESS                                                           02/28/2011 10:30:46 PAGE 10  

 532   7                                                              if((tc_Mode&0x0f0)==0x20)
 533   7                                                              {//put the line in here is to make dw_FDB_StartCluster equal dw_File_StartCluster 
 534   8                                                                      tc_FindDir=1; //for tc_Mode=0x28,it has been changed. Here it's to re-changed
 535   8                                                                      gw_DirIndex[1] = 0; 
 536   8                                                                      ptr.dw_File_StartCluster = ptr.dw_FDB_StartCluster;
 537   8                                                                      tc_sts=0;
 538   8                                                                      if((tc_Mode&0x0f)!=0x0b)  //for tc_Mode=0x2b, it must continus counting
 539   8                                                                              break;                                                                  
 540   8                                                              } 
 541   7                                                              ptr.Compare.dw_BubbleFlag=0x0000;
 542   7                                                              tc_FindFile=1; 
 543   7                                                      }
 544   6                                                      tc_sts=1; 
 545   6                                              }//have find dir 
 546   5                                      }
 547   4                                      else
 548   4                                      {//have find the file --> this line does not occur Here!
 549   5                                              break;
 550   5                                      }
 551   4                              }//whileB 
 552   3                      }//find in all dir
 553   2      
 554   2              if(!tc_sts)
 555   2              {//found the file/dir or counted dir total number successfully
 556   3                              if((tc_Mode&0x0f)==0x0b)//count dir total number
 557   3                          gw_DirTotalNumber=ptr.w_DirTotalNum ;
 558   3                  else //if((tc_Mode&0x0f)==0x03)
 559   3                  {
 560   4                          gb_FindFlag=1 ;
 561   4                      //dir
 562   4                      gs_DIR_FCB[0].dw_File_StartCluster=ptr.dw_File_StartCluster ;
 563   4                      gs_DIR_FCB[0].dw_FDB_StartCluster=ptr.dw_FDB_StartCluster ;
 564   4                      gs_DIR_FCB[0].dw_LongFDB_LogAdd1=ptr.dw_LongFDB_LogAdd1 ;
 565   4                      gs_DIR_FCB[0].dw_LongFDB_LogAdd0=ptr.dw_LongFDB_LogAdd0 ;
 566   4                      gs_DIR_FCB[0].dw_FDB_Cluster=ptr.dw_FDB_Cluster ;
 567   4                      gs_DIR_FCB[0].dw_FDB_LogAdd=ptr.dw_FDB_LogAdd ;
 568   4                      gs_DIR_FCB[0].w_FDB_Offset=ptr.w_FDB_Offset ;   
 569   4                  }
 570   3                  return tc_sts;
 571   3              }
 572   2              else 
 573   2              {
 574   3                              if((tc_Mode&0x0f)==0x0b)
 575   3                                      return tc_sts;
 576   3                              else //if((tc_Mode&0x0f)==3)
 577   3                                      gb_FindFlag=0 ;
 578   3      
 579   3                              gc_test=1;
 580   3                  gs_File_FCB[0].dw_FDB_StartCluster=ptr.dw_FDB_StartCluster;
 581   3                  gs_DIR_FCB[0].dw_FDB_StartCluster=ptr.dw_FDB_StartCluster;
 582   3                  tc_SearchTime--;
 583   3              }
 584   2          }
 585   1          return(1);
 586   1      }
 587          
 588          
 589          void DirManagement_Init()
 590          {
 591   1              gc_DispFilePageBak=0xFFFF;
 592   1              gc_DispFilePage=0;
 593   1              UI_DIRStoreOrRecover(1);//save
C51 COMPILER V7.10   DIR_PROCESS                                                           02/28/2011 10:30:46 PAGE 11  

 594   1              gc_FatherIndex = 0;     //root
 595   1              gw_DIRtableIndex = 1;   //root's 1st child dir
 596   1              gw_Index = 1;                   //1st dir
 597   1              USER_Read2KBReserveBlock_DIR(gw_DIRtableIndex, gc_CurrentCard); //gc_DIRtable[]
 598   1      
 599   1              Get_TotalNumber(gc_FatherIndex);
 600   1              FatherDir_FDBInit(gc_FatherIndex);
 601   1      
 602   1              gc_PhaseInx = 0;
 603   1      
 604   1              if(gw_TotalNumber)
 605   1              {
 606   2                      UI_DispGet_ChildName();
 607   2                      UI_Disp_ChildName();
 608   2              }
 609   1              else
 610   1              {
 611   2                      gw_Index = 0;
 612   2                      UI_Disp_ChildName();
 613   2                      gc_DirNoFile_Flag=1;
 614   2              }
 615   1      }
 616          
 617          
 618          U8 Count_Dir_Fdb(SearchFdb *p_mp)
 619          {
 620   1              bit tbt_Check1stFDB=0;
 621   1          U8  tc_SectorOffset ;
 622   1          U16 tw_FdbOffset ;
 623   1          U32 tdw_SectorAdd,tdw_S_ClusterNum ;
 624   1          U32 tdw_Find_ClusterSize,tdw_TheEndCluster ;
 625   1          
 626   1          p_mp->w_DirTotalNum=0 ;
 627   1          tdw_S_ClusterNum=p_mp->dw_FDB_StartCluster ;
 628   1          
 629   1          if(gc_DOS_FileSystemType==1)tdw_TheEndCluster=0xffff;               //FAT16
 630   1          else                                                tdw_TheEndCluster=0x0fffffff;   //FAT32
 631   1          
 632   1              if(p_mp->dw_FDB_StartCluster != gdw_DOS_RootDirClus) tbt_Check1stFDB=1; //Ching 090420
 633   1          
 634   1          while(tdw_S_ClusterNum<tdw_TheEndCluster)
 635   1          {//find in one dir
 636   2              if(tdw_S_ClusterNum)
 637   2              {
 638   3                  tdw_Find_ClusterSize=gc_DOS_SectorPerCluster;
 639   3                  tdw_SectorAdd=DOS_ClusterLogicAddr(tdw_S_ClusterNum);
 640   3              }
 641   2              else //FAT16's rootdir
 642   2              {
 643   3                  tdw_Find_ClusterSize=(gdw_DOS_DataAddr-gdw_DOS_RootDirAddr);
 644   3                  tdw_SectorAdd=gdw_DOS_RootDirAddr;
 645   3              }
 646   2              for(tc_SectorOffset=0;tc_SectorOffset<tdw_Find_ClusterSize;tc_SectorOffset++)
 647   2              {//find in one cluster 
 648   3                  gb_ReadWriteDataArea=1;
 649   3                  if(DOS_Read_LogicSector((tdw_SectorAdd+tc_SectorOffset),1)) //read fail
 650   3                                      return 0xff ;
 651   3      
 652   3                              //Ching 090420
 653   3                              if(tbt_Check1stFDB) //check . and ..
 654   3                              {
 655   4                                      tbt_Check1stFDB = 0;
C51 COMPILER V7.10   DIR_PROCESS                                                           02/28/2011 10:30:46 PAGE 12  

 656   4                                      if((gc_UserDataBuf[0x00]!=0x2E) || (gc_UserDataBuf[0x0B]!=0x10) || (gc_UserDataBuf[0x20]!=0x2E) || (gc
             -_UserDataBuf[0x21]!=0x2E) || (gc_UserDataBuf[0x2B]!=0x10))
 657   4                                      {
 658   5                                              gbt_DIRwFakeFDB = 1;
 659   5                                              return 2;
 660   5                                      }
 661   4                              }
 662   3      
 663   3                  for(tw_FdbOffset=0;tw_FdbOffset<K_DOS_SectorSize;tw_FdbOffset+=32)
 664   3                  {//find in one sector                               
 665   4                      if(gc_UserDataBuf[tw_FdbOffset]==0xE5)//deleted FDB
 666   4                      {}
 667   4                      else if(gc_UserDataBuf[tw_FdbOffset]==0x00)//end flag
 668   4                                      {
 669   5                          return(SUCCESS);
 670   5                                      }
 671   4                      else if(gc_UserDataBuf[tw_FdbOffset+0x0B]==0x0F)//long FDB
 672   4                      {}
 673   4                      else if(gc_UserDataBuf[tw_FdbOffset+0x0B]&0x10)//short FDB and is DIR
 674   4                      {
 675   5                              if(gc_UserDataBuf[tw_FdbOffset]!=0x2E) //it's real folder
 676   5                                                      p_mp->w_DirTotalNum++;
 677   5                      }
 678   4                  }//for(tw_FdbOffset=0;tw_FdbOffset<K_DOS_SectorSize;tw_FdbOffset+=32)------------>find in one 
             -sector
 679   3              }//for(tc_SectorOffset=0;tc_SectorOffset<tdw_Find_ClusterSize;tc_SectorOffset++)----->find in one 
             -cluster
 680   2              tdw_S_ClusterNum=DOS_GetNextCluster(tdw_S_ClusterNum,1);
 681   2          }//while(tdw_S_ClusterNum<tdw_TheEndCluster)--------------------------------------------->find in one 
             -dir
 682   1      
 683   1              return(SUCCESS);
 684   1      }
 685          
 686          
 687          
 688          void USER_MarkTable(U8 tc_MarkFlag)
 689          {
 690   1              gc_PlayRecordDataBuf[400] = tc_MarkFlag; //0xAA: Invalid, 0x55: Valid
 691   1              if(tc_MarkFlag==D_Expired)//disable track memory //yflin081007
 692   1              {
 693   2                      gc_PlayRecordDataBuf[401]=D_Expired;
 694   2                      gc_PlayRecordDataBuf[402]=D_Expired;
 695   2              }
 696   1      }
 697          
 698          
 699          void USER_GetUISetIndex(void)
 700          {
 701   1              U16 tw_SectorIndex;
 702   1              U8 tc_SetIndex;
 703   1              U8 tc_i, tc_SearchNum, tc_j, tc_loop=2;
 704   1      
 705   1              tc_SearchNum = gc_SetNumber*2;
 706   1              tc_SetIndex = tc_SearchNum-1;
 707   1      
 708   1              //0:NandFlash - [2][3]; 1:SD - [4][5], Ching 090306
 709   1              for(tc_j=0; tc_j<tc_loop; tc_j++)
 710   1              {
 711   2                      for(tc_i=0; tc_i<tc_SearchNum; tc_i++)
 712   2                      {
 713   3                              tw_SectorIndex = ((tc_SetIndex & (gc_SetNumber-1)) <<2) *gc_InAddrMax;
C51 COMPILER V7.10   DIR_PROCESS                                                           02/28/2011 10:30:46 PAGE 13  

 714   3              
 715   3                              if(tc_SetIndex & gc_SetNumber)  //read UserDataBlock[3]
 716   3                                      UserData_Block_Read(3+tc_j*2,tw_SectorIndex,1,gc_DIRtableHB);
 717   3                              else                                                    //read UserDataBlock[2]
 718   3                                      UserData_Block_Read(2+tc_j*2,tw_SectorIndex,1,gc_DIRtableHB);
 719   3              
 720   3                              if(gc_UserDataBuf[0]!=0xff)
 721   3                                      break;
 722   3                      
 723   3                              tc_SetIndex --;
 724   3                      }
 725   2                      if(!tc_j) //NandFlash
 726   2                      {
 727   3                              if(tc_i==tc_SearchNum)  gc_SetIndex = 0;
 728   3                              else                                    gc_SetIndex = tc_SetIndex;
 729   3                      }
 730   2                      else //SD
 731   2                      {
 732   3                              if(tc_i==tc_SearchNum)  gc_SDSetIndex = 0;
 733   3                              else                                    gc_SDSetIndex = tc_SetIndex;
 734   3                      }
 735   2              }
 736   1      }
 737          
 738          
 739          
 740          void UI_DispGetDirName(U8 tc_DIRtableIndex)
 741          {
 742   1              U32 tdw_bk_LongFDB_LogAdd0, tdw_FDB_LogAdd;
 743   1              U16 tw_FDB_Offset;
 744   1      
 745   1              if(gs_System_State.c_FileHandle == 2) //back up, Ching 090311
 746   1              {
 747   2                      tdw_bk_LongFDB_LogAdd0 = gs_File_FCB[2].dw_LongFDB_LogAdd0;
 748   2                      tdw_FDB_LogAdd = gs_File_FCB[2].dw_FDB_LogAdd;
 749   2                      tw_FDB_Offset = gs_File_FCB[2].w_FDB_Offset;
 750   2              }
 751   1      
 752   1              gs_File_FCB[2].dw_LongFDB_LogAdd0       = gs_DIRtable[tc_DIRtableIndex].dw_LongFDB_LogAdd0;
 753   1              gs_File_FCB[2].dw_FDB_LogAdd            = gs_DIRtable[tc_DIRtableIndex].dw_FDB_LogAdd;
 754   1              gs_File_FCB[2].w_FDB_Offset                     = gs_DIRtable[tc_DIRtableIndex].w_FDB_Offset;
 755   1          DOS_GetLongFileName(2,gc_FileLongName);
 756   1      
 757   1              if(gs_System_State.c_FileHandle == 2) //re-cover, Ching 090311
 758   1              {
 759   2                      gs_File_FCB[2].dw_LongFDB_LogAdd0 = tdw_bk_LongFDB_LogAdd0;
 760   2                      gs_File_FCB[2].dw_FDB_LogAdd = tdw_FDB_LogAdd;
 761   2                      gs_File_FCB[2].w_FDB_Offset = tw_FDB_Offset;
 762   2              }
 763   1      }
 764          
 765          
 766          void FatherDir_FDBInit(U16 tw_FatherIndex)
 767          {
 768   1              tw_FatherIndex &= 0x3F;  //20090407 add
 769   1              gs_File_FCB[gs_System_State.c_FileHandle].dw_FDB_StartCluster = gs_DIRtable[tw_FatherIndex].dw_File_Start
             -Cluster;
 770   1              gb_FindFlag = 0;
 771   1              gw_FileIndex[gs_System_State.c_FileHandle] = 0;
 772   1      }
 773          
 774          
C51 COMPILER V7.10   DIR_PROCESS                                                           02/28/2011 10:30:46 PAGE 14  

 775          void Get_TotalNumber(U16 tw_DirIndex)
 776          {
 777   1              tw_DirIndex &= 0x3F;
 778   1              gw_DirTotalNumber                                       = gs_DIRtable[tw_DirIndex].c_subdir_num;
 779   1              if(gs_System_State.c_FileHandle == 2) //Ching 090311
 780   1              {
 781   2                      DOS_Search_File(C_File_OneDir|C_Cnt_FileNo,C_OtherFileType,C_CmpExtName|C_Next);
 782   2                      gw_TotalNumber                                          = gw_DirTotalNumber + gw_FileTotalNumber[2];
 783   2                      gs_File_FCB[gs_System_State.c_FileHandle].dw_FDB_StartCluster = gs_DIRtable[tw_DirIndex].dw_File_StartCl
             -uster;
 784   2                      gw_DirIndex[0] = 0;
 785   2                      gw_DirIndex[1] = 0;
 786   2              }
 787   1              else
 788   1              {
 789   2                      gw_TotalNumber                                          = gs_DIRtable[tw_DirIndex].w_file_folder_num;
 790   2                      ((U8 *)(&gw_FileTotalNumber[0]))[0] = gs_DIRtable[tw_DirIndex].c_file_num_hi;
 791   2                      ((U8 *)(&gw_FileTotalNumber[0]))[1] = gs_DIRtable[tw_DirIndex].c_file_num_lo;
 792   2              }
 793   1      }
 794          
 795          
 796          void UI_Disp_ChildName()//tc_mode for color project
 797          {
 798   1      #ifdef TFT_18_V
                  struct string_view_t disp_param = { 20, 25, 108, 20 };
              #else
 801   1              struct string_view_t disp_param = { 20, 25, 136, 20 };
 802   1      #endif
 803   1              struct string_disp_t string_attr;
 804   1              U16 tw_TempIndex;
 805   1              U8      tc_i, tc_ReversePage;
 806   1      
 807   1              tc_ReversePage =gw_Index % C_LCM_ROW_MAX;
 808   1              gc_DispFilePage=gw_Index / C_LCM_ROW_MAX;
 809   1      
 810   1              if(gc_DispFilePageBak!=gc_DispFilePage)
 811   1              {
 812   2                      //TFT_FileSelect();
 813   2                      Menu_Disp_Item_Other(60,0,REFRESH_ALL);//sunzhk add
 814   2              }
 815   1      
 816   1              for(tc_i=0; tc_i<C_LCM_ROW_MAX; tc_i++)
 817   1              {
 818   2                      tw_TempIndex = (U16)C_BUF_LENGTH*tc_i;
 819   2                      gc_IconY=tc_i;
 820   2      
 821   2                      if(gc_DispFilePageBak!=gc_DispFilePage)
 822   2                      {
 823   3                              if(gc_DirLCMtempBuf[tw_TempIndex+4])
 824   3                              {
 825   4                                      gc_IconType=gc_DirLCMtempBuf[tw_TempIndex+1];
 826   4                                      TFT_FileIcon();
 827   4                              }
 828   3                      }
 829   2      
 830   2                      UI_get_string_hzk_bitmap(&disp_param, //*
 831   2                                                                       &(string_attr),
 832   2                                                                       &(gc_DirLCMtempBuf[tw_TempIndex+5]), //* string to display
 833   2                                                                       gc_DirLCMtempBuf[tw_TempIndex+4], //* string size in bytes
 834   2                                                                       gc_DirLCMtempBuf[tw_TempIndex+2], //* unicode or ansi flag
 835   2                                                                       tc_i, //* line number
C51 COMPILER V7.10   DIR_PROCESS                                                           02/28/2011 10:30:46 PAGE 15  

 836   2                                                                       0/*truncate on char or not*/, //* 1
 837   2                                                                       0, // rolling factor
 838   2                                                                       &(gc_DirLCMtempBuf[512]));  //luke090311 fix  bug
 839   2      
 840   2                      if(tc_i==tc_ReversePage)
 841   2                      {
 842   3                              string_attr.c_reverse_flag = 1;
 843   3                      }
 844   2                      UI_render_strings(&disp_param, &string_attr);
 845   2              }
 846   1              gc_DispFilePageBak=gc_DispFilePage;
 847   1      }
 848          
 849          
 850          void OtherManagement_Init() //Ching 090311
 851          {
 852   1      //dbprintf("OtherManagement_Init\n");
 853   1              gc_FatherIndex = 0;     //root
 854   1              gw_DIRtableIndex = 1;   //root's 1st child dir
 855   1              gw_Index = 1;                   //1st dir
 856   1              USER_Read2KBReserveBlock_DIR(gw_DIRtableIndex, gc_CurrentCard); //gc_DIRtable[]
 857   1              FatherDir_FDBInit(gc_FatherIndex);
 858   1              Get_TotalNumber(gc_FatherIndex);
 859   1              gc_PhaseInx = 0;
 860   1      
 861   1              if(gw_TotalNumber)
 862   1              {
 863   2                      UI_DispGet_ChildName();
 864   2                      UI_Disp_ChildName();
 865   2              }
 866   1              else
 867   1              {
 868   2                      gw_Index = 0;
 869   2                      UI_Disp_ChildName();
 870   2              }
 871   1      }
 872          
 873          
 874          
 875          
 876          void UI_DIRStoreOrRecover(bit tb_SaveOrRecover)
 877          {
 878   1              if(tb_SaveOrRecover) //save
 879   1              { 
 880   2                      Save_gw_MusicFileTotalNum       = gw_FileTotalNumber[0]; 
 881   2                      Save_dw_FDB_StartCluster[gs_System_State.c_FileHandle]          = gs_File_FCB[gs_System_State.c_FileHandle].dw_F
             -DB_StartCluster;
 882   2                      Save_dw_FDB_Cluster[gs_System_State.c_FileHandle]                       = gs_File_FCB[gs_System_State.c_FileHandle].dw_FD
             -B_Cluster;        
 883   2                      Save_dw_FDB_LogAdd[gs_System_State.c_FileHandle]                        = gs_File_FCB[gs_System_State.c_FileHandle].dw_FDB
             -_LogAdd;
 884   2                      Save_dw_LongFDB_LogAdd0[gs_System_State.c_FileHandle]           = gs_File_FCB[gs_System_State.c_FileHandle].dw_L
             -ongFDB_LogAdd0;
 885   2                      Save_dw_LongFDB_LogAdd1[gs_System_State.c_FileHandle]           = gs_File_FCB[gs_System_State.c_FileHandle].dw_L
             -ongFDB_LogAdd1;
 886   2                      Save_w_FDB_Offset[gs_System_State.c_FileHandle]                         = gs_File_FCB[gs_System_State.c_FileHandle].w_FDB_
             -Offset;
 887   2                      Save_gw_FileIndex[gs_System_State.c_FileHandle]                         = gw_FileIndex[gs_System_State.c_FileHandle];
 888   2                      Save_c_FileType[gs_System_State.c_FileHandle]                           = gs_File_FCB[gs_System_State.c_FileHandle].c_FileTy
             -pe;
 889   2                      Save_dw_File_StartCluster[gs_System_State.c_FileHandle]         = gs_File_FCB[gs_System_State.c_FileHandle].dw_
             -File_StartCluster;//lijian.peng 081011 for return to music
C51 COMPILER V7.10   DIR_PROCESS                                                           02/28/2011 10:30:46 PAGE 16  

 890   2                      Save_gw_FileDirIndex[gs_System_State.c_FileHandle]=gw_FileTotalNumber[gs_System_State.c_FileHandle];//yf
             -lin081007
 891   2      
 892   2                      if(gs_System_State.c_FileHandle==0)
 893   2                      {
 894   3                              gw_DirIndexTest[0]=gw_DirIndex[0];//for PLAY yflin081015
 895   3                              gw_DirIndexTest[1]=gw_DirIndex[1];
 896   3                      }
 897   2              }
 898   1              else  //recover
 899   1              {
 900   2                      gw_FileTotalNumber[0] = Save_gw_MusicFileTotalNum;
 901   2                      gs_File_FCB[gs_System_State.c_FileHandle].dw_FDB_StartCluster   = Save_dw_FDB_StartCluster[gs_System_Stat
             -e.c_FileHandle];
 902   2                      gs_File_FCB[gs_System_State.c_FileHandle].dw_FDB_Cluster                = Save_dw_FDB_Cluster[gs_System_State.c_Fil
             -eHandle];        
 903   2                      gs_File_FCB[gs_System_State.c_FileHandle].dw_FDB_LogAdd                 = Save_dw_FDB_LogAdd[gs_System_State.c_File
             -Handle];
 904   2                      gs_File_FCB[gs_System_State.c_FileHandle].dw_LongFDB_LogAdd0    = Save_dw_LongFDB_LogAdd0[gs_System_State
             -.c_FileHandle];
 905   2                      gs_File_FCB[gs_System_State.c_FileHandle].dw_LongFDB_LogAdd1    = Save_dw_LongFDB_LogAdd1[gs_System_State
             -.c_FileHandle];
 906   2                      gs_File_FCB[gs_System_State.c_FileHandle].w_FDB_Offset                  = Save_w_FDB_Offset[gs_System_State.c_FileH
             -andle];
 907   2                      gw_FileIndex[gs_System_State.c_FileHandle]                                              = Save_gw_FileIndex[gs_System_State.c_FileHandle];
 908   2                      gs_File_FCB[gs_System_State.c_FileHandle].c_FileType                    = Save_c_FileType[gs_System_State.c_FileHandle
             -];
 909   2                      gs_File_FCB[gs_System_State.c_FileHandle].dw_File_StartCluster  = Save_dw_File_StartCluster[gs_System_Sta
             -te.c_FileHandle];//lijian.peng 081011 for return to music
 910   2              gw_FileTotalNumber[gs_System_State.c_FileHandle]=Save_gw_FileDirIndex[gs_System_State.c_FileHandle
             -];//yflin081007
 911   2                              
 912   2                      if(gs_System_State.c_FileHandle==0)     
 913   2                      {
 914   3                              gw_DirIndex[0]=gw_DirIndexTest[0];//for PLAY yflin081015
 915   3                              gw_DirIndex[1]=gw_DirIndexTest[1];
 916   3                      }
 917   2                      if(gw_FileTotalNumber[gs_System_State.c_FileHandle])DOS_GetLongFileName(gs_System_State.c_FileHandle,gc_
             -FileLongName);//yflin081023
 918   2              }
 919   1      }
 920          
 921          
 922          void DirManagement_Process() //adjust code to match both music and voice case, Ching 080926
 923          {
 924   1              UBYTE tc_MenuItem, tc_LCMRowMinus1, tc_i;
 925   1              WORD  tw_BottomIndex, tw_Index, tw_DIRtableIndex;
 926   1      
 927   1              if(gc_PhaseInx)
 928   1              {
 929   2                      switch(gc_PhaseInx)
 930   2                      {
 931   3                              case C_PlayMenu:
 932   3                                      gc_DispFilePageBak=0xFFFF;
 933   3                                      if(gw_Index)    //enter child dir or confirm selected item
 934   3                                      {
 935   4                                              tc_MenuItem = 3; 
 936   4                                      }
 937   3                                      else                    //back to upper level
 938   3                                      {
 939   4                                              if(gc_FatherIndex)      
 940   4                                              {
C51 COMPILER V7.10   DIR_PROCESS                                                           02/28/2011 10:30:46 PAGE 17  

 941   5                                                      tc_MenuItem = 2;
 942   5                                              }
 943   4                                              else
 944   4                                              {
 945   5                                                      return; //root dir
 946   5                                              }
 947   4                                      }
 948   3                  break;
 949   3      
 950   3                  case C_PlayNext:
 951   3                                      tc_MenuItem = 0;
 952   3                  break;
 953   3      
 954   3                  case C_PlayPrev:
 955   3                                      tc_MenuItem = 1;
 956   3                  break;
 957   3      
 958   3                              default:                // other-key , no action lijian.peng 081024
 959   3                                      gc_PhaseInx=0;
 960   3                                      return ;
 961   3                              break;
 962   3              }
 963   2      
 964   2                      tc_LCMRowMinus1 = C_LCM_ROW_MAX-1;
 965   2                      
 966   2                      if(tc_MenuItem==0) //Next
 967   2                      {
 968   3                              if(gw_TotalNumber)
 969   3                              {
 970   4                                      if(gw_Index==gw_TotalNumber)//last->1st page
 971   4                                      {
 972   5                                              gw_Index=0;
 973   5                                              //Ching 081218
 974   5                                              if(gw_DirTotalNumber)   
 975   5                                              {
 976   6                                                      tw_DIRtableIndex = gw_DIRtableIndex;
 977   6                                                      gw_DIRtableIndex -= (gw_DirTotalNumber-1);
 978   6                                                      if((gw_DIRtableIndex&0xc0) != (tw_DIRtableIndex&0xc0))
 979   6                                                              USER_Read2KBReserveBlock_DIR(gw_DIRtableIndex, gc_CurrentCard);
 980   6                                              }
 981   5                                              UI_DispGet_ChildName();
 982   5                                      }
 983   4                                      else
 984   4                                      {
 985   5                                              gw_Index ++;
 986   5                                              if(gw_Index<=gw_DirTotalNumber) 
 987   5                                              {
 988   6                                                      tw_DIRtableIndex = gw_DIRtableIndex; //Ching 081218
 989   6                                                      if(gw_Index!=1) //0->1
 990   6                                                      gw_DIRtableIndex++;
 991   6                                              }
 992   5      
 993   5                                              if(!(gw_Index%C_LCM_ROW_MAX)) //Next page
 994   5                                              {
 995   6                                                      if(gw_DirTotalNumber) //Ching 081218
 996   6                                                      {
 997   7                                                              if((gw_DIRtableIndex&0xc0) != (tw_DIRtableIndex&0xc0))
 998   7                                                                      USER_Read2KBReserveBlock_DIR(gw_DIRtableIndex, gc_CurrentCard);
 999   7                                                      }
1000   6                                                      UI_DispGet_ChildName();
1001   6                                              }
1002   5                                      }
C51 COMPILER V7.10   DIR_PROCESS                                                           02/28/2011 10:30:46 PAGE 18  

1003   4                              }
1004   3                      }
1005   2                      else if(tc_MenuItem==1) //Prev
1006   2                      {
1007   3                              if(gw_TotalNumber)
1008   3                              {
1009   4                                      gc_PhaseInx = C_DirPrev;
1010   4                                      gb_TriggerFileSkip = 1;
1011   4                                      if(gw_Index==0)//1st->last page
1012   4                                      {
1013   5                                              gw_Index=gw_TotalNumber;
1014   5                                              if(gw_DirTotalNumber)
1015   5                                              {
1016   6                                                      tw_DIRtableIndex = gw_DIRtableIndex;
1017   6                                                      gw_DIRtableIndex += (gw_DirTotalNumber-1);
1018   6                                                      if((gw_DIRtableIndex&0xc0) != (tw_DIRtableIndex&0xc0))
1019   6                                                              USER_Read2KBReserveBlock_DIR(gw_DIRtableIndex, gc_CurrentCard);
1020   6                                              }
1021   5                                              if(gw_FileTotalNumber[gs_System_State.c_FileHandle])
1022   5                                              {
1023   6                                                      tw_Index = gw_Index - (gw_Index%C_LCM_ROW_MAX); 
1024   6                                                      if(tw_Index > gw_DirTotalNumber)        gw_FileSkipNumber = tw_Index - gw_DirTotalNumber;
1025   6                                                      else                                                            gw_FileSkipNumber = 1;
1026   6                                                      gb_FindFlag = 0;
1027   6                                                      gw_FileIndex[gs_System_State.c_FileHandle] = 0;
1028   6                                              }
1029   5                                              UI_DispGet_ChildName();
1030   5                                      }
1031   4                                      else
1032   4                                      {
1033   5                                              gw_Index --;
1034   5                                              if((gw_Index<gw_DirTotalNumber) && gw_Index)
1035   5                                              {
1036   6                                                      tw_DIRtableIndex = gw_DIRtableIndex;
1037   6                                                      gw_DIRtableIndex--;
1038   6                                              }
1039   5                                              if((gw_Index%C_LCM_ROW_MAX)==tc_LCMRowMinus1) //Prev page
1040   5                                              {
1041   6                                                      if(gw_Index < C_LCM_ROW_MAX) //2nd->1st page
1042   6                                                              gw_FileSkipNumber = 0;
1043   6                                                      else
1044   6                                                      {
1045   7                                                              tw_Index = gw_Index - (gw_Index%C_LCM_ROW_MAX); 
1046   7                                                              if((gw_Index-tc_LCMRowMinus1)>gw_DirTotalNumber) //it has some file in this page
1047   7                                                                      gw_FileSkipNumber = tw_Index - gw_DirTotalNumber;
1048   7                                                      }
1049   6      
1050   6                                                      gb_FindFlag = 0;
1051   6                                                      gw_FileIndex[gs_System_State.c_FileHandle] = 0;
1052   6      
1053   6                                                      if((gw_DirTotalNumber) && gw_Index)
1054   6                                                      {
1055   7                                                              if((gw_DIRtableIndex&0xc0) != (tw_DIRtableIndex&0xc0))
1056   7                                                                      USER_Read2KBReserveBlock_DIR(gw_DIRtableIndex, gc_CurrentCard);
1057   7                                                      }
1058   6                                                      UI_DispGet_ChildName();
1059   6                                              }
1060   5                                      }
1061   4                                      gb_TriggerFileSkip = 0;
1062   4                              }
1063   3                      } 
1064   2                      else if(tc_MenuItem==2) //back to upper level
C51 COMPILER V7.10   DIR_PROCESS                                                           02/28/2011 10:30:46 PAGE 19  

1065   2                      {
1066   3                              //if(gc_FatherIndex!=0) //not Root
1067   3                              {
1068   4                                      //Check if gc_DIRtable[] is in which page we need
1069   4                                      tw_Index = gw_Index + (tc_LCMRowMinus1 - (gw_Index%C_LCM_ROW_MAX)); //last item in the page
1070   4                                      if(tw_Index>gw_DirTotalNumber)  tw_BottomIndex = gw_DIRtableIndex + (gw_DirTotalNumber - gw_Index);
1071   4                                      else                                                    tw_BottomIndex = gw_DIRtableIndex + (tw_Index - gw_Index);
1072   4      
1073   4                                      if((tw_BottomIndex&0xc0) != (gc_FatherIndex&0xc0))
1074   4                                      {
1075   5                                              USER_Read2KBReserveBlock_DIR(gc_FatherIndex, gc_CurrentCard);   //gc_DIRtable[]
1076   5                                      }
1077   4                                      gw_DIRtableIndex = gc_FatherIndex;
1078   4                                      gc_FatherIndex = gs_DIRtable[gw_DIRtableIndex&0x3F].c_index_parent_folder;  //20090407 chiayen modify
1079   4      
1080   4                                      if((gw_DIRtableIndex&0xc0) != (gc_FatherIndex&0xc0))
1081   4                                      {
1082   5                                              USER_Read2KBReserveBlock_DIR(gc_FatherIndex, gc_CurrentCard);   //gc_DIRtable[]
1083   5                                              tw_Index = gs_DIRtable[gc_FatherIndex&0x3F].c_index_child_folder;  //20090407 chiayen modify
1084   5                                              FatherDir_FDBInit(gc_FatherIndex);
1085   5                                              Get_TotalNumber(gc_FatherIndex);
1086   5                                              USER_Read2KBReserveBlock_DIR(gw_DIRtableIndex, gc_CurrentCard); //gc_DIRtable[]
1087   5                                      }
1088   4                                      else
1089   4                                      {
1090   5                                              tw_Index = gs_DIRtable[gc_FatherIndex].c_index_child_folder;
1091   5                                              FatherDir_FDBInit(gc_FatherIndex);
1092   5                                              Get_TotalNumber(gc_FatherIndex);
1093   5                                      }
1094   4                                      gw_Index = gw_DIRtableIndex - tw_Index + 1;
1095   4      
1096   4                                      UI_DispGet_ChildName();
1097   4                              }
1098   3                      }
1099   2                      else if(tc_MenuItem==3) //enter child dir or confirm selected item
1100   2                      {
1101   3                              if(gw_Index>gw_DirTotalNumber) //file
1102   3                              {
1103   4                                      if(gw_FileTotalNumber[gs_System_State.c_FileHandle]) //Ching 081106
1104   4                                      {
1105   5                                              if((gs_System_State.c_FileHandle==0) || (gs_System_State.c_FileHandle==2)) //music or jpg/mjpg/txt, C
             -hing 090311
1106   5                                              {
1107   6                                                      gw_FileSkipNumber = gw_Index-gw_DirTotalNumber;
1108   6                                                      gb_FindFlag = 0;
1109   6                                                      gw_FileIndex[gs_System_State.c_FileHandle] = 0;
1110   6                                                      gb_TriggerFileSkip = 1;
1111   6                                                      DOS_Search_File(C_File_OneDir|C_By_FDB, gs_System_State.c_FileHandle, C_CmpExtName|C_Next);
1112   6                                                      gb_TriggerFileSkip = 0;
1113   6                                              }
1114   5              
1115   5                                              DOS_GetLongFileName(gs_System_State.c_FileHandle,gc_FileLongName);
1116   5                                              gc_Play_FileType=gs_File_FCB[gs_System_State.c_FileHandle].c_FileType;//lijian.peng modify 081016 for
             - play error from pause to DIR
1117   5      
1118   5                                              if(gs_System_State.c_FileHandle!=2)
1119   5                                              {
1120   6                                                      if(!gs_System_State.c_FileHandle) //music
1121   6                                                      {               
1122   7                                                              gc_Task_Next=C_Task_Play;
1123   7                                                              gc_PhaseInx = 0;                                                                
1124   7                                                      }
C51 COMPILER V7.10   DIR_PROCESS                                                           02/28/2011 10:30:46 PAGE 20  

1125   6                                                      gw_init_needed |= SET_BIT15;//(JC)H1007
1126   6              
1127   6                                                      return;
1128   6                                              }
1129   5                                              else
1130   5                                              {
1131   6                                                      if(gc_TaskMode_BkUp == C_Task_Jpeg)
1132   6                                                      {
1133   7                                                              gc_Task_Next=C_Task_Jpeg;                       
1134   7                                                              //gw_init_needed |= SET_BIT4;
1135   7                                                              gc_PhaseInx=1;
1136   7                                                      }
1137   6                                                      else if(gc_TaskMode_BkUp == C_Task_Mjpeg)
1138   6                                                      {
1139   7                                                              gc_Task_Next=C_Task_Mjpeg;                      
1140   7                                                              gw_init_needed |= SET_BIT5;
1141   7                                                              gc_PhaseInx=1;
1142   7                                                      }
1143   6                                                      return;
1144   6                                              }
1145   5                                      }
1146   4                              }
1147   3                              else //dir
1148   3                              {
1149   4                                      tw_Index = (((gw_Index-1)/tc_LCMRowMinus1)+1)*tc_LCMRowMinus1;
1150   4                                      if(tw_Index>gw_DirTotalNumber)
1151   4                                      {
1152   5                                              tw_BottomIndex = gw_DIRtableIndex + (gw_DirTotalNumber - gw_Index);
1153   5                                      }
1154   4                                      else
1155   4                                      {
1156   5                                              tw_BottomIndex = gw_DIRtableIndex + (tw_Index - gw_Index);
1157   5                                      }
1158   4      
1159   4                                      if((tw_BottomIndex&0xc0) != (gw_DIRtableIndex&0xc0))
1160   4                                      {
1161   5                                              USER_Read2KBReserveBlock_DIR(gw_DIRtableIndex, gc_CurrentCard); //gc_DIRtable[]
1162   5                                      }
1163   4      
1164   4                                      gc_FatherIndex = gw_DIRtableIndex;
1165   4                                      FatherDir_FDBInit(gc_FatherIndex); //Ching 090311
1166   4                                      Get_TotalNumber(gc_FatherIndex);
1167   4                                      tc_i = (gw_Index-1)%tc_LCMRowMinus1 + 1;
1168   4                                      memcpy(&gc_DirLCMtempBuf[0], &gc_DirLCMtempBuf[C_BUF_LENGTH*tc_i], C_BUF_LENGTH);
1169   4      //                              dbprintf("gw_TotalNumber=%x \n",gw_TotalNumber);
1170   4                                      if(gw_TotalNumber)
1171   4                                      {
1172   5                                              gw_DIRtableIndex = gs_DIRtable[gc_FatherIndex&0x3F].c_index_child_folder; //1st child  //20090407 chi
             -ayen modify
1173   5                                              if((gc_FatherIndex&0xc0) != (gw_DIRtableIndex&0xc0))
1174   5                                              {
1175   6                                                      USER_Read2KBReserveBlock_DIR(gw_DIRtableIndex, gc_CurrentCard); //gc_DIRtable[]
1176   6                                              }
1177   5                                              gw_Index = 1;
1178   5      
1179   5                                              UI_DispGet_ChildName();
1180   5                                      }
1181   4                                      else
1182   4                                      {
1183   5                                              gw_Index = 0;
1184   5                                              UI_DispGet_ChildName();
1185   5                                      }
C51 COMPILER V7.10   DIR_PROCESS                                                           02/28/2011 10:30:46 PAGE 21  

1186   4                              }
1187   3                      }
1188   2      
1189   2                      if((gc_PhaseInx != 0) && (gc_DirNoFile_Flag==0))
1190   2                      {
1191   3                              UI_Disp_ChildName(); //5sec
1192   3                      } 
1193   2              }
1194   1              else
1195   1              {
1196   2              }
1197   1      }
1198          
1199          
1200          void Play_SDFlash_DosInit_Dir()
1201          {
1202   1              gb_FindFlag = 0;
1203   1              gc_PhaseInx=0;
1204   1              gw_init_needed=0xFFFF;
1205   1              if (DOS_Initialize())
1206   1              {
1207   2              }
1208   1              else
1209   1              {
1210   2                      gc_ShowTimer=0;
1211   2                      gc_DispWallpaper=1;
1212   2                      gc_TuneVolFreqStatus=0;
1213   2                      gb_FindFlag = 0;
1214   2                      gc_PhaseInx=0;
1215   2                      gw_init_needed=0xFFFF;
1216   2      
1217   2                      gc_TaskMode_BkUp=C_Task_Play;//(JC)I0304 for back to rite TASK from Dir-list
1218   2                      gc_Task_Next=C_Task_Play;
1219   2                      gb_SourceChange_Dir=1;
1220   2      
1221   2                      gs_System_State.c_FileHandle=0;
1222   2                      gs_File_FCB[0].dw_FDB_StartCluster = gdw_DOS_RootDirClus;           
1223   2                      DOS_Search_File(C_File_All|C_Cnt_FileNo, C_MusicFileType, C_CmpExtName|C_Next);//(JC)count music file no
             -. in root
1224   2                      gc_PhaseInx=0;
1225   2                      gb_TFT_refresh=1;
1226   2                      gc_DispWallpaper=0xFF;
1227   2              }
1228   1      }
1229          
1230          
1231          void UI_DispGet_ChildName(void)
1232          {
1233   1              U8      tc_i, tc_TableOffset;
1234   1              U16 tw_Index, tw_TempIndex, tw_CurrentTableIndex, tw_Length;
1235   1      
1236   1              tw_Index = gw_Index - (gw_Index%C_LCM_ROW_MAX); //initialize @ Line0
1237   1              if((tw_Index<=gw_DirTotalNumber) && (gw_DirTotalNumber))
1238   1              {
1239   2                      if(tw_Index!=0)
1240   2              {
1241   3                      if((gw_Index-tw_Index) > (gw_DirTotalNumber-tw_Index))
1242   3                      {
1243   4                              tw_CurrentTableIndex = gw_DIRtableIndex - (gw_DirTotalNumber-tw_Index);
1244   4                      }
1245   3                      else
1246   3                      {
C51 COMPILER V7.10   DIR_PROCESS                                                           02/28/2011 10:30:46 PAGE 22  

1247   4                              tw_CurrentTableIndex = gw_DIRtableIndex - (gw_Index-tw_Index);
1248   4                      }
1249   3                      }
1250   2                      else //Ching 090304
1251   2                      {
1252   3                              if(!gw_Index)
1253   3                              {
1254   4                                      tw_CurrentTableIndex = gw_DIRtableIndex;
1255   4                              }
1256   3                              else if(gw_Index > gw_DirTotalNumber)
1257   3                              {
1258   4                                      tw_CurrentTableIndex = gw_DIRtableIndex - (gw_DirTotalNumber-1);
1259   4                              }
1260   3                              else
1261   3                              {
1262   4                                      tw_CurrentTableIndex = gw_DIRtableIndex - (gw_Index-1);
1263   4                              }
1264   3                      }
1265   2      
1266   2                      if((tw_CurrentTableIndex&0xc0) != (gw_DIRtableIndex&0xc0)) //different pages
1267   2                      {
1268   3                              USER_Read2KBReserveBlock_DIR(tw_CurrentTableIndex, gc_CurrentCard);     //gc_DIRtable[]
1269   3                      }
1270   2              }
1271   1      
1272   1              for(tc_i=0; tc_i<C_LCM_ROW_MAX; tc_i++)
1273   1              {
1274   2                      tw_TempIndex = (U16)C_BUF_LENGTH*tc_i;
1275   2      
1276   2                      if(!tw_Index) //Father DIR
1277   2                      {
1278   3                              gc_DirLCMtempBuf[0] = 0;
1279   3                              gc_DirLCMtempBuf[1] = D_SmallIcon_Dir;  //dir
1280   3                              gc_DirLCMtempBuf[2] = 1;
1281   3                              gc_DirLCMtempBuf[3] = 0;
1282   3                              if(!gc_FatherIndex && (gs_System_State.c_FileHandle!=1)) //not DVR(DVR's FatherIndex =0)
1283   3                              {
1284   4                                      gc_DirLCMtempBuf[4] = 4;
1285   4                                      gc_DirLCMtempBuf[5] = 'R';
1286   4                                      gc_DirLCMtempBuf[6] = 'O';
1287   4                                      gc_DirLCMtempBuf[7] = 'O';
1288   4                                      gc_DirLCMtempBuf[8] = 'T';
1289   4                              }
1290   3                              else
1291   3                              {
1292   4                                      gc_DirLCMtempBuf[4] = 1;
1293   4                                      gc_DirLCMtempBuf[5] = 0x5C; // '\'
1294   4                              }
1295   3                      }
1296   2                      else if(tw_Index <= gw_TotalNumber)
1297   2                      {
1298   3                              if(tw_Index <= gw_DirTotalNumber) //Dir
1299   3                              {
1300   4                                      tc_TableOffset = (U8)tw_CurrentTableIndex & 0x3F;
1301   4                                              UI_DispGetDirName(tc_TableOffset);
1302   4              
1303   4                                      memcpy(&tw_Length,&gc_FileLongName[3],2);
1304   4      
1305   4                                      if(tw_Length>C_BUF_STRING) 
1306   4                                      {
1307   5                                              memcpy(&gc_DirLCMtempBuf[tw_TempIndex], &gc_FileLongName[0],C_BUF_STRING+5);
1308   5                                              gc_DirLCMtempBuf[tw_TempIndex+1] = D_SmallIcon_Dir;     //dir
C51 COMPILER V7.10   DIR_PROCESS                                                           02/28/2011 10:30:46 PAGE 23  

1309   5                                              gc_DirLCMtempBuf[tw_TempIndex+3] = 0;   //high byte of length
1310   5                                              gc_DirLCMtempBuf[tw_TempIndex+4] = C_BUF_STRING;//low byte of length
1311   5                                      }
1312   4                                      else
1313   4                                      {
1314   5                                              tc_TableOffset = (U8)(tw_Length+5);
1315   5                                              memcpy(&gc_DirLCMtempBuf[tw_TempIndex], &gc_FileLongName[0],tc_TableOffset);
1316   5                                              gc_DirLCMtempBuf[tw_TempIndex+1] = D_SmallIcon_Dir;     //dir
1317   5                                      }
1318   4              
1319   4                                      if((tw_Index < gw_DirTotalNumber) && (tc_i!=(C_LCM_ROW_MAX-1))) //it has the next dir, Ching 081218
1320   4                                      {
1321   5                                              if(((tw_CurrentTableIndex+1)&0xc0) != (tw_CurrentTableIndex&0xc0)) //next dir and current dir are in 
             -different pages
1322   5                                              {
1323   6                                                      USER_Read2KBReserveBlock_DIR(tw_CurrentTableIndex+1, gc_CurrentCard);   //gc_DIRtable[]
1324   6                                              }
1325   5                                              tw_CurrentTableIndex++;
1326   5                                      }
1327   4                              }
1328   3                              else //File
1329   3                              {//adjust code to match both music and voice case, Ching 080926
1330   4                                      //Ching 081105
1331   4                                      if(gs_System_State.c_FileHandle!=1)
1332   4                                      {
1333   5                                              DOS_Search_File(C_File_OneDir|C_By_FDB, gs_System_State.c_FileHandle, C_CmpExtName|C_Next);
1334   5                                      }
1335   4      
1336   4                                      DOS_GetLongFileName(gs_System_State.c_FileHandle,gc_FileLongName);
1337   4                                      tw_Length = *((U16 *)&gc_FileLongName[3]);
1338   4      
1339   4                                      if(tw_Length>C_BUF_STRING) 
1340   4                                      {
1341   5                                              memcpy(&gc_DirLCMtempBuf[tw_TempIndex], &gc_FileLongName[0],C_BUF_STRING+5);
1342   5                                              if(gs_System_State.c_FileHandle < 2) //Ching 090311
1343   5                                                      gc_DirLCMtempBuf[tw_TempIndex+1] = gs_System_State.c_FileHandle;        //file, Ching 090304
1344   5                                              else
1345   5                                              {
1346   6                                                      if(gc_TaskMode_BkUp == C_Task_Jpeg)                     
1347   6                                                      {
1348   7                                                              gc_DirLCMtempBuf[tw_TempIndex+1] = D_SmallIcon_Photo;
1349   7                                                      }
1350   6                                                      else if(gc_TaskMode_BkUp == C_Task_Mjpeg)       
1351   6                                                      {
1352   7                                                              gc_DirLCMtempBuf[tw_TempIndex+1] = D_SmallIcon_Movie;
1353   7                                                      }
1354   6                                                      else if(gc_TaskMode_BkUp == C_Task_TXT)         
1355   6                                                      {
1356   7                                                              gc_DirLCMtempBuf[tw_TempIndex+1] = D_SmallIcon_EBook;
1357   7                                                      }
1358   6                                              }
1359   5                                              gc_DirLCMtempBuf[tw_TempIndex+3] = 0;   //high byte of length
1360   5                                              gc_DirLCMtempBuf[tw_TempIndex+4] = C_BUF_STRING;//low byte of length
1361   5                                      }
1362   4                                      else
1363   4                                      {
1364   5                                              tc_TableOffset = (U8)(tw_Length+5);
1365   5                                              memcpy(&gc_DirLCMtempBuf[tw_TempIndex], &gc_FileLongName[0],tc_TableOffset);
1366   5                                              if(gs_System_State.c_FileHandle < 2) //Ching 090311
1367   5                                              {
1368   6                                                      gc_DirLCMtempBuf[tw_TempIndex+1] = gs_System_State.c_FileHandle;        //file, Ching 090304
1369   6                                              }
C51 COMPILER V7.10   DIR_PROCESS                                                           02/28/2011 10:30:46 PAGE 24  

1370   5                                              else
1371   5                                              {
1372   6                                                      if(gc_TaskMode_BkUp == C_Task_Jpeg)                     
1373   6                                                      {
1374   7                                                              gc_DirLCMtempBuf[tw_TempIndex+1] = D_SmallIcon_Photo;
1375   7                                                      }
1376   6                                                      else if(gc_TaskMode_BkUp == C_Task_Mjpeg)       
1377   6                                                      {
1378   7                                                              gc_DirLCMtempBuf[tw_TempIndex+1] = D_SmallIcon_Movie;
1379   7                                                      }
1380   6                                                      else if(gc_TaskMode_BkUp == C_Task_TXT)         
1381   6                                                      {
1382   7                                                              gc_DirLCMtempBuf[tw_TempIndex+1] = D_SmallIcon_EBook;
1383   7                                                      }
1384   6                                              }
1385   5                                      }
1386   4                              }
1387   3                      }
1388   2                      else
1389   2                      {
1390   3                              gc_DirLCMtempBuf[tw_TempIndex+4] = 0x00;//low byte of length
1391   3                      }
1392   2                      tw_Index ++;
1393   2              }
1394   1      }
1395          
1396          void Play_SourceDetect_Process_Dir()
1397          {
1398   1              gb_SD_Exist_pre=gb_SD_Exist;
1399   1              if(!SD_Detect)  //SD exist
1400   1          {
1401   2              gb_SD_Exist=1;
1402   2          }
1403   1              else
1404   1              {
1405   2                      gb_SD_Exist=0;
1406   2                      gb_SDNoFileflag=0;
1407   2              }
1408   1      
1409   1              gb_Host_Exist_pre=gb_Host_Exist;
1410   1              if(!Host_DetectDevice())
1411   1              {
1412   2                      gb_Host_Exist=1;        //host_exist            
1413   2              }
1414   1              else
1415   1              {
1416   2                      gb_Host_Exist=0;
1417   2                      gc_HostNoFileflag=0;
1418   2              }
1419   1      
1420   1              if((gc_CurrentCard==0) && ((gb_Host_Exist_pre!=gb_Host_Exist)||(gb_SD_Exist_pre!=gb_SD_Exist)))
1421   1              {
1422   2                      if((gb_Host_Exist_pre!=gb_Host_Exist) && (gb_Host_Exist==1))
1423   2                      {
1424   3                              gc_CurrentCard=5;
1425   3                      }
1426   2                      else if((gb_SD_Exist_pre!=gb_SD_Exist) && (gb_SD_Exist==1))
1427   2                      {
1428   3                              gc_CurrentCard=2;       
1429   3                      }
1430   2                      else
1431   2                      {
C51 COMPILER V7.10   DIR_PROCESS                                                           02/28/2011 10:30:46 PAGE 25  

1432   3                              gc_CurrentCard=0;       
1433   3                      }
1434   2              }
1435   1              else
1436   1              {
1437   2                      if(gc_CurrentCard==2)
1438   2                      {
1439   3                              if(gc_Dosinitfail==0)  //20090803 chiayen add
1440   3                              {
1441   4                                      if((gb_Host_Exist_pre!=gb_Host_Exist) && (gb_Host_Exist==1))
1442   4                                      {
1443   5                                              gc_CurrentCard=5;
1444   5                                      }
1445   4                                      else if(((gb_SD_Exist==0) || (gb_SDNoFileflag==1)) && (gb_Host_Exist==1))
1446   4                                      {
1447   5                                              gc_CurrentCard=5;
1448   5                                              if(gc_HostNoFileflag==1)
1449   5                                              {
1450   6                                                      gc_CurrentCard=0;       
1451   6                                              }
1452   5                                      }
1453   4                                      else if((gb_SD_Exist==0) || (gb_SDNoFileflag==1))
1454   4                                      {
1455   5                                              gc_CurrentCard=0;       
1456   5                                      }
1457   4                              }
1458   3                              else //20090803 chiayen add for SD Dos initial fail
1459   3                              {
1460   4                                      if((gb_Host_Exist==1) && (gc_HostNoFileflag==0))
1461   4                                      {
1462   5                                              gc_CurrentCard=5;
1463   5                                      }
1464   4                                      else
1465   4                                      {
1466   5                                              gc_CurrentCard=0;
1467   5                                      }
1468   4                                      gc_Dosinitfail=0;                               
1469   4                              }
1470   3                      }
1471   2                      if(gc_CurrentCard==5)
1472   2                      {
1473   3                              if(gc_Dosinitfail==0)  //20090803 chiayen add
1474   3                              {
1475   4                                      if((gb_SD_Exist_pre!=gb_SD_Exist) && (gb_SD_Exist==1))
1476   4                                      {
1477   5                                              gc_CurrentCard=2;
1478   5                                      }
1479   4                                      else if(((gb_Host_Exist==0) || (gc_HostNoFileflag==1)) && (gb_SD_Exist==1))
1480   4                                      {
1481   5                                              gc_CurrentCard=2;
1482   5                                              if(gb_SDNoFileflag==1)
1483   5                                              {
1484   6                                                      gc_CurrentCard=0;       
1485   6                                              }
1486   5                                      }
1487   4                                      else if((gb_Host_Exist==0) || (gc_HostNoFileflag==1))
1488   4                                      {
1489   5                                              gc_CurrentCard=0;       
1490   5                                      }
1491   4                              }
1492   3                              else //host dos initial fail  //20090803 chiayen add
1493   3                              {
C51 COMPILER V7.10   DIR_PROCESS                                                           02/28/2011 10:30:46 PAGE 26  

1494   4                                      if((gb_SD_Exist==1) && (gb_SDNoFileflag==0))
1495   4                                      {
1496   5                                              gc_CurrentCard=2;
1497   5                                      }
1498   4                                      else
1499   4                                      {
1500   5                                              gc_CurrentCard=0;
1501   5                                      }
1502   4                                      gc_Dosinitfail=0;
1503   4                              }
1504   3                      }
1505   2              }
1506   1      
1507   1          if(gc_CurrentCard_backup!=gc_CurrentCard)
1508   1          {
1509   2                      gc_CurrentCard_backup=gc_CurrentCard;
1510   2      
1511   2                      set_clock_mode(CLOCK_MODE_MP3); //20090803 chiayen add for media change
1512   2      
1513   2                      if(gc_CurrentCard==2)
1514   2              {           
1515   3                  if(SD_Identification_Flow())
1516   3                  {
1517   4                      gc_CardExist |=0x02;
1518   4                  }
1519   3                  else if((gb_Host_Exist==1) && (gc_HostNoFileflag==0)) //20090730 chiayen modify
1520   3                  {
1521   4                                      DEVICE_REG[0x00]= 0x01;  //20090730 chiayen add
1522   4                                      if(!Host_Initial())
1523   4                                      {
1524   5                                              gc_CurrentCard = CURRENT_MEDIA_HOST;
1525   5                                              gb_FindFlag = 0;
1526   5                      }
1527   4                          else
1528   4                          {
1529   5                                              gc_CurrentCard=0;
1530   5                                              gc_CardExist &=0xFD;
1531   5                                              gb_FindFlag = 0;
1532   5                                              InitFlash();                                
1533   5                          }
1534   4                      }
1535   3                              else 
1536   3                      {
1537   4                                      DEVICE_REG[0x00]= 0x01;  //20090730 chiayen add
1538   4                                      gc_CurrentCard=0;
1539   4                                      gc_CardExist &=0xFD;
1540   4                                      gb_FindFlag = 0;
1541   4                                      InitFlash();
1542   4                              }
1543   3                              Play_SDFlash_DosInit_Dir();
1544   3              }
1545   2                      else if(gc_CurrentCard==CURRENT_MEDIA_HOST)
1546   2                      {
1547   3                              DEVICE_REG[0x00]= 0x01;  //20090803 chiayen add                 
1548   3                              if(!Host_Initial())
1549   3                              {
1550   4                                      gc_CurrentCard = CURRENT_MEDIA_HOST;
1551   4                                      gb_FindFlag = 0;
1552   4                              }
1553   3                              else if((gb_SD_Exist==1) && (gb_SDNoFileflag==0)) //20090730 chiayen add
1554   3                              {
1555   4                          if(SD_Identification_Flow())
C51 COMPILER V7.10   DIR_PROCESS                                                           02/28/2011 10:30:46 PAGE 27  

1556   4                          { 
1557   5                              gc_CardExist |=0x02;
1558   5                                              gc_CurrentCard=2;      
1559   5                                      }
1560   4                                      else
1561   4                                      {
1562   5                                              DEVICE_REG[0x00]= 0x01;
1563   5                                              gc_CurrentCard=0;
1564   5                                              gc_CardExist &=0xFD;
1565   5                                              gb_FindFlag = 0;
1566   5                                              InitFlash();
1567   5                                      }
1568   4                              }
1569   3                              else 
1570   3                      {
1571   4                                      DEVICE_REG[0x00]= 0x01;
1572   4                                      gc_CurrentCard=0;
1573   4                                      gb_FindFlag = 0;
1574   4                                      InitFlash();
1575   4                              }
1576   3                              Play_SDFlash_DosInit_Dir();
1577   3                      }
1578   2                      else if(gc_CurrentCard==0)
1579   2              {
1580   3                              DEVICE_REG[0x00]= 0x01;
1581   3                              gc_CardExist &=0xFD;
1582   3                              InitFlash();
1583   3                              Play_SDFlash_DosInit_Dir();
1584   3                      }
1585   2          }
1586   1      }
1587          
1588          
1589          
1590          void USER_Read2KBReserveBlock_DIR(U16 DirIndex, U8 tc_CurrentCard) //Ching 090306
1591          {
1592   1              U16 tw_SectorIndex;
1593   1              U8  tc_PageNum;
1594   1              U8      tc_SetIndex;
1595   1      
1596   1              if(tc_CurrentCard!=0)  //20090721 chiayen add for host
1597   1              {
1598   2                      tc_CurrentCard=2;       
1599   2              }
1600   1      
1601   1              if(!tc_CurrentCard) tc_SetIndex = gc_SetIndex; //NandFlash
1602   1              else                            tc_SetIndex=gc_SDSetIndex; //SD
1603   1      
1604   1              tc_PageNum = (DirIndex >> 6) & 0x03; //0x11; //Ching 081121
1605   1              tw_SectorIndex = ((((tc_SetIndex & (gc_SetNumber-1)) <<2)+tc_PageNum) * gc_InAddrMax);
1606   1      
1607   1              if(tc_SetIndex & gc_SetNumber)  //read UserDataBlock[3]
1608   1                      UserData_Block_Read(3+tc_CurrentCard,tw_SectorIndex,4,/*D_BuffDIRtable*/gc_DIRtableHB); //gc_DIRtable[]
1609   1              else                                                    //read UserDataBlock[2]
1610   1                      UserData_Block_Read(2+tc_CurrentCard,tw_SectorIndex,4,/*D_BuffDIRtable*/gc_DIRtableHB);
1611   1      }
1612          
1613          
1614          void USER_Read512BReserveBlock_DIR(U16 DirIndex, U8 tc_CurrentCard) //Ching 090306
1615          {
1616   1              U16 tw_SectorIndex;
1617   1              U8  tc_PageNum, tc_SectorNum;
C51 COMPILER V7.10   DIR_PROCESS                                                           02/28/2011 10:30:46 PAGE 28  

1618   1              U8      tc_SetIndex;
1619   1      
1620   1              if(!tc_CurrentCard) tc_SetIndex = gc_SetIndex; //NandFlash
1621   1              else                            tc_SetIndex=gc_SDSetIndex; //SD
1622   1      
1623   1              tc_SetIndex = gc_SetIndex;
1624   1              tc_CurrentCard = 0;
1625   1      
1626   1              tc_PageNum = (DirIndex >> 6) & 0x03; //0x11; //Ching 081121
1627   1              tc_SectorNum = (DirIndex & 0x3F) >> 4;
1628   1      
1629   1              tw_SectorIndex = ((((tc_SetIndex & (gc_SetNumber-1)) <<2)+tc_PageNum) * gc_InAddrMax) + tc_SectorNum;
1630   1      
1631   1              if(tc_SetIndex & gc_SetNumber)  //read UserDataBlock[3]/[5]
1632   1                      UserData_Block_Read(3+tc_CurrentCard,tw_SectorIndex,1,0xA8); //gc_UserDataBuf[]
1633   1              else                                                    //read UserDataBlock[2]/[4]
1634   1                      UserData_Block_Read(2+tc_CurrentCard,tw_SectorIndex,1,0xA8);
1635   1      }
1636          
1637          
1638          void IR_Service_Process_DIR(void)
1639          {
1640   1          if(gc_IRCmdStatus==1)
1641   1          {
1642   2              ir_service_menu();
1643   2          }
1644   1      }
1645          
1646          
1647          void Dir_Task(void)
1648          {
1649   1              gc_PlayMenu_Timeout=160;
1650   1      
1651   1              if(gc_TaskMode_BkUp > 3) //C_Task_Jpeg/C_Task_Mjpeg/C_Task_TXT (not C_Task_Play/C_Task_Voice)
1652   1              {
1653   2                      gs_System_State.c_FileHandle = 2;
1654   2                      gb_FindFlag = 0;
1655   2                      gs_File_FCB[gs_System_State.c_FileHandle].dw_FDB_StartCluster = gdw_DOS_RootDirClus;
1656   2                      if(gc_TaskMode_BkUp == C_Task_Jpeg)
1657   2                      {
1658   3                              EXT_NameC[0] = 3;
1659   3                              EXT_NameC[1] = 'J';
1660   3                              EXT_NameC[2] = 'P';
1661   3                              EXT_NameC[3] = 'G';
1662   3                              EXT_NameC[4] = 'B';
1663   3                              EXT_NameC[5] = 'M';
1664   3                              EXT_NameC[6] = 'P';
1665   3                              EXT_NameC[7] = 'G';
1666   3                              EXT_NameC[8] = 'I';
1667   3                              EXT_NameC[9] = 'F';
1668   3                              DOS_Search_File(C_File_All|C_Cnt_FileNo,C_OtherFileType,C_CmpExtName|C_Next);
1669   3                              if(gw_FileTotalNumber[2]==0)
1670   3                              {
1671   4                                      gc_Task_Current = C_Task_Jpeg;
1672   4                                      return;
1673   4                              }
1674   3                      }
1675   2                      else if(gc_TaskMode_BkUp == C_Task_Mjpeg)
1676   2                      {
1677   3                              EXT_NameC[0] = 2;
1678   3                              EXT_NameC[1] = 'S';
1679   3                              EXT_NameC[2] = 'C';
C51 COMPILER V7.10   DIR_PROCESS                                                           02/28/2011 10:30:46 PAGE 29  

1680   3                              EXT_NameC[3] = 'V';
1681   3                              EXT_NameC[4] = 'A';
1682   3                              EXT_NameC[5] = 'M';
1683   3                              EXT_NameC[6] = 'V';
1684   3                              DOS_Search_File(C_File_All|C_Cnt_FileNo,C_OtherFileType,C_CmpExtName|C_Next);
1685   3                              if(gw_FileTotalNumber[2]==0)
1686   3                              {
1687   4                                      gc_Task_Current = C_Task_Mjpeg;
1688   4                                      return;
1689   4                              }
1690   3                      }
1691   2                      else //error, back to Main Menu
1692   2                      {
1693   3                              gs_System_State.c_FileHandle = 0;
1694   3                              gc_PhaseInx = 0;
1695   3                              gc_Task_Current = C_Task_Menu;
1696   3                              return;
1697   3                      }
1698   2              }
1699   1      
1700   1              if((!gs_System_State.c_FileHandle) || (gs_System_State.c_FileHandle == 2)) //music or jpg/mjpg/txt, Ching
             - 090311
1701   1              {
1702   2                      //check if DIRtable is valid
1703   2      //              dbprintf("================== DOS_DIRtable!! ================== %bx\n", gc_CurrentCard);
1704   2                      if(!gc_CurrentCard) //NandFlash
1705   2                      {
1706   3                              Get_LogData_PageIndex();
1707   3                              if(gc_DirReBuildFlag != D_Valid)
1708   3                              {
1709   4      //                              dbprintf("Build Dir Table\n");
1710   4                                      if(DOS_DIRtable())
1711   4                                      {
1712   5      //                                      dbprintf("Build Dir Table Fail!!\n");
1713   5                                      }
1714   4                                      else
1715   4                                      {
1716   5      //                                      dbprintf("================== DOS_DIRtable Done!! ==================\n");
1717   5                                      }
1718   4                              }
1719   3                              else
1720   3                              {
1721   4      //                              dbprintf("Dir Table Is Valid. No Need to ReBuild!!\n");
1722   4                              }
1723   3                      }
1724   2                      else //SD
1725   2                      {
1726   3                              if(!gbt_SD_BuildDIRFlag)
1727   3                              {
1728   4      //                              dbprintf("Build SD's Dir Table\n");
1729   4                                      if(DOS_DIRtable())
1730   4                                      {
1731   5      //                                      dbprintf("Build SD's Dir Table Fail!!\n");
1732   5                                      }
1733   4                                      else
1734   4                                      {
1735   5      //                                      dbprintf("================== SD's DOS_DIRtable Done!! ==================\n");
1736   5                                      }
1737   4                              }
1738   3                              else
1739   3                              {
1740   4      //                              dbprintf("SD's Dir Table Is Valid. No Need to ReBuild!!\n");
C51 COMPILER V7.10   DIR_PROCESS                                                           02/28/2011 10:30:46 PAGE 30  

1741   4                              }
1742   3                      }
1743   2              }
1744   1      
1745   1              if(!gs_System_State.c_FileHandle) //music
1746   1                      DirManagement_Init();
1747   1              else if(gs_System_State.c_FileHandle == 2) //jpg/mjpg/txt, Ching 090311
1748   1                      OtherManagement_Init();
1749   1      
1750   1              while(1)
1751   1              {
1752   2                      DirManagement_Process();
1753   2                      gc_PhaseInx=0;
1754   2      
1755   2      //              if(gc_PlayMenu_IR==0)
1756   2                      {
1757   3                              Polling_TaskEvents();
1758   3                  IR_Service_Process_DIR();   
1759   3                      }
1760   2      
1761   2                  if(gc_PhaseInx==C_PowerOff)
1762   2                      {
1763   3                              gc_Task_Next=C_Task_PowerOff;
1764   3                      }                                               
1765   2      
1766   2                      Play_SourceDetect_Process_Dir();
1767   2      
1768   2              if(gc_Task_Current!=gc_Task_Next)
1769   2              {
1770   3                              gc_DispWallpaper=1;  //InitDisp variable
1771   3                              if(gc_TaskMode_BkUp==C_Task_Jpeg)
1772   3                              {
1773   4                                      gc_PhaseInx=1;  
1774   4                              }
1775   3                              else if(gc_TaskMode_BkUp==C_Task_Mjpeg)  //20090331
1776   3                              {
1777   4                                      gc_PhaseInx=3;  
1778   4                              }
1779   3      
1780   3                              if(gb_SourceChange_Dir==0)
1781   3                              {
1782   4                                      gb_DirPlay_Flag=1;
1783   4                              }
1784   3                              else
1785   3                              {
1786   4                                      gb_SourceChange_Dir=0;
1787   4                              }
1788   3                  gc_Task_Current=gc_Task_Next;
1789   3                  break;  
1790   3              }
1791   2              }
1792   1      }
1793          
1794          
1795          void USER_WriteReserveBlock_DIR(U8 tc_PageNum, U8 tc_CurrentCard) //Ching 090306
1796          {
1797   1              U16 tw_SectorIndex;
1798   1              U8      tc_SetIndex;
1799   1              U8  tc_1stBlock, tc_2ndBlock;
1800   1      
1801   1              tc_1stBlock = 2 + tc_CurrentCard;
1802   1              tc_2ndBlock = 3 + tc_CurrentCard;
C51 COMPILER V7.10   DIR_PROCESS                                                           02/28/2011 10:30:46 PAGE 31  

1803   1      
1804   1              if(!tc_CurrentCard) tc_SetIndex = gc_SetIndex; //NandFlash
1805   1              else                            tc_SetIndex=gc_SDSetIndex; //SD
1806   1      
1807   1              if(tc_SetIndex == (gc_SetNumber*2))
1808   1              {
1809   2                      UserData_Block_Erase(tc_2ndBlock); //[3]/[5]
1810   2                      tc_SetIndex = 0;
1811   2      
1812   2                      if(!tc_CurrentCard) gc_SetIndex = 0; //NandFlash
1813   2                      else                            gc_SDSetIndex=0; //SD
1814   2              }
1815   1              else if(tc_SetIndex == gc_SetNumber)
1816   1                      UserData_Block_Erase(tc_1stBlock); //[2]/[4]
1817   1      
1818   1              tw_SectorIndex = (((tc_SetIndex & (gc_SetNumber-1)) <<2)+tc_PageNum) * gc_InAddrMax;
1819   1              //dbprintf("Write - gc_SetIndex:%bx, tw_SectorIndex:%x %bx %bx\n",gc_SetIndex,tw_SectorIndex,gc_SetIndex,
             -gc_SetNumber);
1820   1      
1821   1              if(tc_SetIndex & gc_SetNumber)  //write to UserDataBlock[3]/[5]
1822   1              {
1823   2                      UserData_Block_Write(tc_2ndBlock,tw_SectorIndex,4,gc_DIRtableHB);
1824   2              }
1825   1              else                                                    //write to UserDataBlock[2]/[4]
1826   1              {
1827   2                      UserData_Block_Write(tc_1stBlock,tw_SectorIndex,4,gc_DIRtableHB);
1828   2              }
1829   1      }
1830          
1831          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   9666    ----
   CONSTANT SIZE    =     55    ----
   XDATA SIZE       =      6     231
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----       4
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      2       3
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
