A51 MACRO ASSEMBLER  L51_BANKINGLOADER                                                    06/07/2012 14:16:48 PAGE     1


MACRO ASSEMBLER A51 V8.01
OBJECT MODULE PLACED IN .\obj\L51_BankingLoader.OBJ
ASSEMBLER INVOKED BY: C:\Keil\C51\BIN\A51.EXE .\obj\L51_BankingLoader.src PR(.\lst\L51_BankingLoader.ls1) EP DEBUG

LOC  OBJ            LINE     SOURCE

                       1     ; .\obj\L51_BankingLoader.SRC generated from: ..\LIBSOURCE\ASM\L51_BankingLoader.c
                       2     ; COMPILER INVOKED BY:
                       3     ;        C:\Keil\C51\BIN\C51.EXE ..\LIBSOURCE\ASM\L51_BankingLoader.c LARGE OPTIMIZE(9,SIZE
                             ) BROWSE NOAREGS INCDIR(..\libsource\header) DEFINE(K_ICTYPE=0x03) DEBUG OBJECTEXTEND PRINT
                             (.\lst\L51_BankingLoader.lst) SRC(.\obj\L51_BankingLoader.SRC)
                       4     
                       5     $nomod51 
                       6     
                       7     NAME    L51_BANKINGLOADER
                       8     
  00E7                 9     ACC7    BIT     0E0H.7
  0080                10     P0      DATA    080H
  0090                11     P1      DATA    090H
  00A0                12     P2      DATA    0A0H
  00B0                13     P3      DATA    0B0H
  00B4                14     T0      BIT     0B0H.4
  00D6                15     AC      BIT     0D0H.6
  00B5                16     T1      BIT     0B0H.5
  00AF                17     EA      BIT     0A8H.7
  00A8                18     IE      DATA    0A8H
  0093                19     LCD_CLK BIT     090H.3
  00B0                20     P3_0    BIT     0B0H.0
  00B1                21     P3_1    BIT     0B0H.1
  0093                22     P1_3    BIT     090H.3
  00CE                23     EXF2    BIT     0C8H.6
  00B7                24     RD      BIT     0B0H.7
  0096                25     P1_6    BIT     090H.6
  0097                26     P1_7    BIT     090H.7
  00AC                27     ES      BIT     0A8H.4
  00B8                28     IP      DATA    0B8H
  0098                29     RI      BIT     098H.0
  00B2                30     INT0    BIT     0B0H.2
  00D7                31     CY      BIT     0D0H.7
  0099                32     TI      BIT     098H.1
  00B3                33     INT1    BIT     0B0H.3
  009B                34     RamPage DATA    09BH
  00CB                35     RCAP2H  DATA    0CBH
  00BC                36     PS      BIT     0B8H.4
  0081                37     SP      DATA    081H
  00D2                38     OV      BIT     0D0H.2
  00CA                39     RCAP2L  DATA    0CAH
  00C9                40     C_T2    BIT     0C8H.1
  00B6                41     WR      BIT     0B0H.6
  00CD                42     RCLK    BIT     0C8H.5
  00CC                43     TCLK    BIT     0C8H.4
  0099                44     SBUF    DATA    099H
  0087                45     PCON    DATA    087H
  00B0                46     COLOR_R BIT     0B0H.0
  0098                47     SCON    DATA    098H
  0089                48     TMOD    DATA    089H
  0088                49     TCON    DATA    088H
  0089                50     IE0     BIT     088H.1
  008B                51     IE1     BIT     088H.3
  00F0                52     B       DATA    0F0H
  00C8                53     CP_RL2  BIT     0C8H.0
  00E0                54     ACC     DATA    0E0H
  00A9                55     ET0     BIT     0A8H.1
  00AB                56     ET1     BIT     0A8H.3
A51 MACRO ASSEMBLER  L51_BANKINGLOADER                                                    06/07/2012 14:16:48 PAGE     2

  008D                57     TF0     BIT     088H.5
  00AD                58     ET2     BIT     0A8H.5
  008F                59     TF1     BIT     088H.7
  00CF                60     TF2     BIT     0C8H.7
  009A                61     RB8     BIT     098H.2
  008C                62     TH0     DATA    08CH
  00A8                63     EX0     BIT     0A8H.0
  0088                64     IT0     BIT     088H.0
  008D                65     TH1     DATA    08DH
  009B                66     TB8     BIT     098H.3
  00AA                67     EX1     BIT     0A8H.2
  008A                68     IT1     BIT     088H.2
  00CD                69     TH2     DATA    0CDH
  00D0                70     P       BIT     0D0H.0
  009F                71     SM0     BIT     098H.7
  0094                72     LCD_SI  BIT     090H.4
  008A                73     TL0     DATA    08AH
  009E                74     SM1     BIT     098H.6
  008B                75     TL1     DATA    08BH
  009D                76     SM2     BIT     098H.5
  00CC                77     TL2     DATA    0CCH
  0091                78     SD_Detect       BIT     090H.1
  00B9                79     PT0     BIT     0B8H.1
  00BB                80     PT1     BIT     0B8H.3
  00D3                81     RS0     BIT     0D0H.3
  00BD                82     PT2     BIT     0B8H.5
  008C                83     TR0     BIT     088H.4
  00D4                84     RS1     BIT     0D0H.4
  008E                85     TR1     BIT     088H.6
  00CA                86     TR2     BIT     0C8H.2
  00B8                87     PX0     BIT     0B8H.0
  0092                88     LCD_RS  BIT     090H.2
  00BA                89     PX1     BIT     0B8H.2
  0083                90     DPH     DATA    083H
  0091                91     LOCK_SWITCH     BIT     090H.1
  0082                92     DPL     DATA    082H
  00CB                93     EXEN2   BIT     0C8H.3
  009C                94     REN     BIT     098H.4
  00C8                95     T2CON   DATA    0C8H
  00B0                96     RXD     BIT     0B0H.0
  008E                97     CKCON   DATA    08EH
  00B1                98     TXD     BIT     0B0H.1
  00D5                99     F0      BIT     0D0H.5
  00E0               100     ACC0    BIT     0E0H.0
  00E1               101     ACC1    BIT     0E0H.1
  00E2               102     ACC2    BIT     0E0H.2
  00E3               103     ACC3    BIT     0E0H.3
  00D0               104     PSW     DATA    0D0H
  00E4               105     ACC4    BIT     0E0H.4
  00E5               106     ACC5    BIT     0E0H.5
  00E6               107     ACC6    BIT     0E0H.6
                     108     ?PR?perform_nand_bank_call?L51_BANKINGLOADER SEGMENT CODE 
                     109     ?PR?return_from_nand_bank?L51_BANKINGLOADER SEGMENT CODE 
                     110     ?PR?load_nand_bank?L51_BANKINGLOADER     SEGMENT CODE 
                     111     ?XD?load_nand_bank?L51_BANKINGLOADER     SEGMENT XDATA OVERLAYABLE 
                     112     ?PR?FLASH_MultRead_DRAM?L51_BANKINGLOADER SEGMENT CODE 
                     113     ?XD?FLASH_MultRead_DRAM?L51_BANKINGLOADER SEGMENT XDATA OVERLAYABLE 
                     114     ?BI?FLASH_MultRead_DRAM?L51_BANKINGLOADER SEGMENT BIT OVERLAYABLE 
                     115     ?PR?_Banking_NAND_InAddr_To_Column_NAND?L51_BANKINGLOADER SEGMENT CODE 
                     116     ?XD?_Banking_NAND_InAddr_To_Column_NAND?L51_BANKINGLOADER SEGMENT XDATA OVERLAYABLE 
                     117     ?PR?_Banking_NAND_FBlock_FPage_FBank_To_PhyAddr_NAND?L51_BANKINGLOADER SEGMENT CODE 
                     118     ?XD?_Banking_NAND_FBlock_FPage_FBank_To_PhyAddr_NAND?L51_BANKINGLOADER SEGMENT XDATA OVERLA
                             YABLE 
                     119     ?C_INITSEG           SEGMENT CODE 
                     120     ?DT?L51_BANKINGLOADER                    SEGMENT DATA 
                     121     ?XD?L51_BANKINGLOADER                    SEGMENT XDATA 
A51 MACRO ASSEMBLER  L51_BANKINGLOADER                                                    06/07/2012 14:16:48 PAGE     3

                     122     ?PR?L51_BANKINGLOADER                    SEGMENT CODE 
                     123             EXTRN   CODE (CHK_Flash_Ready)
                     124             EXTRN   CODE (CHK_NandAutocmp_Done)
                     125             EXTRN   CODE (SET_DEVICE_READ_TO_DRAM)
                     126             EXTRN   XDATA (gc_InAddrMax)
                     127             EXTRN   XDATA (Device_Xfer_DataLength)
                     128             EXTRN   CODE (TRIGGER_FLASH_CMD)
                     129             EXTRN   XDATA (Device_Read_SRAM_Index)
                     130             EXTRN   XDATA (NAND_INFO)
                     131             EXTRN   CODE (Reset_DMA)
                     132             EXTRN   CODE (CHK_Data_Transfer_Done)
                     133             EXTRN   XDATA (gw_PagesPerBlock)
                     134             EXTRN   BIT (gbt_Code_NeedRecover)
                     135             EXTRN   CODE (Trigger_Data_Transfer)
                     136             EXTRN   CODE (CHK_ECC_Done)
                     137             EXTRN   XDATA (Bank_Block_A)
                     138             EXTRN   XDATA (Bank_Block_B)
                     139             EXTRN   XDATA (gc_Flash_Data)
                     140             EXTRN   CODE (?C?UIDIV)
                     141             EXTRN   CODE (?C?IMUL)
                     142             PUBLIC  tgc_InAddr
                     143             PUBLIC  gc_bank_number
                     144             PUBLIC  ?_Banking_NAND_FBlock_FPage_FBank_To_PhyAddr_NAND?BYTE
                     145             PUBLIC  _Banking_NAND_FBlock_FPage_FBank_To_PhyAddr_NAND
                     146             PUBLIC  _Banking_NAND_InAddr_To_Column_NAND
                     147             PUBLIC  ?FLASH_MultRead_DRAM?BIT
                     148             PUBLIC  ?FLASH_MultRead_DRAM?BYTE
                     149             PUBLIC  FLASH_MultRead_DRAM
                     150             PUBLIC  load_nand_bank
                     151             PUBLIC  return_from_nand_bank
                     152             PUBLIC  perform_nand_bank_call
                     153     
----                 154             RSEG  ?XD?load_nand_bank?L51_BANKINGLOADER
0000                 155     ?load_nand_bank?BYTE:
0000                 156        tc_FPage?242:   DS   1
0001                 157             ORG  1
0001                 158       tc_InAddr?243:   DS   1
0002                 159             ORG  2
0002                 160        u_FBlock?244:   DS   2
0004                 161             ORG  4
0004                 162     tc_bank_block?246:   DS   1
                     163     
----                 164             RSEG  ?XD?_Banking_NAND_InAddr_To_Column_NAND?L51_BANKINGLOADER
0000                 165     ?_Banking_NAND_InAddr_To_Column_NAND?BYTE:
0000                 166     tw_FColAddr?460:   DS   2
                     167     
----                 168             RSEG  ?XD?_Banking_NAND_FBlock_FPage_FBank_To_PhyAddr_NAND?L51_BANKINGLOADER
0000                 169     ?_Banking_NAND_FBlock_FPage_FBank_To_PhyAddr_NAND?BYTE:
0000                 170        tc_FPage?561:   DS   1
0001                 171        tc_FBank?562:   DS   1
0002                 172       tc_Block1?563:   DS   1
0003                 173             ORG  3
0003                 174       tc_Block0?564:   DS   1
                     175     
----                 176             RSEG  ?XD?FLASH_MultRead_DRAM?L51_BANKINGLOADER
0000                 177     ?FLASH_MultRead_DRAM?BYTE:
0000                 178        tc_FPage?350:   DS   1
0001                 179             ORG  1
0001                 180       tc_Block1?351:   DS   1
0002                 181             ORG  2
0002                 182       tc_Block0?352:   DS   1
0003                 183             ORG  3
0003                 184      tc_PageNum?353:   DS   1
0004                 185             ORG  4
0004                 186       u_FBlock1?355:   DS   2
0006                 187             ORG  6
A51 MACRO ASSEMBLER  L51_BANKINGLOADER                                                    06/07/2012 14:16:48 PAGE     4

0006                 188       tc_InAddr?356:   DS   1
0007                 189             ORG  7
0007                 190        tc_FBank?357:   DS   1
0008                 191             ORG  8
0008                 192     tc_InAddrMax?358:   DS   1
                     193     
----                 194             RSEG  ?BI?FLASH_MultRead_DRAM?L51_BANKINGLOADER
0000                 195     ?FLASH_MultRead_DRAM?BIT:
0000                 196      tbt_Backup?349:   DBIT   1
0001                 197             ORG  1
0001                 198     tbt_DoSendCommand?354:   DBIT   1
                     199     
----                 200             RSEG  ?DT?L51_BANKINGLOADER
0000                 201      gc_bank_number:   DS   1
                     202     
----                 203             RSEG  ?XD?L51_BANKINGLOADER
0000                 204          tgc_InAddr:   DS   1
                     205     
----                 206             RSEG  ?C_INITSEG
0000 01              207             DB      001H
0001 00       F      208             DB      gc_bank_number
0002 00              209             DB      000H
                     210     
                     211     ; #include <stdio.h>
                     212     ; #include "SPDA2K.h"
                     213     ; 
                     214     ; #define SECTORS_PER_BANK      32  //1 sector = 1K Byte
                     215     ; 
                     216     ; U8 data gc_bank_number = 0;   //!< The current banking number in instruction SRAM.
                     217     ; U8 tgc_InAddr; //0602 Jay add for  
                     218     ; bit FLASH_MultRead_DRAM(bit tbt_Backup, U8 tc_FPage, UBYTE tc_Block1, UBYTE tc_Block0, UB
                             YTE tc_PageNum);
                     219     ; void Banking_NAND_InAddr_To_Column_NAND(UBYTE tc_InAddr);
                     220     ; void Banking_NAND_FBlock_FPage_FBank_To_PhyAddr_NAND(U8  tc_FPage, UBYTE tc_FBank, UBYTE 
                             tc_Block1, UBYTE tc_Block0);
                     221     ; 
                     222     ; //! Entry of the banking loader.
                     223     
----                 224             RSEG  ?PR?L51_BANKINGLOADER
0000                 225     Com0024:
0000                 226     L?0037:
                     227             USING   0
0000 90B80A          228             MOV     DPTR,#0B80AH
0003 EF              229             MOV     A,R7
0004 F0              230             MOVX    @DPTR,A
0005 90B809          231             MOV     DPTR,#0B809H
0008 EB              232             MOV     A,R3
0009 F0              233             MOVX    @DPTR,A
000A 900000   F      234             MOV     DPTR,#tc_Block0?564
000D E0              235             MOVX    A,@DPTR
000E 90B808          236             MOV     DPTR,#0B808H
0011 F0              237             MOVX    @DPTR,A
0012 22              238             RET     
0013                 239     L?0038:
                     240             USING   3
0013 900000   F      241             MOV     DPTR,#Device_Read_SRAM_Index
0016 7460            242             MOV     A,#060H
0018 F0              243             MOVX    @DPTR,A
0019 A3              244             INC     DPTR
001A E4              245             CLR     A
001B F0              246             MOVX    @DPTR,A
001C 900000   F      247             MOV     DPTR,#tc_bank_block?246
001F E0              248             MOVX    A,@DPTR
0020 25E0            249             ADD     A,ACC
0022 22              250             RET     
0023                 251     L?0039:
A51 MACRO ASSEMBLER  L51_BANKINGLOADER                                                    06/07/2012 14:16:48 PAGE     5

                     252             USING   3
0023 F583            253             MOV     DPH,A
0025 E0              254             MOVX    A,@DPTR
0026 FF              255             MOV     R7,A
0027 A3              256             INC     DPTR
0028 E0              257             MOVX    A,@DPTR
0029 900000   F      258             MOV     DPTR,#u_FBlock?244
002C CF              259             XCH     A,R7
002D F0              260             MOVX    @DPTR,A
002E A3              261             INC     DPTR
002F EF              262             MOV     A,R7
0030 F0              263             MOVX    @DPTR,A
0031 22              264             RET     
                     265     ; END OF Com0024
                     266     
                     267     ; void perform_nand_bank_call(void)
                     268     
----                 269             RSEG  ?PR?perform_nand_bank_call?L51_BANKINGLOADER
0000                 270     perform_nand_bank_call:
                     271             USING   0
                     272                             ; SOURCE LINE # 13
                     273     ; {
                     274                             ; SOURCE LINE # 14
                     275     ; #pragma asm
                     276     ; Using3_R0 EQU 018H
  0018               277               Using3_R0 EQU 018H
                     278     ; Using3_R1 EQU 019H
  0019               279               Using3_R1 EQU 019H
                     280     ; Using3_R2 EQU 01AH
  001A               281               Using3_R2 EQU 01AH
                     282     ; Using3_R3 EQU 01BH
  001B               283               Using3_R3 EQU 01BH
                     284     ; Using3_R4 EQU 01CH
  001C               285               Using3_R4 EQU 01CH
                     286     ; Using3_R5 EQU 01DH
  001D               287               Using3_R5 EQU 01DH
                     288     ; Using3_R6 EQU 01EH
  001E               289               Using3_R6 EQU 01EH
                     290     ; Using3_R7 EQU 01FH
  001F               291               Using3_R7 EQU 01FH
                     292     ; 
                     293               
                     294     ; 
                     295               
                     296     ;       cjne A, gc_bank_number, ?_need_to_load_nand_bank
0000 B50005   F      297               cjne A, gc_bank_number, ?_need_to_load_nand_bank
                     298     ;       push DPL
0003 C082            299               push DPL
                     300     ;       push DPH
0005 C083            301               push DPH
                     302     ;       ret
0007 22              303               ret
                     304     ; 
                     305               
                     306     ; ?_need_to_load_nand_bank:
0008                 307               ?_need_to_load_nand_bank:
                     308     ;       //Target Bank Number is in register A
                     309               
                     310     ;       push gc_bank_number
0008 C000     F      311               push gc_bank_number
                     312     ;       mov  gc_bank_number, A
000A F500     F      313               mov  gc_bank_number, A
                     314     ; 
                     315               
                     316     ;       //push the bank recover function for returning use
                     317               
A51 MACRO ASSEMBLER  L51_BANKINGLOADER                                                    06/07/2012 14:16:48 PAGE     6

                     318     ;       mov  A, #LOW return_from_nand_bank
000C 7400     F      319               mov  A, #LOW return_from_nand_bank
                     320     ;       push ACC
000E C0E0            321               push ACC
                     322     ;       mov  A, #HIGH return_from_nand_bank
0010 7400     F      323               mov  A, #HIGH return_from_nand_bank
                     324     ;       push ACC
0012 C0E0            325               push ACC
                     326     ;       //push target address
                     327               
                     328     ;       push DPL
0014 C082            329               push DPL
                     330     ;       push DPH
0016 C083            331               push DPH
                     332     ;       //push PSW and IE
                     333               
                     334     ;       push PSW
0018 C0D0            335               push PSW
                     336     ;       mov  PSW, #18   //use register bank3
001A 75D012          337               mov  PSW, #18  
                     338     ;       push IE
001D C0A8            339               push IE
                     340     ;       clr  EA                 //disable IRQ
001F C2AF            341               clr  EA                        
                     342     ; 
                     343               
                     344     ;       call load_nand_bank
0021 120000   F      345               call load_nand_bank
                     346     ; 
                     347               
                     348     ;       //recover IE and PSW
                     349               
                     350     ;       pop  IE
0024 D0A8            351               pop  IE
                     352     ;       pop  PSW
0026 D0D0            353               pop  PSW
                     354     ;       ret
0028 22              355               ret
                     356     ; #pragma endasm
                     357     ; }
                     358                             ; SOURCE LINE # 57
0029 22              359             RET     
                     360     ; END OF perform_nand_bank_call
                     361     
                     362     ; 
                     363     ; //! Exit of the banking loader.
                     364     ; void return_from_nand_bank(void)
                     365     
----                 366             RSEG  ?PR?return_from_nand_bank?L51_BANKINGLOADER
0000                 367     return_from_nand_bank:
                     368             USING   0
                     369                             ; SOURCE LINE # 60
                     370     ; {
                     371                             ; SOURCE LINE # 61
                     372     ; #pragma asm
                     373     ;       mov  A, gc_bank_number  //A is current bank
0000 E500     F      374               mov  A, gc_bank_number         
                     375     ;       pop  gc_bank_number             //gc_bank_number is return bank
0002 D000     F      376               pop  gc_bank_number            
                     377     ;       push PSW
0004 C0D0            378               push PSW
                     379     ;       cjne A, gc_bank_number, ?_recover_need_load_nand
0006 B50003   F      380               cjne A, gc_bank_number, ?_recover_need_load_nand
                     381     ;       pop PSW
0009 D0D0            382               pop PSW
                     383     ;       ret
A51 MACRO ASSEMBLER  L51_BANKINGLOADER                                                    06/07/2012 14:16:48 PAGE     7

000B 22              384               ret
                     385     ; ?_recover_need_load_nand:
000C                 386               ?_recover_need_load_nand:
                     387     ;       mov  PSW, #18                   //use register bank3
000C 75D012          388               mov  PSW, #18                          
                     389     ;       push IE
000F C0A8            390               push IE
                     391     ;       clr  EA                                 //disable IRQ
0011 C2AF            392               clr  EA                                        
                     393     ; 
                     394               
                     395     ;       call load_nand_bank
0013 120000   F      396               call load_nand_bank
                     397     ; 
                     398               
                     399     ;       //pop PSW and IE
                     400               
                     401     ;       pop  IE
0016 D0A8            402               pop  IE
                     403     ;       pop  PSW
0018 D0D0            404               pop  PSW
                     405     ;       ret
001A 22              406               ret
                     407     ; #pragma endasm
                     408     ; }
                     409                             ; SOURCE LINE # 81
001B 22              410             RET     
                     411     ; END OF return_from_nand_bank
                     412     
                     413     ; 
                     414     ; 
                     415     ; //! NAND banking loader.
                     416     ; void load_nand_bank(void) using 3
                     417     
----                 418             RSEG  ?PR?load_nand_bank?L51_BANKINGLOADER
0000                 419     load_nand_bank:
                     420             USING   3
0000 C0D0            421             PUSH    PSW
0002 75D018          422             MOV     PSW,#018H
                     423                             ; SOURCE LINE # 85
                     424     ; {
                     425     ;       U8 tc_banks_per_block, tc_bank_number;
                     426     ;       U8  tc_FPage;
                     427     ;       U8  tc_InAddr;
                     428     ;       union WORDDataType u_FBlock;
                     429     ;       U8 tc_pages_per_bank;
                     430     ;       U8 tc_bank_block, tc_bank_offset,tc_InAddrMax;
                     431     ; 
                     432     ;       XBYTE[0xB400]=1;
                     433                             ; SOURCE LINE # 94
0005 90B400          434             MOV     DPTR,#0B400H
0008 7401            435             MOV     A,#01H
000A F0              436             MOVX    @DPTR,A
                     437     ;       tc_InAddrMax=gc_InAddrMax;
                     438                             ; SOURCE LINE # 95
000B 900000   F      439             MOV     DPTR,#gc_InAddrMax
000E E0              440             MOVX    A,@DPTR
                     441     ;---- Variable 'tc_InAddrMax?248' assigned to Register 'R3' ----
000F FB              442             MOV     R3,A
                     443     ; 
                     444     ;       tc_pages_per_bank = SECTORS_PER_BANK/tc_InAddrMax;                      // gc_InAdd
                             rMax = sectors per page
                     445                             ; SOURCE LINE # 97
0010 7420            446             MOV     A,#020H
0012 8BF0            447             MOV     B,R3
0014 84              448             DIV     AB
A51 MACRO ASSEMBLER  L51_BANKINGLOADER                                                    06/07/2012 14:16:48 PAGE     8

                     449     ;---- Variable 'tc_pages_per_bank?245' assigned to Register 'R2' ----
0015 FA              450             MOV     R2,A
                     451     ;       tc_banks_per_block = gw_PagesPerBlock/tc_pages_per_bank;        // Number of 16kB b
                             anks in a block
                     452                             ; SOURCE LINE # 98
0016 FD              453             MOV     R5,A
0017 7C00            454             MOV     R4,#00H
0019 900000   F      455             MOV     DPTR,#gw_PagesPerBlock
001C E0              456             MOVX    A,@DPTR
001D FE              457             MOV     R6,A
001E A3              458             INC     DPTR
001F E0              459             MOVX    A,@DPTR
0020 FF              460             MOV     R7,A
0021 120000   F      461             LCALL   ?C?UIDIV
                     462     ;---- Variable 'tc_banks_per_block?240' assigned to Register 'R7' ----
                     463     ;       if (gc_bank_number == 0)
                     464                             ; SOURCE LINE # 99
0024 E500     F      465             MOV     A,gc_bank_number
0026 701D            466             JNZ     ?C0003
                     467     ;       {
                     468                             ; SOURCE LINE # 100
                     469     ;               tc_bank_block = 0;
                     470                             ; SOURCE LINE # 101
0028 900000   F      471             MOV     DPTR,#tc_bank_block?246
002B F0              472             MOVX    @DPTR,A
                     473     ;               tc_FPage = (48/tc_InAddrMax);                   // commom is 20k 
                     474                             ; SOURCE LINE # 102
002C 7430            475             MOV     A,#030H
002E 8BF0            476             MOV     B,R3
0030 84              477             DIV     AB
0031 900000   F      478             MOV     DPTR,#tc_FPage?242
0034 F0              479             MOVX    @DPTR,A
                     480     ;               tgc_InAddr = 48%tc_InAddrMax;   //0602 Jay add
                     481                             ; SOURCE LINE # 103
0035 CF              482             XCH     A,R7
0036 EB              483             MOV     A,R3
0037 CF              484             XCH     A,R7
0038 7430            485             MOV     A,#030H
003A 8FF0            486             MOV     B,R7
003C 84              487             DIV     AB
003D 900000   F      488             MOV     DPTR,#tgc_InAddr
0040 E5F0            489             MOV     A,B
0042 F0              490             MOVX    @DPTR,A
                     491     ;       }
                     492                             ; SOURCE LINE # 104
0043 8022            493             SJMP    ?C0004
0045                 494     ?C0003:
                     495     ;       else
                     496     ;       {
                     497                             ; SOURCE LINE # 106
                     498     ;               tc_bank_number  = gc_bank_number +2;    // Offset of the bank to the start 
                             of code region in unit of 16kB
                     499                             ; SOURCE LINE # 107
0045 E500     F      500             MOV     A,gc_bank_number
0047 2402            501             ADD     A,#02H
0049 FE              502             MOV     R6,A
                     503     ;---- Variable 'tc_bank_number?241' assigned to Register 'R6' ----
                     504     ;               tc_bank_block   = tc_bank_number / tc_banks_per_block;  // in unit of 16kB
                     505                             ; SOURCE LINE # 108
004A 8FF0            506             MOV     B,R7
004C 84              507             DIV     AB
004D 900000   F      508             MOV     DPTR,#tc_bank_block?246
0050 F0              509             MOVX    @DPTR,A
                     510     ;               tc_bank_offset  = tc_bank_number % tc_banks_per_block;  // Offset of the ba
                             nk in its block in unit of 16kB
                     511                             ; SOURCE LINE # 109
A51 MACRO ASSEMBLER  L51_BANKINGLOADER                                                    06/07/2012 14:16:48 PAGE     9

0051 EE              512             MOV     A,R6
0052 8FF0            513             MOV     B,R7
0054 84              514             DIV     AB
0055 AFF0            515             MOV     R7,B
                     516     ;---- Variable 'tc_bank_offset?247' assigned to Register 'R7' ----
                     517     ;               tc_FPage                = tc_bank_offset * tc_pages_per_bank;   // page off
                             set of the bank in its block
                     518                             ; SOURCE LINE # 110
0057 CE              519             XCH     A,R6
0058 EA              520             MOV     A,R2
0059 CE              521             XCH     A,R6
005A EF              522             MOV     A,R7
005B 8EF0            523             MOV     B,R6
005D A4              524             MUL     AB
005E 900000   F      525             MOV     DPTR,#tc_FPage?242
0061 F0              526             MOVX    @DPTR,A
                     527     ;               tgc_InAddr       = 0;
                     528                             ; SOURCE LINE # 111
0062 E4              529             CLR     A
0063 900000   F      530             MOV     DPTR,#tgc_InAddr
0066 F0              531             MOVX    @DPTR,A
                     532     ;       }
                     533                             ; SOURCE LINE # 112
0067                 534     ?C0004:
                     535     ;       tc_InAddr =tgc_InAddr;
                     536                             ; SOURCE LINE # 113
0067 900000   F      537             MOV     DPTR,#tgc_InAddr
006A E0              538             MOVX    A,@DPTR
006B 900000   F      539             MOV     DPTR,#tc_InAddr?243
006E F0              540             MOVX    @DPTR,A
                     541     ;     DEVICE_REG[0x0F] = 0x00;     // CE0
                     542                             ; SOURCE LINE # 114
006F 90B40F          543             MOV     DPTR,#0B40FH
0072 E4              544             CLR     A
0073 F0              545             MOVX    @DPTR,A
                     546     ;     Device_Read_SRAM_Index.WD = 0x6000;
                     547                             ; SOURCE LINE # 115
                     548     ;     u_FBlock.WD = Bank_Block_B[tc_bank_block];
                     549                             ; SOURCE LINE # 116
0074 120000   F      550             LCALL   L?0038
0077 2400     F      551             ADD     A,#LOW (Bank_Block_B)
0079 F582            552             MOV     DPL,A
007B E4              553             CLR     A
007C 3400     F      554             ADDC    A,#HIGH (Bank_Block_B)
007E 120000   F      555             LCALL   L?0039
                     556     ; //    dbprintf("%bx ", gc_bank_number);
                     557     ;     if(FLASH_MultRead_DRAM(0, tc_FPage, u_FBlock.BY[1], u_FBlock.BY[0], SECTORS_PER_BANK-
                             8))
                     558                             ; SOURCE LINE # 118
0081 C200     F      559             CLR     ?FLASH_MultRead_DRAM?BIT
0083 120000   F      560             LCALL   L?0035
0086 502D            561             JNC     ?C0007
                     562     ;       {
                     563                             ; SOURCE LINE # 119
                     564     ; //            dbprintf("BankFail:%bx\n",gc_bank_number);
                     565     ;               gbt_Code_NeedRecover=1;
                     566                             ; SOURCE LINE # 121
0088 D200     F      567             SETB    gbt_Code_NeedRecover
                     568     ;       tgc_InAddr=tc_InAddr;
                     569                             ; SOURCE LINE # 122
008A 900000   F      570             MOV     DPTR,#tc_InAddr?243
008D E0              571             MOVX    A,@DPTR
008E 900000   F      572             MOV     DPTR,#tgc_InAddr
0091 F0              573             MOVX    @DPTR,A
                     574     ;       Device_Read_SRAM_Index.WD = 0x6000;
                     575                             ; SOURCE LINE # 123
A51 MACRO ASSEMBLER  L51_BANKINGLOADER                                                    06/07/2012 14:16:48 PAGE    10

                     576     ;         u_FBlock.WD = Bank_Block_A[tc_bank_block];
                     577                             ; SOURCE LINE # 124
0092 120000   F      578             LCALL   L?0038
0095 2400     F      579             ADD     A,#LOW (Bank_Block_A)
0097 F582            580             MOV     DPL,A
0099 E4              581             CLR     A
009A 3400     F      582             ADDC    A,#HIGH (Bank_Block_A)
009C 120000   F      583             LCALL   L?0039
                     584     ;               if (FLASH_MultRead_DRAM(1, tc_FPage, u_FBlock.BY[1], u_FBlock.BY[0], SECTOR
                             S_PER_BANK-8))
                     585                             ; SOURCE LINE # 125
009F D200     F      586             SETB    ?FLASH_MultRead_DRAM?BIT
00A1 120000   F      587             LCALL   L?0035
00A4 500F            588             JNC     ?C0007
                     589     ;               {
                     590                             ; SOURCE LINE # 126
                     591     ;                       GLOBAL_REG[0x91] &= ~0x01;      // turn off LDO
                     592                             ; SOURCE LINE # 127
00A6 90B091          593             MOV     DPTR,#0B091H
00A9 E0              594             MOVX    A,@DPTR
00AA 54FE            595             ANL     A,#0FEH
00AC F0              596             MOVX    @DPTR,A
                     597     ;                       CPU_REG[0x20] = 1;      // select internal boot ROM.
                     598                             ; SOURCE LINE # 128
00AD 90B120          599             MOV     DPTR,#0B120H
00B0 7401            600             MOV     A,#01H
00B2 F0              601             MOVX    @DPTR,A
                     602     ;                       CPU_REG[0x21] = 1;      // reset MCU
                     603                             ; SOURCE LINE # 129
00B3 A3              604             INC     DPTR
00B4 F0              605             MOVX    @DPTR,A
                     606     ;               }
                     607                             ; SOURCE LINE # 130
                     608     ;       }
                     609                             ; SOURCE LINE # 131
                     610     ; }
                     611                             ; SOURCE LINE # 132
00B5                 612     ?C0007:
00B5 D0D0            613             POP     PSW
00B7 22              614             RET     
00B8                 615     L?0035:
00B8 900000   F      616             MOV     DPTR,#tc_FPage?242
00BB E0              617             MOVX    A,@DPTR
00BC 900000   F      618             MOV     DPTR,#?FLASH_MultRead_DRAM?BYTE
00BF F0              619             MOVX    @DPTR,A
00C0 900000   F      620             MOV     DPTR,#u_FBlock?244+01H
00C3 E0              621             MOVX    A,@DPTR
00C4 900000   F      622             MOV     DPTR,#?FLASH_MultRead_DRAM?BYTE+01H
00C7 F0              623             MOVX    @DPTR,A
00C8 900000   F      624             MOV     DPTR,#u_FBlock?244
00CB E0              625             MOVX    A,@DPTR
00CC 900000   F      626             MOV     DPTR,#?FLASH_MultRead_DRAM?BYTE+02H
00CF F0              627             MOVX    @DPTR,A
00D0 A3              628             INC     DPTR
00D1 7418            629             MOV     A,#018H
00D3 F0              630             MOVX    @DPTR,A
00D4 120000   F      631             LCALL   FLASH_MultRead_DRAM
00D7 22              632             RET     
                     633     ; END OF load_nand_bank
                     634     
                     635     ; 
                     636     ; 
                     637     ; /*********************************************************************************
                     638     ; * NAME:                    bit  FLASH_MultRead_DRAM(void)
                     639     ; * DESCRIPTION:
                     640     ; *   If ECC is Uncorrectable, return TRUE; else return FALSE. 
A51 MACRO ASSEMBLER  L51_BANKINGLOADER                                                    06/07/2012 14:16:48 PAGE    11

                     641     ; *********************************************************************************/
                     642     ; bit FLASH_MultRead_DRAM(bit tbt_Backup, U8 tc_FPage, UBYTE tc_Block1, UBYTE tc_Block0, UB
                             YTE tc_PageNum)
                     643     
----                 644             RSEG  ?PR?FLASH_MultRead_DRAM?L51_BANKINGLOADER
0000                 645     FLASH_MultRead_DRAM:
                     646             USING   0
                     647                             ; SOURCE LINE # 140
                     648     ; {
                     649                             ; SOURCE LINE # 141
                     650     ;       bit     tbt_DoSendCommand=FALSE;
                     651                             ; SOURCE LINE # 142
0000 C200     F      652             CLR     tbt_DoSendCommand?354
                     653     ;       union WORDDataType u_FBlock1;
                     654     ;       UBYTE tc_InAddr = 0, tc_FBank = 0,tc_InAddrMax;
                     655                             ; SOURCE LINE # 144
0002 E4              656             CLR     A
0003 900000   F      657             MOV     DPTR,#tc_InAddr?356
0006 F0              658             MOVX    @DPTR,A
0007 A3              659             INC     DPTR
0008 F0              660             MOVX    @DPTR,A
                     661     ; 
                     662     ;       tc_InAddrMax=gc_InAddrMax;
                     663                             ; SOURCE LINE # 146
0009 900000   F      664             MOV     DPTR,#gc_InAddrMax
000C E0              665             MOVX    A,@DPTR
000D 900000   F      666             MOV     DPTR,#tc_InAddrMax?358
0010 F0              667             MOVX    @DPTR,A
                     668     ;       tc_InAddr = tgc_InAddr;//0602 Jay add
                     669                             ; SOURCE LINE # 147
0011 900000   F      670             MOV     DPTR,#tgc_InAddr
0014 E0              671             MOVX    A,@DPTR
0015 900000   F      672             MOV     DPTR,#tc_InAddr?356
0018 F0              673             MOVX    @DPTR,A
                     674     ;       u_FBlock1.BY[1] = tc_Block1;
                     675                             ; SOURCE LINE # 148
0019 900000   F      676             MOV     DPTR,#tc_Block1?351
001C E0              677             MOVX    A,@DPTR
001D 900000   F      678             MOV     DPTR,#u_FBlock1?355+01H
0020 F0              679             MOVX    @DPTR,A
                     680     ;       u_FBlock1.BY[0] = tc_Block0;
                     681                             ; SOURCE LINE # 149
0021 900000   F      682             MOV     DPTR,#tc_Block0?352
0024 E0              683             MOVX    A,@DPTR
0025 900000   F      684             MOV     DPTR,#u_FBlock1?355
0028 F0              685             MOVX    @DPTR,A
                     686     ;       Reset_DMA();    
                     687                             ; SOURCE LINE # 150
0029 120000   F      688             LCALL   Reset_DMA
                     689     ;       Device_Xfer_DataLength.WD = 0x03FF;   
                     690                             ; SOURCE LINE # 151
002C 900000   F      691             MOV     DPTR,#Device_Xfer_DataLength
002F 7403            692             MOV     A,#03H
0031 F0              693             MOVX    @DPTR,A
0032 A3              694             INC     DPTR
0033 74FF            695             MOV     A,#0FFH
0035 F0              696             MOVX    @DPTR,A
                     697     ;       SET_DEVICE_READ_TO_DRAM();
                     698                             ; SOURCE LINE # 152
0036 120000   F      699             LCALL   SET_DEVICE_READ_TO_DRAM
                     700     ;       DEVICE_REG[0xA0] = 0x01;                                                           
                                          // Reset ECC  
                     701                             ; SOURCE LINE # 153
0039 90B4A0          702             MOV     DPTR,#0B4A0H
003C 7401            703             MOV     A,#01H
003E F0              704             MOVX    @DPTR,A
A51 MACRO ASSEMBLER  L51_BANKINGLOADER                                                    06/07/2012 14:16:48 PAGE    12

                     705     ;       FLASH_REG[0xA3]  = 0x01;                                                           
                                          // Enable ECC 
                     706                             ; SOURCE LINE # 154
003F 90B8A3          707             MOV     DPTR,#0B8A3H
0042 F0              708             MOVX    @DPTR,A
                     709     ;       FLASH_REG[0xA0]  = 0x00;                                                           
                                          // Disable Encode RS-Code
                     710                             ; SOURCE LINE # 155
0043 90B8A0          711             MOV     DPTR,#0B8A0H
0046 E4              712             CLR     A
0047 F0              713             MOVX    @DPTR,A
                     714     ;       FLASH_REG[0xA1]  = 0x01;                                                           
                                          // Start Decode RS-Code
                     715                             ; SOURCE LINE # 156
0048 A3              716             INC     DPTR
0049 04              717             INC     A
004A F0              718             MOVX    @DPTR,A
                     719     ;       FLASH_REG[0xA2] &= 0xF3;                                                           
                                          // Clear ECC fail register
                     720                             ; SOURCE LINE # 157
004B A3              721             INC     DPTR
004C E0              722             MOVX    A,@DPTR
004D 54F3            723             ANL     A,#0F3H
004F F0              724             MOVX    @DPTR,A
                     725     ;       FLASH_REG[0x06]  = 0x00;                                                           
                                          // cmd1
                     726                             ; SOURCE LINE # 158
                     727     ;       FLASH_REG[0x07]  = 0x30;                                                           
                                          // cmd2 
                     728                             ; SOURCE LINE # 159
                     729     ;       Banking_NAND_InAddr_To_Column_NAND(tc_InAddr);                          // set Colu
                             mn
                     730                             ; SOURCE LINE # 160
                     731     ;       Banking_NAND_FBlock_FPage_FBank_To_PhyAddr_NAND(tc_FPage, tc_FBank, u_FBlock1.BY[1]
                             , u_FBlock1.BY[0]); // set FBank Fblock Fpage        
                     732                             ; SOURCE LINE # 161
0050 120000   F      733             LCALL   L?0034
0053 120000   F      734             LCALL   _Banking_NAND_FBlock_FPage_FBank_To_PhyAddr_NAND
                     735     ;       CHK_Flash_Ready();
                     736                             ; SOURCE LINE # 162
0056 120000   F      737             LCALL   CHK_Flash_Ready
                     738     ;       FLASH_REG[0x04] = 0x01;                                                            
                                          // CMD0+ADDR+CMD1
                     739                             ; SOURCE LINE # 163
                     740     ;       TRIGGER_FLASH_CMD();
                     741                             ; SOURCE LINE # 164
                     742     ;       CHK_Flash_Ready();
                     743                             ; SOURCE LINE # 165
0059 120000   F      744             LCALL   L?0040
                     745     ;       FLASH_REG[0x1A] = 0x10;
                     746                             ; SOURCE LINE # 166
005C 90B81A          747             MOV     DPTR,#0B81AH
005F 7410            748             MOV     A,#010H
0061 F0              749             MOVX    @DPTR,A
0062                 750     ?C0008:
                     751     ;       while(tc_PageNum){
                     752                             ; SOURCE LINE # 167
0062 900000   F      753             MOV     DPTR,#tc_PageNum?353
0065 E0              754             MOVX    A,@DPTR
0066 7003            755             JNZ     $ + 5H
0068 020000   F      756             LJMP    ?C0009
                     757     ;         if(tbt_DoSendCommand ){
                     758                             ; SOURCE LINE # 168
006B 30000B   F      759             JNB     tbt_DoSendCommand?354,?C0010
                     760     ;             FLASH_REG[0x06]  = 0x00;                                                  // 
                             cmd1
A51 MACRO ASSEMBLER  L51_BANKINGLOADER                                                    06/07/2012 14:16:48 PAGE    13

                     761                             ; SOURCE LINE # 169
                     762     ;               FLASH_REG[0x07]  = 0x30;                                                   
                                  // cmd2 
                     763                             ; SOURCE LINE # 170
                     764     ;               Banking_NAND_InAddr_To_Column_NAND(tc_InAddr);          // set Column
                     765                             ; SOURCE LINE # 171
                     766     ;               Banking_NAND_FBlock_FPage_FBank_To_PhyAddr_NAND(tc_FPage, tc_FBank, u_FBloc
                             k1.BY[1], u_FBlock1.BY[0]); // set FBank Fblock Fpage
                     767                             ; SOURCE LINE # 172
006E 120000   F      768             LCALL   L?0034
0071 120000   F      769             LCALL   _Banking_NAND_FBlock_FPage_FBank_To_PhyAddr_NAND
                     770     ;               FLASH_REG[0x04] = 0x01;                                                    
                                  // CMD0+ADDR+CMD1
                     771                             ; SOURCE LINE # 173
                     772     ;               TRIGGER_FLASH_CMD(); 
                     773                             ; SOURCE LINE # 174
                     774     ;               CHK_Flash_Ready();
                     775                             ; SOURCE LINE # 175
0074 120000   F      776             LCALL   L?0040
                     777     ;               tbt_DoSendCommand= 0;
                     778                             ; SOURCE LINE # 176
0077 C200     F      779             CLR     tbt_DoSendCommand?354
                     780     ;         }                 
                     781                             ; SOURCE LINE # 177
0079                 782     ?C0010:
                     783     ;         FLASH_REG[0xA1]  = 0x01;                                                         
                                  // Start Decode RS-Code
                     784                             ; SOURCE LINE # 178
0079 90B8A1          785             MOV     DPTR,#0B8A1H
007C 7401            786             MOV     A,#01H
007E F0              787             MOVX    @DPTR,A
                     788     ;           FLASH_REG[0xA2] &= 0xF3;
                     789                             ; SOURCE LINE # 179
007F A3              790             INC     DPTR
0080 E0              791             MOVX    A,@DPTR
0081 54F3            792             ANL     A,#0F3H
0083 F0              793             MOVX    @DPTR,A
                     794     ;         FLASH_REG[0x1A]       = 0x10; 
                     795                             ; SOURCE LINE # 180
0084 90B81A          796             MOV     DPTR,#0B81AH
0087 7410            797             MOV     A,#010H
0089 F0              798             MOVX    @DPTR,A
                     799     ;         if((tc_InAddr==(tc_InAddrMax-2))||(tc_PageNum==0x02)){
                     800                             ; SOURCE LINE # 181
008A 900000   F      801             MOV     DPTR,#tc_InAddrMax?358
008D E0              802             MOVX    A,@DPTR
008E 24FE            803             ADD     A,#0FEH
0090 FF              804             MOV     R7,A
0091 900000   F      805             MOV     DPTR,#tc_InAddr?356
0094 E0              806             MOVX    A,@DPTR
0095 6F              807             XRL     A,R7
0096 6007            808             JZ      ?C0012
0098 900000   F      809             MOV     DPTR,#tc_PageNum?353
009B E0              810             MOVX    A,@DPTR
009C B40206          811             CJNE    A,#02H,?C0011
009F                 812     ?C0012:
                     813     ;               FLASH_REG[0x1A] = 0x11;                                                    
                                  // last frag = 1
                     814                             ; SOURCE LINE # 182
009F 90B81A          815             MOV     DPTR,#0B81AH
00A2 7411            816             MOV     A,#011H
00A4 F0              817             MOVX    @DPTR,A
                     818     ;           }        
                     819                             ; SOURCE LINE # 183
00A5                 820     ?C0011:
                     821     ;         Trigger_Data_Transfer();        
A51 MACRO ASSEMBLER  L51_BANKINGLOADER                                                    06/07/2012 14:16:48 PAGE    14

                     822                             ; SOURCE LINE # 184
00A5 120000   F      823             LCALL   Trigger_Data_Transfer
                     824     ;               Device_Read_SRAM_Index.BY[0] += 0x04 ;                                  // 
                             080411 Joyce add for auotcount function fail
                     825                             ; SOURCE LINE # 185
00A8 900000   F      826             MOV     DPTR,#Device_Read_SRAM_Index
00AB E0              827             MOVX    A,@DPTR
00AC 2404            828             ADD     A,#04H
00AE F0              829             MOVX    @DPTR,A
                     830     ;               Device_Read_SRAM_Index.BY[1]  = 0x00 ;                                  // 
                             080411 Joyce add for auotcount function fail          
                     831                             ; SOURCE LINE # 186
00AF E4              832             CLR     A
00B0 A3              833             INC     DPTR
00B1 F0              834             MOVX    @DPTR,A
                     835     ;        
                     836     ;         tc_InAddr+=2;
                     837                             ; SOURCE LINE # 188
00B2 900000   F      838             MOV     DPTR,#tc_InAddr?356
00B5 E0              839             MOVX    A,@DPTR
00B6 2402            840             ADD     A,#02H
00B8 F0              841             MOVX    @DPTR,A
                     842     ;         if(tc_InAddr==tc_InAddrMax){
                     843                             ; SOURCE LINE # 189
00B9 900000   F      844             MOV     DPTR,#tc_InAddrMax?358
00BC E0              845             MOVX    A,@DPTR
00BD FF              846             MOV     R7,A
00BE 900000   F      847             MOV     DPTR,#tc_InAddr?356
00C1 E0              848             MOVX    A,@DPTR
00C2 6F              849             XRL     A,R7
00C3 7050            850             JNZ     ?C0013
                     851     ;             tbt_DoSendCommand = TRUE;
                     852                             ; SOURCE LINE # 190
00C5 D200     F      853             SETB    tbt_DoSendCommand?354
                     854     ;             tc_InAddr = 0x00;
                     855                             ; SOURCE LINE # 191
00C7 F0              856             MOVX    @DPTR,A
                     857     ;             tc_FPage++;
                     858                             ; SOURCE LINE # 192
00C8 900000   F      859             MOV     DPTR,#tc_FPage?350
00CB E0              860             MOVX    A,@DPTR
00CC 04              861             INC     A
00CD F0              862             MOVX    @DPTR,A
                     863     ;             if(tc_FPage==gw_PagesPerBlock){
                     864                             ; SOURCE LINE # 193
00CE E0              865             MOVX    A,@DPTR
00CF FF              866             MOV     R7,A
00D0 900000   F      867             MOV     DPTR,#gw_PagesPerBlock
00D3 E0              868             MOVX    A,@DPTR
00D4 7003            869             JNZ     ?C0031
00D6 A3              870             INC     DPTR
00D7 E0              871             MOVX    A,@DPTR
00D8 6F              872             XRL     A,R7
00D9                 873     ?C0031:
00D9 703A            874             JNZ     ?C0013
                     875     ;                 tc_FPage = 0x00;
                     876                             ; SOURCE LINE # 194
00DB 900000   F      877             MOV     DPTR,#tc_FPage?350
00DE F0              878             MOVX    @DPTR,A
                     879     ;                 tc_FBank++;
                     880                             ; SOURCE LINE # 195
00DF 900000   F      881             MOV     DPTR,#tc_FBank?357
00E2 E0              882             MOVX    A,@DPTR
00E3 04              883             INC     A
00E4 F0              884             MOVX    @DPTR,A
                     885     ;                 gc_Flash_Data++;
A51 MACRO ASSEMBLER  L51_BANKINGLOADER                                                    06/07/2012 14:16:48 PAGE    15

                     886                             ; SOURCE LINE # 196
00E5 900000   F      887             MOV     DPTR,#gc_Flash_Data
00E8 E0              888             MOVX    A,@DPTR
00E9 04              889             INC     A
00EA F0              890             MOVX    @DPTR,A
                     891     ;                 //if(tc_FBank==gc_BanksPerDevice){
                     892     ;                 //    tc_FBank =0x00;
                     893     ;                 //}
                     894     ;                 if(tbt_Backup){
                     895                             ; SOURCE LINE # 200
00EB 30000C   F      896             JNB     tbt_Backup?349,?C0015
                     897     ;                     u_FBlock1.WD = Bank_Block_A[gc_Flash_Data];
                     898                             ; SOURCE LINE # 201
00EE E0              899             MOVX    A,@DPTR
00EF 25E0            900             ADD     A,ACC
00F1 2400     F      901             ADD     A,#LOW (Bank_Block_A)
00F3 F582            902             MOV     DPL,A
00F5 E4              903             CLR     A
00F6 3400     F      904             ADDC    A,#HIGH (Bank_Block_A)
                     905     ;                 }
                     906                             ; SOURCE LINE # 202
00F8 800D            907             SJMP    ?C0032
00FA                 908     ?C0015:
                     909     ;                 else{
                     910                             ; SOURCE LINE # 203
                     911     ;                     u_FBlock1.WD = Bank_Block_B[gc_Flash_Data]; 
                     912                             ; SOURCE LINE # 204
00FA 900000   F      913             MOV     DPTR,#gc_Flash_Data
00FD E0              914             MOVX    A,@DPTR
00FE 25E0            915             ADD     A,ACC
0100 2400     F      916             ADD     A,#LOW (Bank_Block_B)
0102 F582            917             MOV     DPL,A
0104 E4              918             CLR     A
0105 3400     F      919             ADDC    A,#HIGH (Bank_Block_B)
0107                 920     ?C0032:
0107 F583            921             MOV     DPH,A
0109 E0              922             MOVX    A,@DPTR
010A FF              923             MOV     R7,A
010B A3              924             INC     DPTR
010C E0              925             MOVX    A,@DPTR
010D 900000   F      926             MOV     DPTR,#u_FBlock1?355
0110 CF              927             XCH     A,R7
0111 F0              928             MOVX    @DPTR,A
0112 A3              929             INC     DPTR
0113 EF              930             MOV     A,R7
0114 F0              931             MOVX    @DPTR,A
                     932     ;                 }
                     933                             ; SOURCE LINE # 205
                     934     ;             }
                     935                             ; SOURCE LINE # 206
                     936     ;         }
                     937                             ; SOURCE LINE # 207
0115                 938     ?C0013:
                     939     ;         CHK_Data_Transfer_Done();
                     940                             ; SOURCE LINE # 208
0115 120000   F      941             LCALL   CHK_Data_Transfer_Done
                     942     ;         if(CHK_ECC_Done()){
                     943                             ; SOURCE LINE # 209
0118 120000   F      944             LCALL   CHK_ECC_Done
011B 500B            945             JNC     ?C0017
                     946     ; //                    dbprintf("\nECC-PN:%bx %bx ",tc_PageNum,tc_FPage);
                     947     ;             if(!tbt_Backup){
                     948                             ; SOURCE LINE # 211
011D 200008   F      949             JB      tbt_Backup?349,?C0017
                     950     ;                DEVICE_REG[0x00] |=0x10;                                                  
                                  // reset nand module because un-complete flash read process
A51 MACRO ASSEMBLER  L51_BANKINGLOADER                                                    06/07/2012 14:16:48 PAGE    16

                     951                             ; SOURCE LINE # 212
0120 90B400          952             MOV     DPTR,#0B400H
0123 E0              953             MOVX    A,@DPTR
0124 4410            954             ORL     A,#010H
0126 F0              955             MOVX    @DPTR,A
                     956     ;                return 1;
                     957                             ; SOURCE LINE # 213
0127 22              958             RET     
                     959     ;             }
                     960                             ; SOURCE LINE # 214
                     961     ;           }
                     962                             ; SOURCE LINE # 215
0128                 963     ?C0017:
                     964     ;         CPU_REG[0x19] = Device_Read_SRAM_Index.BY[0];                 // 080411 Joyce add
                              for auotcount function fail
                     965                             ; SOURCE LINE # 216
0128 900000   F      966             MOV     DPTR,#Device_Read_SRAM_Index
012B E0              967             MOVX    A,@DPTR
012C 90B119          968             MOV     DPTR,#0B119H
012F F0              969             MOVX    @DPTR,A
                     970     ;               CPU_REG[0x18] = Device_Read_SRAM_Index.BY[1];                   // 080411 J
                             oyce add for auotcount function fail 
                     971                             ; SOURCE LINE # 217
0130 900000   F      972             MOV     DPTR,#Device_Read_SRAM_Index+01H
0133 E0              973             MOVX    A,@DPTR
0134 90B118          974             MOV     DPTR,#0B118H
0137 F0              975             MOVX    @DPTR,A
                     976     ;         tc_PageNum -=2; 
                     977                             ; SOURCE LINE # 218
0138 900000   F      978             MOV     DPTR,#tc_PageNum?353
013B E0              979             MOVX    A,@DPTR
013C 24FE            980             ADD     A,#0FEH
013E F0              981             MOVX    @DPTR,A
                     982     ;     }
                     983                             ; SOURCE LINE # 219
013F 020000   F      984             LJMP    ?C0008
0142                 985     ?C0009:
                     986     ;     CHK_NandAutocmp_Done();
                     987                             ; SOURCE LINE # 220
0142 120000   F      988             LCALL   CHK_NandAutocmp_Done
                     989     ;       FLASH_REG[0xA1] = 0x00;
                     990                             ; SOURCE LINE # 221
0145 90B8A1          991             MOV     DPTR,#0B8A1H
0148 E4              992             CLR     A
0149 F0              993             MOVX    @DPTR,A
                     994     ;       return 0;           
                     995                             ; SOURCE LINE # 222
014A C3              996             CLR     C
                     997     ; } 
                     998                             ; SOURCE LINE # 223
014B                 999     ?C0019:
014B 22             1000             RET     
014C                1001     L?0034:
014C 90B806         1002             MOV     DPTR,#0B806H
014F E4             1003             CLR     A
0150 F0             1004             MOVX    @DPTR,A
0151 A3             1005             INC     DPTR
0152 7430           1006             MOV     A,#030H
0154 F0             1007             MOVX    @DPTR,A
0155 900000   F     1008             MOV     DPTR,#tc_InAddr?356
0158 E0             1009             MOVX    A,@DPTR
0159 FF             1010             MOV     R7,A
015A 120000   F     1011             LCALL   _Banking_NAND_InAddr_To_Column_NAND
015D 900000   F     1012             MOV     DPTR,#tc_FPage?350
0160 E0             1013             MOVX    A,@DPTR
0161 FF             1014             MOV     R7,A
A51 MACRO ASSEMBLER  L51_BANKINGLOADER                                                    06/07/2012 14:16:48 PAGE    17

0162 900000   F     1015             MOV     DPTR,#tc_FBank?357
0165 E0             1016             MOVX    A,@DPTR
0166 FD             1017             MOV     R5,A
0167 900000   F     1018             MOV     DPTR,#u_FBlock1?355+01H
016A E0             1019             MOVX    A,@DPTR
016B FB             1020             MOV     R3,A
016C 900000   F     1021             MOV     DPTR,#u_FBlock1?355
016F E0             1022             MOVX    A,@DPTR
0170 900000   F     1023             MOV     DPTR,#?_Banking_NAND_FBlock_FPage_FBank_To_PhyAddr_NAND?BYTE+03H
0173 F0             1024             MOVX    @DPTR,A
0174 22             1025             RET     
0175                1026     L?0040:
0175 90B804         1027             MOV     DPTR,#0B804H
0178 7401           1028             MOV     A,#01H
017A F0             1029             MOVX    @DPTR,A
017B 120000   F     1030             LCALL   TRIGGER_FLASH_CMD
017E 120000   F     1031             LCALL   CHK_Flash_Ready
0181 22             1032             RET     
                    1033     ; END OF FLASH_MultRead_DRAM
                    1034     
                    1035     ; 
                    1036     ; /*********************************************************************************
                    1037     ; * NAME:                    Banking_NAND_InAddr_To_Column_NAND(UBYTE tc_InAddr)
                    1038     ; * DESCRIPTION:
                    1039     ; *********************************************************************************/
                    1040     ; void Banking_NAND_InAddr_To_Column_NAND(UBYTE tc_InAddr) {
                    1041     
----                1042             RSEG  ?PR?_Banking_NAND_InAddr_To_Column_NAND?L51_BANKINGLOADER
0000                1043     _Banking_NAND_InAddr_To_Column_NAND:
                    1044             USING   0
                    1045                             ; SOURCE LINE # 229
                    1046     ;---- Variable 'tc_InAddr?459' assigned to Register 'R7' ----
                    1047     ;       
                    1048     ;       unionWORD tw_FColAddr;
                    1049     ;     if((FLASH_REG[0xA5]&0x03)==0x02){ //24bit
                    1050                             ; SOURCE LINE # 232
0000 90B8A5         1051             MOV     DPTR,#0B8A5H
0003 E0             1052             MOVX    A,@DPTR
0004 5403           1053             ANL     A,#03H
0006 FE             1054             MOV     R6,A
0007 EF             1055             MOV     A,R7
0008 BE020B         1056             CJNE    R6,#02H,?C0020
                    1057     ;         tw_FColAddr.WD =  (U16)(tc_InAddr>>1)*1070;//(1024+46)        
                    1058                             ; SOURCE LINE # 233
000B C3             1059             CLR     C
000C 13             1060             RRC     A
000D FF             1061             MOV     R7,A
000E 7E00           1062             MOV     R6,#00H
0010 7C04           1063             MOV     R4,#04H
0012 7D2E           1064             MOV     R5,#02EH
                    1065     ;     }
                    1066                             ; SOURCE LINE # 234
0014 8009           1067             SJMP    ?C0033
0016                1068     ?C0020:
                    1069     ;     else{                             //16bit
                    1070                             ; SOURCE LINE # 235
                    1071     ;        tw_FColAddr.WD =  (U16)(tc_InAddr>>1)*1056;//(1024+32)
                    1072                             ; SOURCE LINE # 236
0016 C3             1073             CLR     C
0017 13             1074             RRC     A
0018 FF             1075             MOV     R7,A
0019 7E00           1076             MOV     R6,#00H
001B 7C04           1077             MOV     R4,#04H
001D 7D20           1078             MOV     R5,#020H
001F                1079     ?C0033:
001F 120000   F     1080             LCALL   ?C?IMUL
A51 MACRO ASSEMBLER  L51_BANKINGLOADER                                                    06/07/2012 14:16:48 PAGE    18

0022 900000   F     1081             MOV     DPTR,#tw_FColAddr?460
0025 EE             1082             MOV     A,R6
0026 F0             1083             MOVX    @DPTR,A
0027 A3             1084             INC     DPTR
0028 EF             1085             MOV     A,R7
0029 F0             1086             MOVX    @DPTR,A
                    1087     ;     }   
                    1088                             ; SOURCE LINE # 237
002A                1089     ?C0021:
                    1090     ;       FLASH_REG[0x0C] = tw_FColAddr.BY[1];
                    1091                             ; SOURCE LINE # 238
002A 900000   F     1092             MOV     DPTR,#tw_FColAddr?460+01H
002D E0             1093             MOVX    A,@DPTR
002E 90B80C         1094             MOV     DPTR,#0B80CH
0031 F0             1095             MOVX    @DPTR,A
                    1096     ;       FLASH_REG[0x0B] = tw_FColAddr.BY[0]; 
                    1097                             ; SOURCE LINE # 239
0032 900000   F     1098             MOV     DPTR,#tw_FColAddr?460
0035 E0             1099             MOVX    A,@DPTR
0036 90B80B         1100             MOV     DPTR,#0B80BH
0039 F0             1101             MOVX    @DPTR,A
                    1102     ;       
                    1103     ;       
                    1104     ;       
                    1105     ;       
                    1106     ;       
                    1107     ; }
                    1108                             ; SOURCE LINE # 245
003A 22             1109             RET     
                    1110     ; END OF _Banking_NAND_InAddr_To_Column_NAND
                    1111     
                    1112     ; 
                    1113     ; /****************************************************************************************
                             *************************************
                    1114     ; * NAME: Banking_NAND_FBlock_FPage_FBank_To_PhyAddr_NAND(UBYTE tc_FPage, UBYTE tc_FBank, U
                             BYTE tc_Block1, UBYTE tc_Block0)
                    1115     ; * DESCRIPTION:
                    1116     ; *****************************************************************************************
                             **************************************/
                    1117     ; void Banking_NAND_FBlock_FPage_FBank_To_PhyAddr_NAND(UBYTE tc_FPage, UBYTE tc_FBank, UBYT
                             E tc_Block1, UBYTE tc_Block0) {
                    1118     
----                1119             RSEG  ?PR?_Banking_NAND_FBlock_FPage_FBank_To_PhyAddr_NAND?L51_BANKINGLOADER
0000                1120     _Banking_NAND_FBlock_FPage_FBank_To_PhyAddr_NAND:
                    1121             USING   0
                    1122                             ; SOURCE LINE # 251
                    1123     ;---- Variable 'tc_FPage?561' assigned to Register 'R7' ----
                    1124     ;---- Variable 'tc_Block1?563' assigned to Register 'R3' ----
                    1125     ;---- Variable 'tc_FBank?562' assigned to Register 'R5' ----
                    1126     ;       U8 tc_FMAP;
                    1127     ;       tc_FBank=0;
                    1128                             ; SOURCE LINE # 253
0000 E4             1129             CLR     A
                    1130     ;       DEVICE_REG[0x0F] =0x00;   
                    1131                             ; SOURCE LINE # 254
0001 90B40F         1132             MOV     DPTR,#0B40FH
0004 F0             1133             MOVX    @DPTR,A
                    1134     ;       if(NAND_INFO.cFMAP&0xF0){// By MCU 
                    1135                             ; SOURCE LINE # 255
0005 900000   F     1136             MOV     DPTR,#NAND_INFO+07H
0008 E0             1137             MOVX    A,@DPTR
0009 54F0           1138             ANL     A,#0F0H
000B 600B           1139             JZ      ?C0023
                    1140     ;       tc_FMAP = (NAND_INFO.cFMAP&0xF0)>>4;
                    1141                             ; SOURCE LINE # 256
000D C4             1142             SWAP    A
A51 MACRO ASSEMBLER  L51_BANKINGLOADER                                                    06/07/2012 14:16:48 PAGE    19

000E 540F           1143             ANL     A,#0FH
                    1144     ;---- Variable 'tc_FMAP?565' assigned to Register 'R6' ----
                    1145     ;       switch(tc_FMAP){
                    1146                             ; SOURCE LINE # 257
0010 14             1147             DEC     A
0011 700D           1148             JNZ     ?C0027
                    1149     ;               case 1:         // 256 page  block 
                    1150                             ; SOURCE LINE # 258
0013                1151     ?C0025:
                    1152     ;                       FLASH_REG[0x0A]= tc_FPage;  
                    1153                             ; SOURCE LINE # 259
                    1154     ;                       FLASH_REG[0x09]= tc_Block1;
                    1155                             ; SOURCE LINE # 260
                    1156     ;                       FLASH_REG[0x08]= tc_Block0;                     
                    1157                             ; SOURCE LINE # 261
0013 120000   F     1158             LCALL   L?0037
                    1159     ;                               break;
                    1160                             ; SOURCE LINE # 262
0016 8008           1161             SJMP    ?C0027
                    1162     ;                       default: 
                    1163                             ; SOURCE LINE # 263
                    1164     ;                               break;
                    1165                             ; SOURCE LINE # 264
                    1166     ;               }                     
                    1167                             ; SOURCE LINE # 265
                    1168     ;     }
                    1169                             ; SOURCE LINE # 266
0018                1170     ?C0023:
                    1171     ;     else{                             // by HW        
                    1172                             ; SOURCE LINE # 267
                    1173     ;       FLASH_REG[0x0A] = tc_FPage;                                             // FPage
                    1174                             ; SOURCE LINE # 268
                    1175     ;           FLASH_REG[0x09] = tc_Block1;                                      // FBlock_L 
                    1176                             ; SOURCE LINE # 269
                    1177     ;           FLASH_REG[0x08] = tc_Block0;                                      // FBlock_H
                    1178                             ; SOURCE LINE # 270
0018 120000   F     1179             LCALL   L?0037
                    1180     ;               FLASH_REG[0x1C] = 0;                                             // FBank  
                    1181                             ; SOURCE LINE # 271
001B 90B81C         1182             MOV     DPTR,#0B81CH
001E E4             1183             CLR     A
001F F0             1184             MOVX    @DPTR,A
                    1185     ;       }
                    1186                             ; SOURCE LINE # 272
0020                1187     ?C0027:
                    1188     ;       if(NAND_INFO.cADDR_CYCLE==0x04){        // 4 cycle addr
                    1189                             ; SOURCE LINE # 273
0020 900000   F     1190             MOV     DPTR,#NAND_INFO+08H
0023 E0             1191             MOVX    A,@DPTR
0024 90B801         1192             MOV     DPTR,#0B801H
0027 B40404         1193             CJNE    A,#04H,?C0028
                    1194     ;               FLASH_REG[0x01] = 0x30|0x01;
                    1195                             ; SOURCE LINE # 274
002A 7431           1196             MOV     A,#031H
002C F0             1197             MOVX    @DPTR,A
                    1198     ;       }
                    1199                             ; SOURCE LINE # 275
002D 22             1200             RET     
002E                1201     ?C0028:
                    1202     ;       else{
                    1203                             ; SOURCE LINE # 276
                    1204     ;               FLASH_REG[0x01] = (0x40|0x01);  // 5 cycle addr
                    1205                             ; SOURCE LINE # 277
002E 7441           1206             MOV     A,#041H
0030 F0             1207             MOVX    @DPTR,A
                    1208     ;       }         
A51 MACRO ASSEMBLER  L51_BANKINGLOADER                                                    06/07/2012 14:16:48 PAGE    20

                    1209                             ; SOURCE LINE # 278
                    1210     ;       
                    1211     ; 
                    1212     ; }
                    1213                             ; SOURCE LINE # 281
0031                1214     ?C0030:
0031 22             1215             RET     
                    1216     ; END OF _Banking_NAND_FBlock_FPage_FBank_To_PhyAddr_NAND
                    1217     
                    1218             END
A51 MACRO ASSEMBLER  L51_BANKINGLOADER                                                    06/07/2012 14:16:48 PAGE    21

SYMBOL TABLE LISTING
------ ----- -------


N A M E                                    T Y P E  V A L U E   ATTRIBUTES

?BI?FLASH_MULTREAD_DRAM?L51_BANKINGLOADER  B SEG    0002H       REL=UNIT
?C0003. . . . . . . . . . . . . . . . .    C ADDR   0045H   R   SEG=?PR?LOAD_NAND_BANK?L51_BANKINGLOADER
?C0004. . . . . . . . . . . . . . . . .    C ADDR   0067H   R   SEG=?PR?LOAD_NAND_BANK?L51_BANKINGLOADER
?C0007. . . . . . . . . . . . . . . . .    C ADDR   00B5H   R   SEG=?PR?LOAD_NAND_BANK?L51_BANKINGLOADER
?C0008. . . . . . . . . . . . . . . . .    C ADDR   0062H   R   SEG=?PR?FLASH_MULTREAD_DRAM?L51_BANKINGLOADER
?C0009. . . . . . . . . . . . . . . . .    C ADDR   0142H   R   SEG=?PR?FLASH_MULTREAD_DRAM?L51_BANKINGLOADER
?C0010. . . . . . . . . . . . . . . . .    C ADDR   0079H   R   SEG=?PR?FLASH_MULTREAD_DRAM?L51_BANKINGLOADER
?C0011. . . . . . . . . . . . . . . . .    C ADDR   00A5H   R   SEG=?PR?FLASH_MULTREAD_DRAM?L51_BANKINGLOADER
?C0012. . . . . . . . . . . . . . . . .    C ADDR   009FH   R   SEG=?PR?FLASH_MULTREAD_DRAM?L51_BANKINGLOADER
?C0013. . . . . . . . . . . . . . . . .    C ADDR   0115H   R   SEG=?PR?FLASH_MULTREAD_DRAM?L51_BANKINGLOADER
?C0015. . . . . . . . . . . . . . . . .    C ADDR   00FAH   R   SEG=?PR?FLASH_MULTREAD_DRAM?L51_BANKINGLOADER
?C0017. . . . . . . . . . . . . . . . .    C ADDR   0128H   R   SEG=?PR?FLASH_MULTREAD_DRAM?L51_BANKINGLOADER
?C0019. . . . . . . . . . . . . . . . .    C ADDR   014BH   R   SEG=?PR?FLASH_MULTREAD_DRAM?L51_BANKINGLOADER
?C0020. . . . . . . . . . . . . . . . .    C ADDR   0016H   R   SEG=?PR?_BANKING_NAND_INADDR_TO_COLUMN_NAND?L51_BANKINGL
                                         OADER
?C0021. . . . . . . . . . . . . . . . .    C ADDR   002AH   R   SEG=?PR?_BANKING_NAND_INADDR_TO_COLUMN_NAND?L51_BANKINGL
                                         OADER
?C0023. . . . . . . . . . . . . . . . .    C ADDR   0018H   R   SEG=?PR?_BANKING_NAND_FBLOCK_FPAGE_FBANK_TO_PHYADDR_NAND
                                         ?L51_BANKINGLOADER
?C0025. . . . . . . . . . . . . . . . .    C ADDR   0013H   R   SEG=?PR?_BANKING_NAND_FBLOCK_FPAGE_FBANK_TO_PHYADDR_NAND
                                         ?L51_BANKINGLOADER
?C0027. . . . . . . . . . . . . . . . .    C ADDR   0020H   R   SEG=?PR?_BANKING_NAND_FBLOCK_FPAGE_FBANK_TO_PHYADDR_NAND
                                         ?L51_BANKINGLOADER
?C0028. . . . . . . . . . . . . . . . .    C ADDR   002EH   R   SEG=?PR?_BANKING_NAND_FBLOCK_FPAGE_FBANK_TO_PHYADDR_NAND
                                         ?L51_BANKINGLOADER
?C0030. . . . . . . . . . . . . . . . .    C ADDR   0031H   R   SEG=?PR?_BANKING_NAND_FBLOCK_FPAGE_FBANK_TO_PHYADDR_NAND
                                         ?L51_BANKINGLOADER
?C0031. . . . . . . . . . . . . . . . .    C ADDR   00D9H   R   SEG=?PR?FLASH_MULTREAD_DRAM?L51_BANKINGLOADER
?C0032. . . . . . . . . . . . . . . . .    C ADDR   0107H   R   SEG=?PR?FLASH_MULTREAD_DRAM?L51_BANKINGLOADER
?C0033. . . . . . . . . . . . . . . . .    C ADDR   001FH   R   SEG=?PR?_BANKING_NAND_INADDR_TO_COLUMN_NAND?L51_BANKINGL
                                         OADER
?C?IMUL . . . . . . . . . . . . . . . .    C ADDR   -----       EXT
?C?UIDIV. . . . . . . . . . . . . . . .    C ADDR   -----       EXT
?C_INITSEG. . . . . . . . . . . . . . .    C SEG    0003H       REL=UNIT
?DT?L51_BANKINGLOADER . . . . . . . . .    D SEG    0001H       REL=UNIT
?FLASH_MULTREAD_DRAM?BIT. . . . . . . .    B ADDR   0000H.0 R   SEG=?BI?FLASH_MULTREAD_DRAM?L51_BANKINGLOADER
?FLASH_MULTREAD_DRAM?BYTE . . . . . . .    X ADDR   0000H   R   SEG=?XD?FLASH_MULTREAD_DRAM?L51_BANKINGLOADER
?LOAD_NAND_BANK?BYTE. . . . . . . . . .    X ADDR   0000H   R   SEG=?XD?LOAD_NAND_BANK?L51_BANKINGLOADER
?PR?FLASH_MULTREAD_DRAM?L51_BANKINGLOADER  C SEG    0182H       REL=UNIT
?PR?L51_BANKINGLOADER . . . . . . . . .    C SEG    0032H       REL=UNIT
?PR?LOAD_NAND_BANK?L51_BANKINGLOADER. .    C SEG    00D8H       REL=UNIT
?PR?PERFORM_NAND_BANK_CALL?L51_BANKINGLOADEC SEG    002AH       REL=UNIT
?PR?RETURN_FROM_NAND_BANK?L51_BANKINGLOADERC SEG    001CH       REL=UNIT
?PR?_BANKING_NAND_FBLOCK_FPAGE_FBANK_TO_PHYC SEG AND0032HBANKINGREL=UNIT
?PR?_BANKING_NAND_INADDR_TO_COLUMN_NAND?L51C SEG NGL003BH       REL=UNIT
?XD?FLASH_MULTREAD_DRAM?L51_BANKINGLOADER  X SEG    0009H       REL=UNIT
?XD?L51_BANKINGLOADER . . . . . . . . .    X SEG    0001H       REL=UNIT
?XD?LOAD_NAND_BANK?L51_BANKINGLOADER. .    X SEG    0005H       REL=UNIT
?XD?_BANKING_NAND_FBLOCK_FPAGE_FBANK_TO_PHYX SEG AND0004HBANKINGREL=UNIT
?XD?_BANKING_NAND_INADDR_TO_COLUMN_NAND?L51X SEG NGL0002H       REL=UNIT
?_BANKING_NAND_FBLOCK_FPAGE_FBANK_TO_PHYADDX ADDR?BY0000H   R   SEG=?XD?_BANKING_NAND_FBLOCK_FPAGE_FBANK_TO_PHYADDR_NAND
                                         ?L51_BANKINGLOADER
?_BANKING_NAND_INADDR_TO_COLUMN_NAND?BYTE  X ADDR   0000H   R   SEG=?XD?_BANKING_NAND_INADDR_TO_COLUMN_NAND?L51_BANKINGL
                                         OADER
?_NEED_TO_LOAD_NAND_BANK. . . . . . . .    C ADDR   0008H   R   SEG=?PR?PERFORM_NAND_BANK_CALL?L51_BANKINGLOADER
?_RECOVER_NEED_LOAD_NAND. . . . . . . .    C ADDR   000CH   R   SEG=?PR?RETURN_FROM_NAND_BANK?L51_BANKINGLOADER
AC. . . . . . . . . . . . . . . . . . .    B ADDR   00D0H.6 A   
ACC . . . . . . . . . . . . . . . . . .    D ADDR   00E0H   A   
ACC0. . . . . . . . . . . . . . . . . .    B ADDR   00E0H.0 A   
ACC1. . . . . . . . . . . . . . . . . .    B ADDR   00E0H.1 A   
A51 MACRO ASSEMBLER  L51_BANKINGLOADER                                                    06/07/2012 14:16:48 PAGE    22

ACC2. . . . . . . . . . . . . . . . . .    B ADDR   00E0H.2 A   
ACC3. . . . . . . . . . . . . . . . . .    B ADDR   00E0H.3 A   
ACC4. . . . . . . . . . . . . . . . . .    B ADDR   00E0H.4 A   
ACC5. . . . . . . . . . . . . . . . . .    B ADDR   00E0H.5 A   
ACC6. . . . . . . . . . . . . . . . . .    B ADDR   00E0H.6 A   
ACC7. . . . . . . . . . . . . . . . . .    B ADDR   00E0H.7 A   
B . . . . . . . . . . . . . . . . . . .    D ADDR   00F0H   A   
BANK_BLOCK_A. . . . . . . . . . . . . .    X ADDR   -----       EXT
BANK_BLOCK_B. . . . . . . . . . . . . .    X ADDR   -----       EXT
CHK_DATA_TRANSFER_DONE. . . . . . . . .    C ADDR   -----       EXT
CHK_ECC_DONE. . . . . . . . . . . . . .    C ADDR   -----       EXT
CHK_FLASH_READY . . . . . . . . . . . .    C ADDR   -----       EXT
CHK_NANDAUTOCMP_DONE. . . . . . . . . .    C ADDR   -----       EXT
CKCON . . . . . . . . . . . . . . . . .    D ADDR   008EH   A   
COLOR_R . . . . . . . . . . . . . . . .    B ADDR   00B0H.0 A   
COM0024 . . . . . . . . . . . . . . . .    C ADDR   0000H   R   SEG=?PR?L51_BANKINGLOADER
CP_RL2. . . . . . . . . . . . . . . . .    B ADDR   00C8H.0 A   
CY. . . . . . . . . . . . . . . . . . .    B ADDR   00D0H.7 A   
C_T2. . . . . . . . . . . . . . . . . .    B ADDR   00C8H.1 A   
DEVICE_READ_SRAM_INDEX. . . . . . . . .    X ADDR   -----       EXT
DEVICE_XFER_DATALENGTH. . . . . . . . .    X ADDR   -----       EXT
DPH . . . . . . . . . . . . . . . . . .    D ADDR   0083H   A   
DPL . . . . . . . . . . . . . . . . . .    D ADDR   0082H   A   
EA. . . . . . . . . . . . . . . . . . .    B ADDR   00A8H.7 A   
ES. . . . . . . . . . . . . . . . . . .    B ADDR   00A8H.4 A   
ET0 . . . . . . . . . . . . . . . . . .    B ADDR   00A8H.1 A   
ET1 . . . . . . . . . . . . . . . . . .    B ADDR   00A8H.3 A   
ET2 . . . . . . . . . . . . . . . . . .    B ADDR   00A8H.5 A   
EX0 . . . . . . . . . . . . . . . . . .    B ADDR   00A8H.0 A   
EX1 . . . . . . . . . . . . . . . . . .    B ADDR   00A8H.2 A   
EXEN2 . . . . . . . . . . . . . . . . .    B ADDR   00C8H.3 A   
EXF2. . . . . . . . . . . . . . . . . .    B ADDR   00C8H.6 A   
F0. . . . . . . . . . . . . . . . . . .    B ADDR   00D0H.5 A   
FLASH_MULTREAD_DRAM . . . . . . . . . .    C ADDR   0000H   R   SEG=?PR?FLASH_MULTREAD_DRAM?L51_BANKINGLOADER
GBT_CODE_NEEDRECOVER. . . . . . . . . .    B ADDR   -----       EXT
GC_BANK_NUMBER. . . . . . . . . . . . .    D ADDR   0000H   R   SEG=?DT?L51_BANKINGLOADER
GC_FLASH_DATA . . . . . . . . . . . . .    X ADDR   -----       EXT
GC_INADDRMAX. . . . . . . . . . . . . .    X ADDR   -----       EXT
GW_PAGESPERBLOCK. . . . . . . . . . . .    X ADDR   -----       EXT
IE. . . . . . . . . . . . . . . . . . .    D ADDR   00A8H   A   
IE0 . . . . . . . . . . . . . . . . . .    B ADDR   0088H.1 A   
IE1 . . . . . . . . . . . . . . . . . .    B ADDR   0088H.3 A   
INT0. . . . . . . . . . . . . . . . . .    B ADDR   00B0H.2 A   
INT1. . . . . . . . . . . . . . . . . .    B ADDR   00B0H.3 A   
IP. . . . . . . . . . . . . . . . . . .    D ADDR   00B8H   A   
IT0 . . . . . . . . . . . . . . . . . .    B ADDR   0088H.0 A   
IT1 . . . . . . . . . . . . . . . . . .    B ADDR   0088H.2 A   
L51_BANKINGLOADER . . . . . . . . . . .    N NUMB   -----       
L?0034. . . . . . . . . . . . . . . . .    C ADDR   014CH   R   SEG=?PR?FLASH_MULTREAD_DRAM?L51_BANKINGLOADER
L?0035. . . . . . . . . . . . . . . . .    C ADDR   00B8H   R   SEG=?PR?LOAD_NAND_BANK?L51_BANKINGLOADER
L?0037. . . . . . . . . . . . . . . . .    C ADDR   0000H   R   SEG=?PR?L51_BANKINGLOADER
L?0038. . . . . . . . . . . . . . . . .    C ADDR   0013H   R   SEG=?PR?L51_BANKINGLOADER
L?0039. . . . . . . . . . . . . . . . .    C ADDR   0023H   R   SEG=?PR?L51_BANKINGLOADER
L?0040. . . . . . . . . . . . . . . . .    C ADDR   0175H   R   SEG=?PR?FLASH_MULTREAD_DRAM?L51_BANKINGLOADER
LCD_CLK . . . . . . . . . . . . . . . .    B ADDR   0090H.3 A   
LCD_RS. . . . . . . . . . . . . . . . .    B ADDR   0090H.2 A   
LCD_SI. . . . . . . . . . . . . . . . .    B ADDR   0090H.4 A   
LOAD_NAND_BANK. . . . . . . . . . . . .    C ADDR   0000H   R   SEG=?PR?LOAD_NAND_BANK?L51_BANKINGLOADER
LOCK_SWITCH . . . . . . . . . . . . . .    B ADDR   0090H.1 A   
NAND_INFO . . . . . . . . . . . . . . .    X ADDR   -----       EXT
OV. . . . . . . . . . . . . . . . . . .    B ADDR   00D0H.2 A   
P . . . . . . . . . . . . . . . . . . .    B ADDR   00D0H.0 A   
P0. . . . . . . . . . . . . . . . . . .    D ADDR   0080H   A   
P1. . . . . . . . . . . . . . . . . . .    D ADDR   0090H   A   
P1_3. . . . . . . . . . . . . . . . . .    B ADDR   0090H.3 A   
P1_6. . . . . . . . . . . . . . . . . .    B ADDR   0090H.6 A   
A51 MACRO ASSEMBLER  L51_BANKINGLOADER                                                    06/07/2012 14:16:48 PAGE    23

P1_7. . . . . . . . . . . . . . . . . .    B ADDR   0090H.7 A   
P2. . . . . . . . . . . . . . . . . . .    D ADDR   00A0H   A   
P3. . . . . . . . . . . . . . . . . . .    D ADDR   00B0H   A   
P3_0. . . . . . . . . . . . . . . . . .    B ADDR   00B0H.0 A   
P3_1. . . . . . . . . . . . . . . . . .    B ADDR   00B0H.1 A   
PCON. . . . . . . . . . . . . . . . . .    D ADDR   0087H   A   
PERFORM_NAND_BANK_CALL. . . . . . . . .    C ADDR   0000H   R   SEG=?PR?PERFORM_NAND_BANK_CALL?L51_BANKINGLOADER
PS. . . . . . . . . . . . . . . . . . .    B ADDR   00B8H.4 A   
PSW . . . . . . . . . . . . . . . . . .    D ADDR   00D0H   A   
PT0 . . . . . . . . . . . . . . . . . .    B ADDR   00B8H.1 A   
PT1 . . . . . . . . . . . . . . . . . .    B ADDR   00B8H.3 A   
PT2 . . . . . . . . . . . . . . . . . .    B ADDR   00B8H.5 A   
PX0 . . . . . . . . . . . . . . . . . .    B ADDR   00B8H.0 A   
PX1 . . . . . . . . . . . . . . . . . .    B ADDR   00B8H.2 A   
RAMPAGE . . . . . . . . . . . . . . . .    D ADDR   009BH   A   
RB8 . . . . . . . . . . . . . . . . . .    B ADDR   0098H.2 A   
RCAP2H. . . . . . . . . . . . . . . . .    D ADDR   00CBH   A   
RCAP2L. . . . . . . . . . . . . . . . .    D ADDR   00CAH   A   
RCLK. . . . . . . . . . . . . . . . . .    B ADDR   00C8H.5 A   
RD. . . . . . . . . . . . . . . . . . .    B ADDR   00B0H.7 A   
REN . . . . . . . . . . . . . . . . . .    B ADDR   0098H.4 A   
RESET_DMA . . . . . . . . . . . . . . .    C ADDR   -----       EXT
RETURN_FROM_NAND_BANK . . . . . . . . .    C ADDR   0000H   R   SEG=?PR?RETURN_FROM_NAND_BANK?L51_BANKINGLOADER
RI. . . . . . . . . . . . . . . . . . .    B ADDR   0098H.0 A   
RS0 . . . . . . . . . . . . . . . . . .    B ADDR   00D0H.3 A   
RS1 . . . . . . . . . . . . . . . . . .    B ADDR   00D0H.4 A   
RXD . . . . . . . . . . . . . . . . . .    B ADDR   00B0H.0 A   
SBUF. . . . . . . . . . . . . . . . . .    D ADDR   0099H   A   
SCON. . . . . . . . . . . . . . . . . .    D ADDR   0098H   A   
SD_DETECT . . . . . . . . . . . . . . .    B ADDR   0090H.1 A   
SET_DEVICE_READ_TO_DRAM . . . . . . . .    C ADDR   -----       EXT
SM0 . . . . . . . . . . . . . . . . . .    B ADDR   0098H.7 A   
SM1 . . . . . . . . . . . . . . . . . .    B ADDR   0098H.6 A   
SM2 . . . . . . . . . . . . . . . . . .    B ADDR   0098H.5 A   
SP. . . . . . . . . . . . . . . . . . .    D ADDR   0081H   A   
T0. . . . . . . . . . . . . . . . . . .    B ADDR   00B0H.4 A   
T1. . . . . . . . . . . . . . . . . . .    B ADDR   00B0H.5 A   
T2CON . . . . . . . . . . . . . . . . .    D ADDR   00C8H   A   
TB8 . . . . . . . . . . . . . . . . . .    B ADDR   0098H.3 A   
TBT_BACKUP?349. . . . . . . . . . . . .    B ADDR   0000H.0 R   SEG=?BI?FLASH_MULTREAD_DRAM?L51_BANKINGLOADER
TBT_DOSENDCOMMAND?354 . . . . . . . . .    B ADDR   0000H.1 R   SEG=?BI?FLASH_MULTREAD_DRAM?L51_BANKINGLOADER
TCLK. . . . . . . . . . . . . . . . . .    B ADDR   00C8H.4 A   
TCON. . . . . . . . . . . . . . . . . .    D ADDR   0088H   A   
TC_BANK_BLOCK?246 . . . . . . . . . . .    X ADDR   0004H   R   SEG=?XD?LOAD_NAND_BANK?L51_BANKINGLOADER
TC_BLOCK0?352 . . . . . . . . . . . . .    X ADDR   0002H   R   SEG=?XD?FLASH_MULTREAD_DRAM?L51_BANKINGLOADER
TC_BLOCK0?564 . . . . . . . . . . . . .    X ADDR   0003H   R   SEG=?XD?_BANKING_NAND_FBLOCK_FPAGE_FBANK_TO_PHYADDR_NAND
                                         ?L51_BANKINGLOADER
TC_BLOCK1?351 . . . . . . . . . . . . .    X ADDR   0001H   R   SEG=?XD?FLASH_MULTREAD_DRAM?L51_BANKINGLOADER
TC_BLOCK1?563 . . . . . . . . . . . . .    X ADDR   0002H   R   SEG=?XD?_BANKING_NAND_FBLOCK_FPAGE_FBANK_TO_PHYADDR_NAND
                                         ?L51_BANKINGLOADER
TC_FBANK?357. . . . . . . . . . . . . .    X ADDR   0007H   R   SEG=?XD?FLASH_MULTREAD_DRAM?L51_BANKINGLOADER
TC_FBANK?562. . . . . . . . . . . . . .    X ADDR   0001H   R   SEG=?XD?_BANKING_NAND_FBLOCK_FPAGE_FBANK_TO_PHYADDR_NAND
                                         ?L51_BANKINGLOADER
TC_FPAGE?242. . . . . . . . . . . . . .    X ADDR   0000H   R   SEG=?XD?LOAD_NAND_BANK?L51_BANKINGLOADER
TC_FPAGE?350. . . . . . . . . . . . . .    X ADDR   0000H   R   SEG=?XD?FLASH_MULTREAD_DRAM?L51_BANKINGLOADER
TC_FPAGE?561. . . . . . . . . . . . . .    X ADDR   0000H   R   SEG=?XD?_BANKING_NAND_FBLOCK_FPAGE_FBANK_TO_PHYADDR_NAND
                                         ?L51_BANKINGLOADER
TC_INADDR?243 . . . . . . . . . . . . .    X ADDR   0001H   R   SEG=?XD?LOAD_NAND_BANK?L51_BANKINGLOADER
TC_INADDR?356 . . . . . . . . . . . . .    X ADDR   0006H   R   SEG=?XD?FLASH_MULTREAD_DRAM?L51_BANKINGLOADER
TC_INADDRMAX?358. . . . . . . . . . . .    X ADDR   0008H   R   SEG=?XD?FLASH_MULTREAD_DRAM?L51_BANKINGLOADER
TC_PAGENUM?353. . . . . . . . . . . . .    X ADDR   0003H   R   SEG=?XD?FLASH_MULTREAD_DRAM?L51_BANKINGLOADER
TF0 . . . . . . . . . . . . . . . . . .    B ADDR   0088H.5 A   
TF1 . . . . . . . . . . . . . . . . . .    B ADDR   0088H.7 A   
TF2 . . . . . . . . . . . . . . . . . .    B ADDR   00C8H.7 A   
TGC_INADDR. . . . . . . . . . . . . . .    X ADDR   0000H   R   SEG=?XD?L51_BANKINGLOADER
TH0 . . . . . . . . . . . . . . . . . .    D ADDR   008CH   A   
A51 MACRO ASSEMBLER  L51_BANKINGLOADER                                                    06/07/2012 14:16:48 PAGE    24

TH1 . . . . . . . . . . . . . . . . . .    D ADDR   008DH   A   
TH2 . . . . . . . . . . . . . . . . . .    D ADDR   00CDH   A   
TI. . . . . . . . . . . . . . . . . . .    B ADDR   0098H.1 A   
TL0 . . . . . . . . . . . . . . . . . .    D ADDR   008AH   A   
TL1 . . . . . . . . . . . . . . . . . .    D ADDR   008BH   A   
TL2 . . . . . . . . . . . . . . . . . .    D ADDR   00CCH   A   
TMOD. . . . . . . . . . . . . . . . . .    D ADDR   0089H   A   
TR0 . . . . . . . . . . . . . . . . . .    B ADDR   0088H.4 A   
TR1 . . . . . . . . . . . . . . . . . .    B ADDR   0088H.6 A   
TR2 . . . . . . . . . . . . . . . . . .    B ADDR   00C8H.2 A   
TRIGGER_DATA_TRANSFER . . . . . . . . .    C ADDR   -----       EXT
TRIGGER_FLASH_CMD . . . . . . . . . . .    C ADDR   -----       EXT
TW_FCOLADDR?460 . . . . . . . . . . . .    X ADDR   0000H   R   SEG=?XD?_BANKING_NAND_INADDR_TO_COLUMN_NAND?L51_BANKINGL
                                         OADER
TXD . . . . . . . . . . . . . . . . . .    B ADDR   00B0H.1 A   
USING3_R0 . . . . . . . . . . . . . . .    N NUMB   0018H   A   
USING3_R1 . . . . . . . . . . . . . . .    N NUMB   0019H   A   
USING3_R2 . . . . . . . . . . . . . . .    N NUMB   001AH   A   
USING3_R3 . . . . . . . . . . . . . . .    N NUMB   001BH   A   
USING3_R4 . . . . . . . . . . . . . . .    N NUMB   001CH   A   
USING3_R5 . . . . . . . . . . . . . . .    N NUMB   001DH   A   
USING3_R6 . . . . . . . . . . . . . . .    N NUMB   001EH   A   
USING3_R7 . . . . . . . . . . . . . . .    N NUMB   001FH   A   
U_FBLOCK1?355 . . . . . . . . . . . . .    X ADDR   0004H   R   SEG=?XD?FLASH_MULTREAD_DRAM?L51_BANKINGLOADER
U_FBLOCK?244. . . . . . . . . . . . . .    X ADDR   0002H   R   SEG=?XD?LOAD_NAND_BANK?L51_BANKINGLOADER
WR. . . . . . . . . . . . . . . . . . .    B ADDR   00B0H.6 A   
_BANKING_NAND_FBLOCK_FPAGE_FBANK_TO_PHYADDRC ADDR   0000H   R   SEG=?PR?_BANKING_NAND_FBLOCK_FPAGE_FBANK_TO_PHYADDR_NAND
                                         ?L51_BANKINGLOADER
_BANKING_NAND_INADDR_TO_COLUMN_NAND . .    C ADDR   0000H   R   SEG=?PR?_BANKING_NAND_INADDR_TO_COLUMN_NAND?L51_BANKINGL
                                         OADER


REGISTER BANK(S) USED: 0 3 


ASSEMBLY COMPLETE.  0 WARNING(S), 0 ERROR(S)
