A51 MACRO ASSEMBLER  L51_BANKINGLOADER                                                    03/02/2011 09:21:39 PAGE     1


MACRO ASSEMBLER A51 V7.09
OBJECT MODULE PLACED IN .\obj\L51_BankingLoader.OBJ
ASSEMBLER INVOKED BY: F:\Keil C 7.10\chengxu\C51\BIN\A51.EXE .\obj\L51_BankingLoader.src PR(.\lst\L51_BankingLoader.ls1)
                       EP DEBUG

LOC  OBJ            LINE     SOURCE

                       1     ; .\obj\L51_BankingLoader.SRC generated from: ..\LIBSOURCE\ASM\L51_BankingLoader.c
                       2     ; COMPILER INVOKED BY:
                       3     ;        F:\Keil C 7.10\chengxu\C51\BIN\C51.EXE ..\LIBSOURCE\ASM\L51_BankingLoader.c LARGE 
                             OPTIMIZE(9,SIZE) BROWSE NOAREGS INCDIR(..\libsource\header) DEFINE(K_ICTYPE=0x03) DEBUG OBJ
                             ECTEXTEND PRINT(.\lst\L51_BankingLoader.lst) SRC(.\obj\L51_BankingLoader.SRC)
                       4     
                       5     $nomod51 
                       6     
                       7     NAME    L51_BANKINGLOADER
                       8     
  00E7                 9     ACC7    BIT     0E0H.7
  0080                10     P0      DATA    080H
  0090                11     P1      DATA    090H
  00A0                12     P2      DATA    0A0H
  00B0                13     P3      DATA    0B0H
  00B4                14     T0      BIT     0B0H.4
  00D6                15     AC      BIT     0D0H.6
  00B5                16     T1      BIT     0B0H.5
  00AF                17     EA      BIT     0A8H.7
  00A8                18     IE      DATA    0A8H
  0093                19     LCD_CLK BIT     090H.3
  00B0                20     P3_0    BIT     0B0H.0
  00B1                21     P3_1    BIT     0B0H.1
  0093                22     P1_3    BIT     090H.3
  00CE                23     EXF2    BIT     0C8H.6
  00B7                24     RD      BIT     0B0H.7
  0096                25     P1_6    BIT     090H.6
  0097                26     P1_7    BIT     090H.7
  00AC                27     ES      BIT     0A8H.4
  00B8                28     IP      DATA    0B8H
  0098                29     RI      BIT     098H.0
  00B2                30     INT0    BIT     0B0H.2
  00D7                31     CY      BIT     0D0H.7
  0099                32     TI      BIT     098H.1
  00B3                33     INT1    BIT     0B0H.3
  009B                34     RamPage DATA    09BH
  00CB                35     RCAP2H  DATA    0CBH
  00BC                36     PS      BIT     0B8H.4
  0081                37     SP      DATA    081H
  00D2                38     OV      BIT     0D0H.2
  00CA                39     RCAP2L  DATA    0CAH
  00C9                40     C_T2    BIT     0C8H.1
  00B6                41     WR      BIT     0B0H.6
  00CD                42     RCLK    BIT     0C8H.5
  00CC                43     TCLK    BIT     0C8H.4
  0099                44     SBUF    DATA    099H
  0087                45     PCON    DATA    087H
  00B0                46     COLOR_R BIT     0B0H.0
  0098                47     SCON    DATA    098H
  0089                48     TMOD    DATA    089H
  0088                49     TCON    DATA    088H
  0089                50     IE0     BIT     088H.1
  008B                51     IE1     BIT     088H.3
  00F0                52     B       DATA    0F0H
  00C8                53     CP_RL2  BIT     0C8H.0
  00E0                54     ACC     DATA    0E0H
  00A9                55     ET0     BIT     0A8H.1
A51 MACRO ASSEMBLER  L51_BANKINGLOADER                                                    03/02/2011 09:21:39 PAGE     2

  00AB                56     ET1     BIT     0A8H.3
  008D                57     TF0     BIT     088H.5
  00AD                58     ET2     BIT     0A8H.5
  008F                59     TF1     BIT     088H.7
  00CF                60     TF2     BIT     0C8H.7
  009A                61     RB8     BIT     098H.2
  008C                62     TH0     DATA    08CH
  00A8                63     EX0     BIT     0A8H.0
  0088                64     IT0     BIT     088H.0
  008D                65     TH1     DATA    08DH
  009B                66     TB8     BIT     098H.3
  00AA                67     EX1     BIT     0A8H.2
  008A                68     IT1     BIT     088H.2
  00CD                69     TH2     DATA    0CDH
  00D0                70     P       BIT     0D0H.0
  009F                71     SM0     BIT     098H.7
  0094                72     LCD_SI  BIT     090H.4
  008A                73     TL0     DATA    08AH
  009E                74     SM1     BIT     098H.6
  008B                75     TL1     DATA    08BH
  009D                76     SM2     BIT     098H.5
  00CC                77     TL2     DATA    0CCH
  0091                78     SD_Detect       BIT     090H.1
  00B9                79     PT0     BIT     0B8H.1
  00BB                80     PT1     BIT     0B8H.3
  00D3                81     RS0     BIT     0D0H.3
  00BD                82     PT2     BIT     0B8H.5
  008C                83     TR0     BIT     088H.4
  00D4                84     RS1     BIT     0D0H.4
  008E                85     TR1     BIT     088H.6
  00CA                86     TR2     BIT     0C8H.2
  00B8                87     PX0     BIT     0B8H.0
  0092                88     LCD_RS  BIT     090H.2
  00BA                89     PX1     BIT     0B8H.2
  0083                90     DPH     DATA    083H
  0091                91     LOCK_SWITCH     BIT     090H.1
  0082                92     DPL     DATA    082H
  00CB                93     EXEN2   BIT     0C8H.3
  009C                94     REN     BIT     098H.4
  00C8                95     T2CON   DATA    0C8H
  00B0                96     RXD     BIT     0B0H.0
  008E                97     CKCON   DATA    08EH
  00B1                98     TXD     BIT     0B0H.1
  00D5                99     F0      BIT     0D0H.5
  00E0               100     ACC0    BIT     0E0H.0
  00E1               101     ACC1    BIT     0E0H.1
  00E2               102     ACC2    BIT     0E0H.2
  00E3               103     ACC3    BIT     0E0H.3
  00D0               104     PSW     DATA    0D0H
  00E4               105     ACC4    BIT     0E0H.4
  00E5               106     ACC5    BIT     0E0H.5
  00E6               107     ACC6    BIT     0E0H.6
                     108     ?PR?perform_nand_bank_call?L51_BANKINGLOADER SEGMENT CODE 
                     109     ?PR?return_from_nand_bank?L51_BANKINGLOADER SEGMENT CODE 
                     110     ?PR?load_nand_bank?L51_BANKINGLOADER     SEGMENT CODE 
                     111     ?XD?load_nand_bank?L51_BANKINGLOADER     SEGMENT XDATA OVERLAYABLE 
                     112     ?PR?FLASH_MultRead_DRAM?L51_BANKINGLOADER SEGMENT CODE 
                     113     ?XD?FLASH_MultRead_DRAM?L51_BANKINGLOADER SEGMENT XDATA OVERLAYABLE 
                     114     ?BI?FLASH_MultRead_DRAM?L51_BANKINGLOADER SEGMENT BIT OVERLAYABLE 
                     115     ?PR?_Banking_NAND_InAddr_To_Column_NAND?L51_BANKINGLOADER SEGMENT CODE 
                     116     ?XD?_Banking_NAND_InAddr_To_Column_NAND?L51_BANKINGLOADER SEGMENT XDATA OVERLAYABLE 
                     117     ?PR?_Banking_NAND_FBlock_FPage_FBank_To_PhyAddr_NAND?L51_BANKINGLOADER SEGMENT CODE 
                     118     ?XD?_Banking_NAND_FBlock_FPage_FBank_To_PhyAddr_NAND?L51_BANKINGLOADER SEGMENT XDATA OVERLA
                             YABLE 
                     119     ?C_INITSEG           SEGMENT CODE 
                     120     ?DT?L51_BANKINGLOADER                    SEGMENT DATA 
A51 MACRO ASSEMBLER  L51_BANKINGLOADER                                                    03/02/2011 09:21:39 PAGE     3

                     121     ?XD?L51_BANKINGLOADER                    SEGMENT XDATA 
                     122     ?PR?L51_BANKINGLOADER                    SEGMENT CODE 
                     123             EXTRN   CODE (CHK_Flash_Ready)
                     124             EXTRN   CODE (CHK_NandAutocmp_Done)
                     125             EXTRN   CODE (SET_DEVICE_READ_TO_DRAM)
                     126             EXTRN   XDATA (gc_InAddrMax)
                     127             EXTRN   XDATA (Device_Xfer_DataLength)
                     128             EXTRN   CODE (TRIGGER_FLASH_CMD)
                     129             EXTRN   XDATA (Device_Read_SRAM_Index)
                     130             EXTRN   XDATA (NAND_INFO)
                     131             EXTRN   CODE (Reset_DMA)
                     132             EXTRN   CODE (CHK_Data_Transfer_Done)
                     133             EXTRN   XDATA (gw_PagesPerBlock)
                     134             EXTRN   BIT (gbt_Code_NeedRecover)
                     135             EXTRN   CODE (Trigger_Data_Transfer)
                     136             EXTRN   CODE (CHK_ECC_Done)
                     137             EXTRN   XDATA (Bank_Block_A)
                     138             EXTRN   XDATA (Bank_Block_B)
                     139             EXTRN   XDATA (gc_Flash_Data)
                     140             EXTRN   CODE (?C?UIDIV)
                     141             EXTRN   CODE (?C?IMUL)
                     142             PUBLIC  tgc_InAddr
                     143             PUBLIC  gc_bank_number
                     144             PUBLIC  ?_Banking_NAND_FBlock_FPage_FBank_To_PhyAddr_NAND?BYTE
                     145             PUBLIC  _Banking_NAND_FBlock_FPage_FBank_To_PhyAddr_NAND
                     146             PUBLIC  _Banking_NAND_InAddr_To_Column_NAND
                     147             PUBLIC  ?FLASH_MultRead_DRAM?BIT
                     148             PUBLIC  ?FLASH_MultRead_DRAM?BYTE
                     149             PUBLIC  FLASH_MultRead_DRAM
                     150             PUBLIC  load_nand_bank
                     151             PUBLIC  return_from_nand_bank
                     152             PUBLIC  perform_nand_bank_call
                     153     
----                 154             RSEG  ?XD?load_nand_bank?L51_BANKINGLOADER
0000                 155     ?load_nand_bank?BYTE:
0000                 156        tc_FPage?242:   DS   1
0001                 157       tc_InAddr?243:   DS   1
0002                 158        u_FBlock?244:   DS   2
0004                 159     tc_bank_block?246:   DS   1
                     160     
----                 161             RSEG  ?XD?_Banking_NAND_InAddr_To_Column_NAND?L51_BANKINGLOADER
0000                 162     ?_Banking_NAND_InAddr_To_Column_NAND?BYTE:
0000                 163     tw_FColAddr?460:   DS   2
                     164     
----                 165             RSEG  ?XD?_Banking_NAND_FBlock_FPage_FBank_To_PhyAddr_NAND?L51_BANKINGLOADER
0000                 166     ?_Banking_NAND_FBlock_FPage_FBank_To_PhyAddr_NAND?BYTE:
0000                 167        tc_FPage?561:   DS   1
0001                 168        tc_FBank?562:   DS   1
0002                 169       tc_Block1?563:   DS   1
0003                 170       tc_Block0?564:   DS   1
                     171     
----                 172             RSEG  ?XD?FLASH_MultRead_DRAM?L51_BANKINGLOADER
0000                 173     ?FLASH_MultRead_DRAM?BYTE:
0000                 174        tc_FPage?350:   DS   1
0001                 175       tc_Block1?351:   DS   1
0002                 176       tc_Block0?352:   DS   1
0003                 177      tc_PageNum?353:   DS   1
0004                 178             ORG  4
0004                 179       u_FBlock1?355:   DS   2
0006                 180       tc_InAddr?356:   DS   1
0007                 181        tc_FBank?357:   DS   1
0008                 182     tc_InAddrMax?358:   DS   1
                     183     
----                 184             RSEG  ?BI?FLASH_MultRead_DRAM?L51_BANKINGLOADER
0000                 185     ?FLASH_MultRead_DRAM?BIT:
0000                 186      tbt_Backup?349:   DBIT   1
A51 MACRO ASSEMBLER  L51_BANKINGLOADER                                                    03/02/2011 09:21:39 PAGE     4

0001                 187             ORG  1
0001                 188     tbt_DoSendCommand?354:   DBIT   1
                     189     
----                 190             RSEG  ?DT?L51_BANKINGLOADER
0000                 191      gc_bank_number:   DS   1
                     192     
----                 193             RSEG  ?XD?L51_BANKINGLOADER
0000                 194          tgc_InAddr:   DS   1
                     195     
----                 196             RSEG  ?C_INITSEG
0000 01              197             DB      001H
0001 00       F      198             DB      gc_bank_number
0002 00              199             DB      000H
                     200     
                     201     ; #include <stdio.h>
                     202     ; #include "SPDA2K.h"
                     203     ; 
                     204     ; #define SECTORS_PER_BANK      32  //1 sector = 1K Byte
                     205     ; 
                     206     ; U8 data gc_bank_number = 0;   //!< The current banking number in instruction SRAM.
                     207     ; U8 tgc_InAddr; //0602 Jay add for  
                     208     ; bit FLASH_MultRead_DRAM(bit tbt_Backup, U8 tc_FPage, UBYTE tc_Block1, UBYTE tc_Block0, UB
                             YTE tc_PageNum);
                     209     ; void Banking_NAND_InAddr_To_Column_NAND(UBYTE tc_InAddr);
                     210     ; void Banking_NAND_FBlock_FPage_FBank_To_PhyAddr_NAND(U8  tc_FPage, UBYTE tc_FBank, UBYTE 
                             tc_Block1, UBYTE tc_Block0);
                     211     ; 
                     212     ; //! Entry of the banking loader.
                     213     
----                 214             RSEG  ?PR?L51_BANKINGLOADER
0000                 215     Com0024:
0000                 216     L?0037:
                     217             USING   0
0000 90B80A          218             MOV     DPTR,#0B80AH
0003 EF              219             MOV     A,R7
0004 F0              220             MOVX    @DPTR,A
0005 90B809          221             MOV     DPTR,#0B809H
0008 EB              222             MOV     A,R3
0009 F0              223             MOVX    @DPTR,A
000A 900000   F      224             MOV     DPTR,#tc_Block0?564
000D E0              225             MOVX    A,@DPTR
000E 90B808          226             MOV     DPTR,#0B808H
0011 F0              227             MOVX    @DPTR,A
0012 22              228             RET     
0013                 229     L?0038:
                     230             USING   3
0013 900000   F      231             MOV     DPTR,#Device_Read_SRAM_Index
0016 7460            232             MOV     A,#060H
0018 F0              233             MOVX    @DPTR,A
0019 A3              234             INC     DPTR
001A E4              235             CLR     A
001B F0              236             MOVX    @DPTR,A
001C 900000   F      237             MOV     DPTR,#tc_bank_block?246
001F E0              238             MOVX    A,@DPTR
0020 25E0            239             ADD     A,ACC
0022 22              240             RET     
0023                 241     L?0039:
                     242             USING   3
0023 F583            243             MOV     DPH,A
0025 E0              244             MOVX    A,@DPTR
0026 FF              245             MOV     R7,A
0027 A3              246             INC     DPTR
0028 E0              247             MOVX    A,@DPTR
0029 900000   F      248             MOV     DPTR,#u_FBlock?244
002C CF              249             XCH     A,R7
002D F0              250             MOVX    @DPTR,A
A51 MACRO ASSEMBLER  L51_BANKINGLOADER                                                    03/02/2011 09:21:39 PAGE     5

002E A3              251             INC     DPTR
002F EF              252             MOV     A,R7
0030 F0              253             MOVX    @DPTR,A
0031 22              254             RET     
                     255     ; END OF Com0024
                     256     
                     257     ; void perform_nand_bank_call(void)
                     258     
----                 259             RSEG  ?PR?perform_nand_bank_call?L51_BANKINGLOADER
0000                 260     perform_nand_bank_call:
                     261                             ; SOURCE LINE # 13
                     262     ; {
                     263                             ; SOURCE LINE # 14
                     264     ; #pragma asm
                     265     ; Using3_R0 EQU 018H
  0018               266               Using3_R0 EQU 018H
                     267     ; Using3_R1 EQU 019H
  0019               268               Using3_R1 EQU 019H
                     269     ; Using3_R2 EQU 01AH
  001A               270               Using3_R2 EQU 01AH
                     271     ; Using3_R3 EQU 01BH
  001B               272               Using3_R3 EQU 01BH
                     273     ; Using3_R4 EQU 01CH
  001C               274               Using3_R4 EQU 01CH
                     275     ; Using3_R5 EQU 01DH
  001D               276               Using3_R5 EQU 01DH
                     277     ; Using3_R6 EQU 01EH
  001E               278               Using3_R6 EQU 01EH
                     279     ; Using3_R7 EQU 01FH
  001F               280               Using3_R7 EQU 01FH
                     281     ; 
                     282               
                     283     ; 
                     284               
                     285     ;       cjne A, gc_bank_number, ?_need_to_load_nand_bank
0000 B50005   F      286               cjne A, gc_bank_number, ?_need_to_load_nand_bank
                     287     ;       push DPL
0003 C082            288               push DPL
                     289     ;       push DPH
0005 C083            290               push DPH
                     291     ;       ret
0007 22              292               ret
                     293     ; 
                     294               
                     295     ; ?_need_to_load_nand_bank:
0008                 296               ?_need_to_load_nand_bank:
                     297     ;       //Target Bank Number is in register A
                     298               
                     299     ;       push gc_bank_number
0008 C000     F      300               push gc_bank_number
                     301     ;       mov  gc_bank_number, A
000A F500     F      302               mov  gc_bank_number, A
                     303     ; 
                     304               
                     305     ;       //push the bank recover function for returning use
                     306               
                     307     ;       mov  A, #LOW return_from_nand_bank
000C 7400     F      308               mov  A, #LOW return_from_nand_bank
                     309     ;       push ACC
000E C0E0            310               push ACC
                     311     ;       mov  A, #HIGH return_from_nand_bank
0010 7400     F      312               mov  A, #HIGH return_from_nand_bank
                     313     ;       push ACC
0012 C0E0            314               push ACC
                     315     ;       //push target address
                     316               
A51 MACRO ASSEMBLER  L51_BANKINGLOADER                                                    03/02/2011 09:21:39 PAGE     6

                     317     ;       push DPL
0014 C082            318               push DPL
                     319     ;       push DPH
0016 C083            320               push DPH
                     321     ;       //push PSW and IE
                     322               
                     323     ;       push PSW
0018 C0D0            324               push PSW
                     325     ;       mov  PSW, #18   //use register bank3
001A 75D012          326               mov  PSW, #18  
                     327     ;       push IE
001D C0A8            328               push IE
                     329     ;       clr  EA                 //disable IRQ
001F C2AF            330               clr  EA                        
                     331     ; 
                     332               
                     333     ;       call load_nand_bank
0021 120000   F      334               call load_nand_bank
                     335     ; 
                     336               
                     337     ;       //recover IE and PSW
                     338               
                     339     ;       pop  IE
0024 D0A8            340               pop  IE
                     341     ;       pop  PSW
0026 D0D0            342               pop  PSW
                     343     ;       ret
0028 22              344               ret
                     345     ; #pragma endasm
                     346     ; }
                     347                             ; SOURCE LINE # 57
0029 22              348             RET     
                     349     ; END OF perform_nand_bank_call
                     350     
                     351     ; 
                     352     ; //! Exit of the banking loader.
                     353     ; void return_from_nand_bank(void)
                     354     
----                 355             RSEG  ?PR?return_from_nand_bank?L51_BANKINGLOADER
0000                 356     return_from_nand_bank:
                     357                             ; SOURCE LINE # 60
                     358     ; {
                     359                             ; SOURCE LINE # 61
                     360     ; #pragma asm
                     361     ;       mov  A, gc_bank_number  //A is current bank
0000 E500     F      362               mov  A, gc_bank_number         
                     363     ;       pop  gc_bank_number             //gc_bank_number is return bank
0002 D000     F      364               pop  gc_bank_number            
                     365     ;       push PSW
0004 C0D0            366               push PSW
                     367     ;       cjne A, gc_bank_number, ?_recover_need_load_nand
0006 B50003   F      368               cjne A, gc_bank_number, ?_recover_need_load_nand
                     369     ;       pop PSW
0009 D0D0            370               pop PSW
                     371     ;       ret
000B 22              372               ret
                     373     ; ?_recover_need_load_nand:
000C                 374               ?_recover_need_load_nand:
                     375     ;       mov  PSW, #18                   //use register bank3
000C 75D012          376               mov  PSW, #18                          
                     377     ;       push IE
000F C0A8            378               push IE
                     379     ;       clr  EA                                 //disable IRQ
0011 C2AF            380               clr  EA                                        
                     381     ; 
                     382               
A51 MACRO ASSEMBLER  L51_BANKINGLOADER                                                    03/02/2011 09:21:39 PAGE     7

                     383     ;       call load_nand_bank
0013 120000   F      384               call load_nand_bank
                     385     ; 
                     386               
                     387     ;       //pop PSW and IE
                     388               
                     389     ;       pop  IE
0016 D0A8            390               pop  IE
                     391     ;       pop  PSW
0018 D0D0            392               pop  PSW
                     393     ;       ret
001A 22              394               ret
                     395     ; #pragma endasm
                     396     ; }
                     397                             ; SOURCE LINE # 81
001B 22              398             RET     
                     399     ; END OF return_from_nand_bank
                     400     
                     401     ; 
                     402     ; 
                     403     ; //! NAND banking loader.
                     404     ; void load_nand_bank(void) using 3
                     405     
----                 406             RSEG  ?PR?load_nand_bank?L51_BANKINGLOADER
0000                 407     load_nand_bank:
                     408             USING   3
0000 C0D0            409             PUSH    PSW
0002 75D018          410             MOV     PSW,#018H
                     411                             ; SOURCE LINE # 85
                     412     ; {
                     413     ;       U8 tc_banks_per_block, tc_bank_number;
                     414     ;       U8  tc_FPage;
                     415     ;       U8  tc_InAddr;
                     416     ;       union WORDDataType u_FBlock;
                     417     ;       U8 tc_pages_per_bank;
                     418     ;       U8 tc_bank_block, tc_bank_offset,tc_InAddrMax;
                     419     ; 
                     420     ;       XBYTE[0xB400]=1;
                     421                             ; SOURCE LINE # 94
0005 90B400          422             MOV     DPTR,#0B400H
0008 7401            423             MOV     A,#01H
000A F0              424             MOVX    @DPTR,A
                     425     ;       tc_InAddrMax=gc_InAddrMax;
                     426                             ; SOURCE LINE # 95
000B 900000   F      427             MOV     DPTR,#gc_InAddrMax
000E E0              428             MOVX    A,@DPTR
                     429     ;---- Variable 'tc_InAddrMax?248' assigned to Register 'R3' ----
000F FB              430             MOV     R3,A
                     431     ; 
                     432     ;       tc_pages_per_bank = SECTORS_PER_BANK/tc_InAddrMax;                      // gc_InAdd
                             rMax = sectors per page
                     433                             ; SOURCE LINE # 97
0010 7420            434             MOV     A,#020H
0012 8BF0            435             MOV     B,R3
0014 84              436             DIV     AB
                     437     ;---- Variable 'tc_pages_per_bank?245' assigned to Register 'R2' ----
0015 FA              438             MOV     R2,A
                     439     ;       tc_banks_per_block = gw_PagesPerBlock/tc_pages_per_bank;        // Number of 16kB b
                             anks in a block
                     440                             ; SOURCE LINE # 98
0016 FD              441             MOV     R5,A
0017 7C00            442             MOV     R4,#00H
0019 900000   F      443             MOV     DPTR,#gw_PagesPerBlock
001C E0              444             MOVX    A,@DPTR
001D FE              445             MOV     R6,A
001E A3              446             INC     DPTR
A51 MACRO ASSEMBLER  L51_BANKINGLOADER                                                    03/02/2011 09:21:39 PAGE     8

001F E0              447             MOVX    A,@DPTR
0020 FF              448             MOV     R7,A
0021 120000   F      449             LCALL   ?C?UIDIV
                     450     ;---- Variable 'tc_banks_per_block?240' assigned to Register 'R7' ----
                     451     ;       if (gc_bank_number == 0)
                     452                             ; SOURCE LINE # 99
0024 E500     F      453             MOV     A,gc_bank_number
0026 701D            454             JNZ     ?C0003
                     455     ;       {
                     456                             ; SOURCE LINE # 100
                     457     ;               tc_bank_block = 0;
                     458                             ; SOURCE LINE # 101
0028 900000   F      459             MOV     DPTR,#tc_bank_block?246
002B F0              460             MOVX    @DPTR,A
                     461     ;               tc_FPage = (48/tc_InAddrMax);                   // commom is 20k 
                     462                             ; SOURCE LINE # 102
002C 7430            463             MOV     A,#030H
002E 8BF0            464             MOV     B,R3
0030 84              465             DIV     AB
0031 900000   F      466             MOV     DPTR,#tc_FPage?242
0034 F0              467             MOVX    @DPTR,A
                     468     ;               tgc_InAddr = 48%tc_InAddrMax;   //0602 Jay add
                     469                             ; SOURCE LINE # 103
0035 CF              470             XCH     A,R7
0036 EB              471             MOV     A,R3
0037 CF              472             XCH     A,R7
0038 7430            473             MOV     A,#030H
003A 8FF0            474             MOV     B,R7
003C 84              475             DIV     AB
003D 900000   F      476             MOV     DPTR,#tgc_InAddr
0040 E5F0            477             MOV     A,B
0042 F0              478             MOVX    @DPTR,A
                     479     ;       }
                     480                             ; SOURCE LINE # 104
0043 8022            481             SJMP    ?C0004
0045                 482     ?C0003:
                     483     ;       else
                     484     ;       {
                     485                             ; SOURCE LINE # 106
                     486     ;               tc_bank_number  = gc_bank_number +2;    // Offset of the bank to the start 
                             of code region in unit of 16kB
                     487                             ; SOURCE LINE # 107
0045 E500     F      488             MOV     A,gc_bank_number
0047 2402            489             ADD     A,#02H
0049 FE              490             MOV     R6,A
                     491     ;---- Variable 'tc_bank_number?241' assigned to Register 'R6' ----
                     492     ;               tc_bank_block   = tc_bank_number / tc_banks_per_block;  // in unit of 16kB
                     493                             ; SOURCE LINE # 108
004A 8FF0            494             MOV     B,R7
004C 84              495             DIV     AB
004D 900000   F      496             MOV     DPTR,#tc_bank_block?246
0050 F0              497             MOVX    @DPTR,A
                     498     ;               tc_bank_offset  = tc_bank_number % tc_banks_per_block;  // Offset of the ba
                             nk in its block in unit of 16kB
                     499                             ; SOURCE LINE # 109
0051 EE              500             MOV     A,R6
0052 8FF0            501             MOV     B,R7
0054 84              502             DIV     AB
0055 AFF0            503             MOV     R7,B
                     504     ;---- Variable 'tc_bank_offset?247' assigned to Register 'R7' ----
                     505     ;               tc_FPage                = tc_bank_offset * tc_pages_per_bank;   // page off
                             set of the bank in its block
                     506                             ; SOURCE LINE # 110
0057 CE              507             XCH     A,R6
0058 EA              508             MOV     A,R2
0059 CE              509             XCH     A,R6
A51 MACRO ASSEMBLER  L51_BANKINGLOADER                                                    03/02/2011 09:21:39 PAGE     9

005A EF              510             MOV     A,R7
005B 8EF0            511             MOV     B,R6
005D A4              512             MUL     AB
005E 900000   F      513             MOV     DPTR,#tc_FPage?242
0061 F0              514             MOVX    @DPTR,A
                     515     ;               tgc_InAddr       = 0;
                     516                             ; SOURCE LINE # 111
0062 E4              517             CLR     A
0063 900000   F      518             MOV     DPTR,#tgc_InAddr
0066 F0              519             MOVX    @DPTR,A
                     520     ;       }
                     521                             ; SOURCE LINE # 112
0067                 522     ?C0004:
                     523     ;       tc_InAddr =tgc_InAddr;
                     524                             ; SOURCE LINE # 113
0067 900000   F      525             MOV     DPTR,#tgc_InAddr
006A E0              526             MOVX    A,@DPTR
006B 900000   F      527             MOV     DPTR,#tc_InAddr?243
006E F0              528             MOVX    @DPTR,A
                     529     ;     DEVICE_REG[0x0F] = 0x00;     // CE0
                     530                             ; SOURCE LINE # 114
006F 90B40F          531             MOV     DPTR,#0B40FH
0072 E4              532             CLR     A
0073 F0              533             MOVX    @DPTR,A
                     534     ;     Device_Read_SRAM_Index.WD = 0x6000;
                     535                             ; SOURCE LINE # 115
                     536     ;     u_FBlock.WD = Bank_Block_B[tc_bank_block];
                     537                             ; SOURCE LINE # 116
0074 120000   F      538             LCALL   L?0038
0077 2400     F      539             ADD     A,#LOW (Bank_Block_B)
0079 F582            540             MOV     DPL,A
007B E4              541             CLR     A
007C 3400     F      542             ADDC    A,#HIGH (Bank_Block_B)
007E 120000   F      543             LCALL   L?0039
                     544     ; //    dbprintf("%bx ", gc_bank_number);
                     545     ;     if(FLASH_MultRead_DRAM(0, tc_FPage, u_FBlock.BY[1], u_FBlock.BY[0], SECTORS_PER_BANK-
                             8))
                     546                             ; SOURCE LINE # 118
0081 C200     F      547             CLR     ?FLASH_MultRead_DRAM?BIT
0083 120000   F      548             LCALL   L?0035
0086 502D            549             JNC     ?C0007
                     550     ;       {
                     551                             ; SOURCE LINE # 119
                     552     ; //            dbprintf("BankFail:%bx\n",gc_bank_number);
                     553     ;               gbt_Code_NeedRecover=1;
                     554                             ; SOURCE LINE # 121
0088 D200     F      555             SETB    gbt_Code_NeedRecover
                     556     ;       tgc_InAddr=tc_InAddr;
                     557                             ; SOURCE LINE # 122
008A 900000   F      558             MOV     DPTR,#tc_InAddr?243
008D E0              559             MOVX    A,@DPTR
008E 900000   F      560             MOV     DPTR,#tgc_InAddr
0091 F0              561             MOVX    @DPTR,A
                     562     ;       Device_Read_SRAM_Index.WD = 0x6000;
                     563                             ; SOURCE LINE # 123
                     564     ;         u_FBlock.WD = Bank_Block_A[tc_bank_block];
                     565                             ; SOURCE LINE # 124
0092 120000   F      566             LCALL   L?0038
0095 2400     F      567             ADD     A,#LOW (Bank_Block_A)
0097 F582            568             MOV     DPL,A
0099 E4              569             CLR     A
009A 3400     F      570             ADDC    A,#HIGH (Bank_Block_A)
009C 120000   F      571             LCALL   L?0039
                     572     ;               if (FLASH_MultRead_DRAM(1, tc_FPage, u_FBlock.BY[1], u_FBlock.BY[0], SECTOR
                             S_PER_BANK-8))
                     573                             ; SOURCE LINE # 125
A51 MACRO ASSEMBLER  L51_BANKINGLOADER                                                    03/02/2011 09:21:39 PAGE    10

009F D200     F      574             SETB    ?FLASH_MultRead_DRAM?BIT
00A1 120000   F      575             LCALL   L?0035
00A4 500F            576             JNC     ?C0007
                     577     ;               {
                     578                             ; SOURCE LINE # 126
                     579     ;                       GLOBAL_REG[0x91] &= ~0x01;      // turn off LDO
                     580                             ; SOURCE LINE # 127
00A6 90B091          581             MOV     DPTR,#0B091H
00A9 E0              582             MOVX    A,@DPTR
00AA 54FE            583             ANL     A,#0FEH
00AC F0              584             MOVX    @DPTR,A
                     585     ;                       CPU_REG[0x20] = 1;      // select internal boot ROM.
                     586                             ; SOURCE LINE # 128
00AD 90B120          587             MOV     DPTR,#0B120H
00B0 7401            588             MOV     A,#01H
00B2 F0              589             MOVX    @DPTR,A
                     590     ;                       CPU_REG[0x21] = 1;      // reset MCU
                     591                             ; SOURCE LINE # 129
00B3 A3              592             INC     DPTR
00B4 F0              593             MOVX    @DPTR,A
                     594     ;               }
                     595                             ; SOURCE LINE # 130
                     596     ;       }
                     597                             ; SOURCE LINE # 131
                     598     ; }
                     599                             ; SOURCE LINE # 132
00B5                 600     ?C0007:
00B5 D0D0            601             POP     PSW
00B7 22              602             RET     
00B8                 603     L?0035:
00B8 900000   F      604             MOV     DPTR,#tc_FPage?242
00BB E0              605             MOVX    A,@DPTR
00BC 900000   F      606             MOV     DPTR,#?FLASH_MultRead_DRAM?BYTE
00BF F0              607             MOVX    @DPTR,A
00C0 900000   F      608             MOV     DPTR,#u_FBlock?244+01H
00C3 E0              609             MOVX    A,@DPTR
00C4 900000   F      610             MOV     DPTR,#?FLASH_MultRead_DRAM?BYTE+01H
00C7 F0              611             MOVX    @DPTR,A
00C8 900000   F      612             MOV     DPTR,#u_FBlock?244
00CB E0              613             MOVX    A,@DPTR
00CC 900000   F      614             MOV     DPTR,#?FLASH_MultRead_DRAM?BYTE+02H
00CF F0              615             MOVX    @DPTR,A
00D0 A3              616             INC     DPTR
00D1 7418            617             MOV     A,#018H
00D3 F0              618             MOVX    @DPTR,A
00D4 120000   F      619             LCALL   FLASH_MultRead_DRAM
00D7 22              620             RET     
                     621     ; END OF load_nand_bank
                     622     
                     623     ; 
                     624     ; 
                     625     ; /*********************************************************************************
                     626     ; * NAME:                    bit  FLASH_MultRead_DRAM(void)
                     627     ; * DESCRIPTION:
                     628     ; *   If ECC is Uncorrectable, return TRUE; else return FALSE. 
                     629     ; *********************************************************************************/
                     630     ; bit FLASH_MultRead_DRAM(bit tbt_Backup, U8 tc_FPage, UBYTE tc_Block1, UBYTE tc_Block0, UB
                             YTE tc_PageNum)
                     631     
----                 632             RSEG  ?PR?FLASH_MultRead_DRAM?L51_BANKINGLOADER
0000                 633     FLASH_MultRead_DRAM:
                     634             USING   0
                     635                             ; SOURCE LINE # 140
                     636     ; {
                     637                             ; SOURCE LINE # 141
                     638     ;       bit     tbt_DoSendCommand=FALSE;
A51 MACRO ASSEMBLER  L51_BANKINGLOADER                                                    03/02/2011 09:21:39 PAGE    11

                     639                             ; SOURCE LINE # 142
0000 C200     F      640             CLR     tbt_DoSendCommand?354
                     641     ;       union WORDDataType u_FBlock1;
                     642     ;       UBYTE tc_InAddr = 0, tc_FBank = 0,tc_InAddrMax;
                     643                             ; SOURCE LINE # 144
0002 E4              644             CLR     A
0003 900000   F      645             MOV     DPTR,#tc_InAddr?356
0006 F0              646             MOVX    @DPTR,A
0007 A3              647             INC     DPTR
0008 F0              648             MOVX    @DPTR,A
                     649     ; 
                     650     ;       tc_InAddrMax=gc_InAddrMax;
                     651                             ; SOURCE LINE # 146
0009 900000   F      652             MOV     DPTR,#gc_InAddrMax
000C E0              653             MOVX    A,@DPTR
000D 900000   F      654             MOV     DPTR,#tc_InAddrMax?358
0010 F0              655             MOVX    @DPTR,A
                     656     ;       tc_InAddr = tgc_InAddr;//0602 Jay add
                     657                             ; SOURCE LINE # 147
0011 900000   F      658             MOV     DPTR,#tgc_InAddr
0014 E0              659             MOVX    A,@DPTR
0015 900000   F      660             MOV     DPTR,#tc_InAddr?356
0018 F0              661             MOVX    @DPTR,A
                     662     ;       u_FBlock1.BY[1] = tc_Block1;
                     663                             ; SOURCE LINE # 148
0019 900000   F      664             MOV     DPTR,#tc_Block1?351
001C E0              665             MOVX    A,@DPTR
001D 900000   F      666             MOV     DPTR,#u_FBlock1?355+01H
0020 F0              667             MOVX    @DPTR,A
                     668     ;       u_FBlock1.BY[0] = tc_Block0;
                     669                             ; SOURCE LINE # 149
0021 900000   F      670             MOV     DPTR,#tc_Block0?352
0024 E0              671             MOVX    A,@DPTR
0025 900000   F      672             MOV     DPTR,#u_FBlock1?355
0028 F0              673             MOVX    @DPTR,A
                     674     ;       Reset_DMA();    
                     675                             ; SOURCE LINE # 150
0029 120000   F      676             LCALL   Reset_DMA
                     677     ;       Device_Xfer_DataLength.WD = 0x03FF;   
                     678                             ; SOURCE LINE # 151
002C 900000   F      679             MOV     DPTR,#Device_Xfer_DataLength
002F 7403            680             MOV     A,#03H
0031 F0              681             MOVX    @DPTR,A
0032 A3              682             INC     DPTR
0033 74FF            683             MOV     A,#0FFH
0035 F0              684             MOVX    @DPTR,A
                     685     ;       SET_DEVICE_READ_TO_DRAM();
                     686                             ; SOURCE LINE # 152
0036 120000   F      687             LCALL   SET_DEVICE_READ_TO_DRAM
                     688     ;       DEVICE_REG[0xA0] = 0x01;                                                           
                                          // Reset ECC  
                     689                             ; SOURCE LINE # 153
0039 90B4A0          690             MOV     DPTR,#0B4A0H
003C 7401            691             MOV     A,#01H
003E F0              692             MOVX    @DPTR,A
                     693     ;       FLASH_REG[0xA3]  = 0x01;                                                           
                                          // Enable ECC 
                     694                             ; SOURCE LINE # 154
003F 90B8A3          695             MOV     DPTR,#0B8A3H
0042 F0              696             MOVX    @DPTR,A
                     697     ;       FLASH_REG[0xA0]  = 0x00;                                                           
                                          // Disable Encode RS-Code
                     698                             ; SOURCE LINE # 155
0043 90B8A0          699             MOV     DPTR,#0B8A0H
0046 E4              700             CLR     A
0047 F0              701             MOVX    @DPTR,A
A51 MACRO ASSEMBLER  L51_BANKINGLOADER                                                    03/02/2011 09:21:39 PAGE    12

                     702     ;       FLASH_REG[0xA1]  = 0x01;                                                           
                                          // Start Decode RS-Code
                     703                             ; SOURCE LINE # 156
0048 A3              704             INC     DPTR
0049 04              705             INC     A
004A F0              706             MOVX    @DPTR,A
                     707     ;       FLASH_REG[0xA2] &= 0xF3;                                                           
                                          // Clear ECC fail register
                     708                             ; SOURCE LINE # 157
004B A3              709             INC     DPTR
004C E0              710             MOVX    A,@DPTR
004D 54F3            711             ANL     A,#0F3H
004F F0              712             MOVX    @DPTR,A
                     713     ;       FLASH_REG[0x06]  = 0x00;                                                           
                                          // cmd1
                     714                             ; SOURCE LINE # 158
                     715     ;       FLASH_REG[0x07]  = 0x30;                                                           
                                          // cmd2 
                     716                             ; SOURCE LINE # 159
                     717     ;       Banking_NAND_InAddr_To_Column_NAND(tc_InAddr);                          // set Colu
                             mn
                     718                             ; SOURCE LINE # 160
                     719     ;       Banking_NAND_FBlock_FPage_FBank_To_PhyAddr_NAND(tc_FPage, tc_FBank, u_FBlock1.BY[1]
                             , u_FBlock1.BY[0]); // set FBank Fblock Fpage        
                     720                             ; SOURCE LINE # 161
0050 120000   F      721             LCALL   L?0034
0053 120000   F      722             LCALL   _Banking_NAND_FBlock_FPage_FBank_To_PhyAddr_NAND
                     723     ;       CHK_Flash_Ready();
                     724                             ; SOURCE LINE # 162
0056 120000   F      725             LCALL   CHK_Flash_Ready
                     726     ;       FLASH_REG[0x04] = 0x01;                                                            
                                          // CMD0+ADDR+CMD1
                     727                             ; SOURCE LINE # 163
                     728     ;       TRIGGER_FLASH_CMD();
                     729                             ; SOURCE LINE # 164
                     730     ;       CHK_Flash_Ready();
                     731                             ; SOURCE LINE # 165
0059 120000   F      732             LCALL   L?0040
                     733     ;       FLASH_REG[0x1A] = 0x10;
                     734                             ; SOURCE LINE # 166
005C 90B81A          735             MOV     DPTR,#0B81AH
005F 7410            736             MOV     A,#010H
0061 F0              737             MOVX    @DPTR,A
0062                 738     ?C0008:
                     739     ;       while(tc_PageNum){
                     740                             ; SOURCE LINE # 167
0062 900000   F      741             MOV     DPTR,#tc_PageNum?353
0065 E0              742             MOVX    A,@DPTR
0066 7003            743             JNZ     $ + 5H
0068 020000   F      744             LJMP    ?C0009
                     745     ;         if(tbt_DoSendCommand ){
                     746                             ; SOURCE LINE # 168
006B 30000B   F      747             JNB     tbt_DoSendCommand?354,?C0010
                     748     ;             FLASH_REG[0x06]  = 0x00;                                                  // 
                             cmd1
                     749                             ; SOURCE LINE # 169
                     750     ;               FLASH_REG[0x07]  = 0x30;                                                   
                                  // cmd2 
                     751                             ; SOURCE LINE # 170
                     752     ;               Banking_NAND_InAddr_To_Column_NAND(tc_InAddr);          // set Column
                     753                             ; SOURCE LINE # 171
                     754     ;               Banking_NAND_FBlock_FPage_FBank_To_PhyAddr_NAND(tc_FPage, tc_FBank, u_FBloc
                             k1.BY[1], u_FBlock1.BY[0]); // set FBank Fblock Fpage
                     755                             ; SOURCE LINE # 172
006E 120000   F      756             LCALL   L?0034
0071 120000   F      757             LCALL   _Banking_NAND_FBlock_FPage_FBank_To_PhyAddr_NAND
A51 MACRO ASSEMBLER  L51_BANKINGLOADER                                                    03/02/2011 09:21:39 PAGE    13

                     758     ;               FLASH_REG[0x04] = 0x01;                                                    
                                  // CMD0+ADDR+CMD1
                     759                             ; SOURCE LINE # 173
                     760     ;               TRIGGER_FLASH_CMD(); 
                     761                             ; SOURCE LINE # 174
                     762     ;               CHK_Flash_Ready();
                     763                             ; SOURCE LINE # 175
0074 120000   F      764             LCALL   L?0040
                     765     ;               tbt_DoSendCommand= 0;
                     766                             ; SOURCE LINE # 176
0077 C200     F      767             CLR     tbt_DoSendCommand?354
                     768     ;         }                 
                     769                             ; SOURCE LINE # 177
0079                 770     ?C0010:
                     771     ;         FLASH_REG[0xA1]  = 0x01;                                                         
                                  // Start Decode RS-Code
                     772                             ; SOURCE LINE # 178
0079 90B8A1          773             MOV     DPTR,#0B8A1H
007C 7401            774             MOV     A,#01H
007E F0              775             MOVX    @DPTR,A
                     776     ;           FLASH_REG[0xA2] &= 0xF3;
                     777                             ; SOURCE LINE # 179
007F A3              778             INC     DPTR
0080 E0              779             MOVX    A,@DPTR
0081 54F3            780             ANL     A,#0F3H
0083 F0              781             MOVX    @DPTR,A
                     782     ;         FLASH_REG[0x1A]       = 0x10; 
                     783                             ; SOURCE LINE # 180
0084 90B81A          784             MOV     DPTR,#0B81AH
0087 7410            785             MOV     A,#010H
0089 F0              786             MOVX    @DPTR,A
                     787     ;         if((tc_InAddr==(tc_InAddrMax-2))||(tc_PageNum==0x02)){
                     788                             ; SOURCE LINE # 181
008A 900000   F      789             MOV     DPTR,#tc_InAddrMax?358
008D E0              790             MOVX    A,@DPTR
008E 24FE            791             ADD     A,#0FEH
0090 FF              792             MOV     R7,A
0091 900000   F      793             MOV     DPTR,#tc_InAddr?356
0094 E0              794             MOVX    A,@DPTR
0095 6F              795             XRL     A,R7
0096 6007            796             JZ      ?C0012
0098 900000   F      797             MOV     DPTR,#tc_PageNum?353
009B E0              798             MOVX    A,@DPTR
009C B40206          799             CJNE    A,#02H,?C0011
009F                 800     ?C0012:
                     801     ;               FLASH_REG[0x1A] = 0x11;                                                    
                                  // last frag = 1
                     802                             ; SOURCE LINE # 182
009F 90B81A          803             MOV     DPTR,#0B81AH
00A2 7411            804             MOV     A,#011H
00A4 F0              805             MOVX    @DPTR,A
                     806     ;           }        
                     807                             ; SOURCE LINE # 183
00A5                 808     ?C0011:
                     809     ;         Trigger_Data_Transfer();        
                     810                             ; SOURCE LINE # 184
00A5 120000   F      811             LCALL   Trigger_Data_Transfer
                     812     ;               Device_Read_SRAM_Index.BY[0] += 0x04 ;                                  // 
                             080411 Joyce add for auotcount function fail
                     813                             ; SOURCE LINE # 185
00A8 900000   F      814             MOV     DPTR,#Device_Read_SRAM_Index
00AB E0              815             MOVX    A,@DPTR
00AC 2404            816             ADD     A,#04H
00AE F0              817             MOVX    @DPTR,A
                     818     ;               Device_Read_SRAM_Index.BY[1]  = 0x00 ;                                  // 
                             080411 Joyce add for auotcount function fail          
A51 MACRO ASSEMBLER  L51_BANKINGLOADER                                                    03/02/2011 09:21:39 PAGE    14

                     819                             ; SOURCE LINE # 186
00AF E4              820             CLR     A
00B0 A3              821             INC     DPTR
00B1 F0              822             MOVX    @DPTR,A
                     823     ;        
                     824     ;         tc_InAddr+=2;
                     825                             ; SOURCE LINE # 188
00B2 900000   F      826             MOV     DPTR,#tc_InAddr?356
00B5 E0              827             MOVX    A,@DPTR
00B6 2402            828             ADD     A,#02H
00B8 F0              829             MOVX    @DPTR,A
                     830     ;         if(tc_InAddr==tc_InAddrMax){
                     831                             ; SOURCE LINE # 189
00B9 900000   F      832             MOV     DPTR,#tc_InAddrMax?358
00BC E0              833             MOVX    A,@DPTR
00BD FF              834             MOV     R7,A
00BE 900000   F      835             MOV     DPTR,#tc_InAddr?356
00C1 E0              836             MOVX    A,@DPTR
00C2 6F              837             XRL     A,R7
00C3 7050            838             JNZ     ?C0013
                     839     ;             tbt_DoSendCommand = TRUE;
                     840                             ; SOURCE LINE # 190
00C5 D200     F      841             SETB    tbt_DoSendCommand?354
                     842     ;             tc_InAddr = 0x00;
                     843                             ; SOURCE LINE # 191
00C7 F0              844             MOVX    @DPTR,A
                     845     ;             tc_FPage++;
                     846                             ; SOURCE LINE # 192
00C8 900000   F      847             MOV     DPTR,#tc_FPage?350
00CB E0              848             MOVX    A,@DPTR
00CC 04              849             INC     A
00CD F0              850             MOVX    @DPTR,A
                     851     ;             if(tc_FPage==gw_PagesPerBlock){
                     852                             ; SOURCE LINE # 193
00CE E0              853             MOVX    A,@DPTR
00CF FF              854             MOV     R7,A
00D0 900000   F      855             MOV     DPTR,#gw_PagesPerBlock
00D3 E0              856             MOVX    A,@DPTR
00D4 7003            857             JNZ     ?C0031
00D6 A3              858             INC     DPTR
00D7 E0              859             MOVX    A,@DPTR
00D8 6F              860             XRL     A,R7
00D9                 861     ?C0031:
00D9 703A            862             JNZ     ?C0013
                     863     ;                 tc_FPage = 0x00;
                     864                             ; SOURCE LINE # 194
00DB 900000   F      865             MOV     DPTR,#tc_FPage?350
00DE F0              866             MOVX    @DPTR,A
                     867     ;                 tc_FBank++;
                     868                             ; SOURCE LINE # 195
00DF 900000   F      869             MOV     DPTR,#tc_FBank?357
00E2 E0              870             MOVX    A,@DPTR
00E3 04              871             INC     A
00E4 F0              872             MOVX    @DPTR,A
                     873     ;                 gc_Flash_Data++;
                     874                             ; SOURCE LINE # 196
00E5 900000   F      875             MOV     DPTR,#gc_Flash_Data
00E8 E0              876             MOVX    A,@DPTR
00E9 04              877             INC     A
00EA F0              878             MOVX    @DPTR,A
                     879     ;                 //if(tc_FBank==gc_BanksPerDevice){
                     880     ;                 //    tc_FBank =0x00;
                     881     ;                 //}
                     882     ;                 if(tbt_Backup){
                     883                             ; SOURCE LINE # 200
00EB 30000C   F      884             JNB     tbt_Backup?349,?C0015
A51 MACRO ASSEMBLER  L51_BANKINGLOADER                                                    03/02/2011 09:21:39 PAGE    15

                     885     ;                     u_FBlock1.WD = Bank_Block_A[gc_Flash_Data];
                     886                             ; SOURCE LINE # 201
00EE E0              887             MOVX    A,@DPTR
00EF 25E0            888             ADD     A,ACC
00F1 2400     F      889             ADD     A,#LOW (Bank_Block_A)
00F3 F582            890             MOV     DPL,A
00F5 E4              891             CLR     A
00F6 3400     F      892             ADDC    A,#HIGH (Bank_Block_A)
                     893     ;                 }
                     894                             ; SOURCE LINE # 202
00F8 800D            895             SJMP    ?C0032
00FA                 896     ?C0015:
                     897     ;                 else{
                     898                             ; SOURCE LINE # 203
                     899     ;                     u_FBlock1.WD = Bank_Block_B[gc_Flash_Data]; 
                     900                             ; SOURCE LINE # 204
00FA 900000   F      901             MOV     DPTR,#gc_Flash_Data
00FD E0              902             MOVX    A,@DPTR
00FE 25E0            903             ADD     A,ACC
0100 2400     F      904             ADD     A,#LOW (Bank_Block_B)
0102 F582            905             MOV     DPL,A
0104 E4              906             CLR     A
0105 3400     F      907             ADDC    A,#HIGH (Bank_Block_B)
0107                 908     ?C0032:
0107 F583            909             MOV     DPH,A
0109 E0              910             MOVX    A,@DPTR
010A FF              911             MOV     R7,A
010B A3              912             INC     DPTR
010C E0              913             MOVX    A,@DPTR
010D 900000   F      914             MOV     DPTR,#u_FBlock1?355
0110 CF              915             XCH     A,R7
0111 F0              916             MOVX    @DPTR,A
0112 A3              917             INC     DPTR
0113 EF              918             MOV     A,R7
0114 F0              919             MOVX    @DPTR,A
                     920     ;                 }
                     921                             ; SOURCE LINE # 205
                     922     ;             }
                     923                             ; SOURCE LINE # 206
                     924     ;         }
                     925                             ; SOURCE LINE # 207
0115                 926     ?C0013:
                     927     ;         CHK_Data_Transfer_Done();
                     928                             ; SOURCE LINE # 208
0115 120000   F      929             LCALL   CHK_Data_Transfer_Done
                     930     ;         if(CHK_ECC_Done()){
                     931                             ; SOURCE LINE # 209
0118 120000   F      932             LCALL   CHK_ECC_Done
011B 500B            933             JNC     ?C0017
                     934     ; //                    dbprintf("\nECC-PN:%bx %bx ",tc_PageNum,tc_FPage);
                     935     ;             if(!tbt_Backup){
                     936                             ; SOURCE LINE # 211
011D 200008   F      937             JB      tbt_Backup?349,?C0017
                     938     ;                DEVICE_REG[0x00] |=0x10;                                                  
                                  // reset nand module because un-complete flash read process
                     939                             ; SOURCE LINE # 212
0120 90B400          940             MOV     DPTR,#0B400H
0123 E0              941             MOVX    A,@DPTR
0124 4410            942             ORL     A,#010H
0126 F0              943             MOVX    @DPTR,A
                     944     ;                return 1;
                     945                             ; SOURCE LINE # 213
0127 22              946             RET     
                     947     ;             }
                     948                             ; SOURCE LINE # 214
                     949     ;           }
A51 MACRO ASSEMBLER  L51_BANKINGLOADER                                                    03/02/2011 09:21:39 PAGE    16

                     950                             ; SOURCE LINE # 215
0128                 951     ?C0017:
                     952     ;         CPU_REG[0x19] = Device_Read_SRAM_Index.BY[0];                 // 080411 Joyce add
                              for auotcount function fail
                     953                             ; SOURCE LINE # 216
0128 900000   F      954             MOV     DPTR,#Device_Read_SRAM_Index
012B E0              955             MOVX    A,@DPTR
012C 90B119          956             MOV     DPTR,#0B119H
012F F0              957             MOVX    @DPTR,A
                     958     ;               CPU_REG[0x18] = Device_Read_SRAM_Index.BY[1];                   // 080411 J
                             oyce add for auotcount function fail 
                     959                             ; SOURCE LINE # 217
0130 900000   F      960             MOV     DPTR,#Device_Read_SRAM_Index+01H
0133 E0              961             MOVX    A,@DPTR
0134 90B118          962             MOV     DPTR,#0B118H
0137 F0              963             MOVX    @DPTR,A
                     964     ;         tc_PageNum -=2; 
                     965                             ; SOURCE LINE # 218
0138 900000   F      966             MOV     DPTR,#tc_PageNum?353
013B E0              967             MOVX    A,@DPTR
013C 24FE            968             ADD     A,#0FEH
013E F0              969             MOVX    @DPTR,A
                     970     ;     }
                     971                             ; SOURCE LINE # 219
013F 020000   F      972             LJMP    ?C0008
0142                 973     ?C0009:
                     974     ;     CHK_NandAutocmp_Done();
                     975                             ; SOURCE LINE # 220
0142 120000   F      976             LCALL   CHK_NandAutocmp_Done
                     977     ;       FLASH_REG[0xA1] = 0x00;
                     978                             ; SOURCE LINE # 221
0145 90B8A1          979             MOV     DPTR,#0B8A1H
0148 E4              980             CLR     A
0149 F0              981             MOVX    @DPTR,A
                     982     ;       return 0;           
                     983                             ; SOURCE LINE # 222
014A C3              984             CLR     C
                     985     ; } 
                     986                             ; SOURCE LINE # 223
014B                 987     ?C0019:
014B 22              988             RET     
014C                 989     L?0034:
014C 90B806          990             MOV     DPTR,#0B806H
014F E4              991             CLR     A
0150 F0              992             MOVX    @DPTR,A
0151 A3              993             INC     DPTR
0152 7430            994             MOV     A,#030H
0154 F0              995             MOVX    @DPTR,A
0155 900000   F      996             MOV     DPTR,#tc_InAddr?356
0158 E0              997             MOVX    A,@DPTR
0159 FF              998             MOV     R7,A
015A 120000   F      999             LCALL   _Banking_NAND_InAddr_To_Column_NAND
015D 900000   F     1000             MOV     DPTR,#tc_FPage?350
0160 E0             1001             MOVX    A,@DPTR
0161 FF             1002             MOV     R7,A
0162 900000   F     1003             MOV     DPTR,#tc_FBank?357
0165 E0             1004             MOVX    A,@DPTR
0166 FD             1005             MOV     R5,A
0167 900000   F     1006             MOV     DPTR,#u_FBlock1?355+01H
016A E0             1007             MOVX    A,@DPTR
016B FB             1008             MOV     R3,A
016C 900000   F     1009             MOV     DPTR,#u_FBlock1?355
016F E0             1010             MOVX    A,@DPTR
0170 900000   F     1011             MOV     DPTR,#?_Banking_NAND_FBlock_FPage_FBank_To_PhyAddr_NAND?BYTE+03H
0173 F0             1012             MOVX    @DPTR,A
0174 22             1013             RET     
A51 MACRO ASSEMBLER  L51_BANKINGLOADER                                                    03/02/2011 09:21:39 PAGE    17

0175                1014     L?0040:
0175 90B804         1015             MOV     DPTR,#0B804H
0178 7401           1016             MOV     A,#01H
017A F0             1017             MOVX    @DPTR,A
017B 120000   F     1018             LCALL   TRIGGER_FLASH_CMD
017E 120000   F     1019             LCALL   CHK_Flash_Ready
0181 22             1020             RET     
                    1021     ; END OF FLASH_MultRead_DRAM
                    1022     
                    1023     ; 
                    1024     ; /*********************************************************************************
                    1025     ; * NAME:                    Banking_NAND_InAddr_To_Column_NAND(UBYTE tc_InAddr)
                    1026     ; * DESCRIPTION:
                    1027     ; *********************************************************************************/
                    1028     ; void Banking_NAND_InAddr_To_Column_NAND(UBYTE tc_InAddr) {
                    1029     
----                1030             RSEG  ?PR?_Banking_NAND_InAddr_To_Column_NAND?L51_BANKINGLOADER
0000                1031     _Banking_NAND_InAddr_To_Column_NAND:
                    1032             USING   0
                    1033                             ; SOURCE LINE # 229
                    1034     ;---- Variable 'tc_InAddr?459' assigned to Register 'R7' ----
                    1035     ;       
                    1036     ;       unionWORD tw_FColAddr;
                    1037     ;     if((FLASH_REG[0xA5]&0x03)==0x02){ //24bit
                    1038                             ; SOURCE LINE # 232
0000 90B8A5         1039             MOV     DPTR,#0B8A5H
0003 E0             1040             MOVX    A,@DPTR
0004 5403           1041             ANL     A,#03H
0006 FE             1042             MOV     R6,A
0007 EF             1043             MOV     A,R7
0008 BE020B         1044             CJNE    R6,#02H,?C0020
                    1045     ;         tw_FColAddr.WD =  (U16)(tc_InAddr>>1)*1070;//(1024+46)        
                    1046                             ; SOURCE LINE # 233
000B C3             1047             CLR     C
000C 13             1048             RRC     A
000D FF             1049             MOV     R7,A
000E 7E00           1050             MOV     R6,#00H
0010 7C04           1051             MOV     R4,#04H
0012 7D2E           1052             MOV     R5,#02EH
                    1053     ;     }
                    1054                             ; SOURCE LINE # 234
0014 8009           1055             SJMP    ?C0033
0016                1056     ?C0020:
                    1057     ;     else{                             //16bit
                    1058                             ; SOURCE LINE # 235
                    1059     ;        tw_FColAddr.WD =  (U16)(tc_InAddr>>1)*1056;//(1024+32)
                    1060                             ; SOURCE LINE # 236
0016 C3             1061             CLR     C
0017 13             1062             RRC     A
0018 FF             1063             MOV     R7,A
0019 7E00           1064             MOV     R6,#00H
001B 7C04           1065             MOV     R4,#04H
001D 7D20           1066             MOV     R5,#020H
001F                1067     ?C0033:
001F 120000   F     1068             LCALL   ?C?IMUL
0022 900000   F     1069             MOV     DPTR,#tw_FColAddr?460
0025 EE             1070             MOV     A,R6
0026 F0             1071             MOVX    @DPTR,A
0027 A3             1072             INC     DPTR
0028 EF             1073             MOV     A,R7
0029 F0             1074             MOVX    @DPTR,A
                    1075     ;     }   
                    1076                             ; SOURCE LINE # 237
002A                1077     ?C0021:
                    1078     ;       FLASH_REG[0x0C] = tw_FColAddr.BY[1];
                    1079                             ; SOURCE LINE # 238
A51 MACRO ASSEMBLER  L51_BANKINGLOADER                                                    03/02/2011 09:21:39 PAGE    18

002A 900000   F     1080             MOV     DPTR,#tw_FColAddr?460+01H
002D E0             1081             MOVX    A,@DPTR
002E 90B80C         1082             MOV     DPTR,#0B80CH
0031 F0             1083             MOVX    @DPTR,A
                    1084     ;       FLASH_REG[0x0B] = tw_FColAddr.BY[0]; 
                    1085                             ; SOURCE LINE # 239
0032 900000   F     1086             MOV     DPTR,#tw_FColAddr?460
0035 E0             1087             MOVX    A,@DPTR
0036 90B80B         1088             MOV     DPTR,#0B80BH
0039 F0             1089             MOVX    @DPTR,A
                    1090     ;       
                    1091     ;       
                    1092     ;       
                    1093     ;       
                    1094     ;       
                    1095     ; }
                    1096                             ; SOURCE LINE # 245
003A 22             1097             RET     
                    1098     ; END OF _Banking_NAND_InAddr_To_Column_NAND
                    1099     
                    1100     ; 
                    1101     ; /****************************************************************************************
                             *************************************
                    1102     ; * NAME: Banking_NAND_FBlock_FPage_FBank_To_PhyAddr_NAND(UBYTE tc_FPage, UBYTE tc_FBank, U
                             BYTE tc_Block1, UBYTE tc_Block0)
                    1103     ; * DESCRIPTION:
                    1104     ; *****************************************************************************************
                             **************************************/
                    1105     ; void Banking_NAND_FBlock_FPage_FBank_To_PhyAddr_NAND(UBYTE tc_FPage, UBYTE tc_FBank, UBYT
                             E tc_Block1, UBYTE tc_Block0) {
                    1106     
----                1107             RSEG  ?PR?_Banking_NAND_FBlock_FPage_FBank_To_PhyAddr_NAND?L51_BANKINGLOADER
0000                1108     _Banking_NAND_FBlock_FPage_FBank_To_PhyAddr_NAND:
                    1109             USING   0
                    1110                             ; SOURCE LINE # 251
                    1111     ;---- Variable 'tc_FPage?561' assigned to Register 'R7' ----
                    1112     ;---- Variable 'tc_Block1?563' assigned to Register 'R3' ----
                    1113     ;---- Variable 'tc_FBank?562' assigned to Register 'R5' ----
                    1114     ;       U8 tc_FMAP;
                    1115     ;       tc_FBank=0;
                    1116                             ; SOURCE LINE # 253
0000 E4             1117             CLR     A
                    1118     ;       DEVICE_REG[0x0F] =0x00;   
                    1119                             ; SOURCE LINE # 254
0001 90B40F         1120             MOV     DPTR,#0B40FH
0004 F0             1121             MOVX    @DPTR,A
                    1122     ;       if(NAND_INFO.cFMAP&0xF0){// By MCU 
                    1123                             ; SOURCE LINE # 255
0005 900000   F     1124             MOV     DPTR,#NAND_INFO+07H
0008 E0             1125             MOVX    A,@DPTR
0009 54F0           1126             ANL     A,#0F0H
000B 600B           1127             JZ      ?C0023
                    1128     ;       tc_FMAP = (NAND_INFO.cFMAP&0xF0)>>4;
                    1129                             ; SOURCE LINE # 256
000D C4             1130             SWAP    A
000E 540F           1131             ANL     A,#0FH
                    1132     ;---- Variable 'tc_FMAP?565' assigned to Register 'R6' ----
                    1133     ;       switch(tc_FMAP){
                    1134                             ; SOURCE LINE # 257
0010 14             1135             DEC     A
0011 700D           1136             JNZ     ?C0027
                    1137     ;               case 1:         // 256 page  block 
                    1138                             ; SOURCE LINE # 258
0013                1139     ?C0025:
                    1140     ;                       FLASH_REG[0x0A]= tc_FPage;  
                    1141                             ; SOURCE LINE # 259
A51 MACRO ASSEMBLER  L51_BANKINGLOADER                                                    03/02/2011 09:21:39 PAGE    19

                    1142     ;                       FLASH_REG[0x09]= tc_Block1;
                    1143                             ; SOURCE LINE # 260
                    1144     ;                       FLASH_REG[0x08]= tc_Block0;                     
                    1145                             ; SOURCE LINE # 261
0013 120000   F     1146             LCALL   L?0037
                    1147     ;                               break;
                    1148                             ; SOURCE LINE # 262
0016 8008           1149             SJMP    ?C0027
                    1150     ;                       default: 
                    1151                             ; SOURCE LINE # 263
                    1152     ;                               break;
                    1153                             ; SOURCE LINE # 264
                    1154     ;               }                     
                    1155                             ; SOURCE LINE # 265
                    1156     ;     }
                    1157                             ; SOURCE LINE # 266
0018                1158     ?C0023:
                    1159     ;     else{                             // by HW        
                    1160                             ; SOURCE LINE # 267
                    1161     ;       FLASH_REG[0x0A] = tc_FPage;                                             // FPage
                    1162                             ; SOURCE LINE # 268
                    1163     ;           FLASH_REG[0x09] = tc_Block1;                                      // FBlock_L 
                    1164                             ; SOURCE LINE # 269
                    1165     ;           FLASH_REG[0x08] = tc_Block0;                                      // FBlock_H
                    1166                             ; SOURCE LINE # 270
0018 120000   F     1167             LCALL   L?0037
                    1168     ;               FLASH_REG[0x1C] = 0;                                             // FBank  
                    1169                             ; SOURCE LINE # 271
001B 90B81C         1170             MOV     DPTR,#0B81CH
001E E4             1171             CLR     A
001F F0             1172             MOVX    @DPTR,A
                    1173     ;       }
                    1174                             ; SOURCE LINE # 272
0020                1175     ?C0027:
                    1176     ;       if(NAND_INFO.cADDR_CYCLE==0x04){        // 4 cycle addr
                    1177                             ; SOURCE LINE # 273
0020 900000   F     1178             MOV     DPTR,#NAND_INFO+08H
0023 E0             1179             MOVX    A,@DPTR
0024 90B801         1180             MOV     DPTR,#0B801H
0027 B40404         1181             CJNE    A,#04H,?C0028
                    1182     ;               FLASH_REG[0x01] = 0x30|0x01;
                    1183                             ; SOURCE LINE # 274
002A 7431           1184             MOV     A,#031H
002C F0             1185             MOVX    @DPTR,A
                    1186     ;       }
                    1187                             ; SOURCE LINE # 275
002D 22             1188             RET     
002E                1189     ?C0028:
                    1190     ;       else{
                    1191                             ; SOURCE LINE # 276
                    1192     ;               FLASH_REG[0x01] = (0x40|0x01);  // 5 cycle addr
                    1193                             ; SOURCE LINE # 277
002E 7441           1194             MOV     A,#041H
0030 F0             1195             MOVX    @DPTR,A
                    1196     ;       }         
                    1197                             ; SOURCE LINE # 278
                    1198     ;       
                    1199     ; 
                    1200     ; }
                    1201                             ; SOURCE LINE # 281
0031                1202     ?C0030:
0031 22             1203             RET     
                    1204     ; END OF _Banking_NAND_FBlock_FPage_FBank_To_PhyAddr_NAND
                    1205     
                    1206             END
A51 MACRO ASSEMBLER  L51_BANKINGLOADER                                                    03/02/2011 09:21:39 PAGE    20

SYMBOL TABLE LISTING
------ ----- -------


N A M E                                    T Y P E  V A L U E   ATTRIBUTES

?BI?FLASH_MULTREAD_DRAM?L51_BANKINGLOADER  B SEG    0002H       REL=UNIT
?C0003. . . . . . . . . . . . . . . . .    C ADDR   0045H   R   SEG=?PR?LOAD_NAND_BANK?L51_BANKINGLOADER
?C0004. . . . . . . . . . . . . . . . .    C ADDR   0067H   R   SEG=?PR?LOAD_NAND_BANK?L51_BANKINGLOADER
?C0007. . . . . . . . . . . . . . . . .    C ADDR   00B5H   R   SEG=?PR?LOAD_NAND_BANK?L51_BANKINGLOADER
?C0008. . . . . . . . . . . . . . . . .    C ADDR   0062H   R   SEG=?PR?FLASH_MULTREAD_DRAM?L51_BANKINGLOADER
?C0009. . . . . . . . . . . . . . . . .    C ADDR   0142H   R   SEG=?PR?FLASH_MULTREAD_DRAM?L51_BANKINGLOADER
?C0010. . . . . . . . . . . . . . . . .    C ADDR   0079H   R   SEG=?PR?FLASH_MULTREAD_DRAM?L51_BANKINGLOADER
?C0011. . . . . . . . . . . . . . . . .    C ADDR   00A5H   R   SEG=?PR?FLASH_MULTREAD_DRAM?L51_BANKINGLOADER
?C0012. . . . . . . . . . . . . . . . .    C ADDR   009FH   R   SEG=?PR?FLASH_MULTREAD_DRAM?L51_BANKINGLOADER
?C0013. . . . . . . . . . . . . . . . .    C ADDR   0115H   R   SEG=?PR?FLASH_MULTREAD_DRAM?L51_BANKINGLOADER
?C0015. . . . . . . . . . . . . . . . .    C ADDR   00FAH   R   SEG=?PR?FLASH_MULTREAD_DRAM?L51_BANKINGLOADER
?C0017. . . . . . . . . . . . . . . . .    C ADDR   0128H   R   SEG=?PR?FLASH_MULTREAD_DRAM?L51_BANKINGLOADER
?C0019. . . . . . . . . . . . . . . . .    C ADDR   014BH   R   SEG=?PR?FLASH_MULTREAD_DRAM?L51_BANKINGLOADER
?C0020. . . . . . . . . . . . . . . . .    C ADDR   0016H   R   SEG=?PR?_BANKING_NAND_INADDR_TO_COLUMN_NAND?L51_BANKINGL
                                         OADER
?C0021. . . . . . . . . . . . . . . . .    C ADDR   002AH   R   SEG=?PR?_BANKING_NAND_INADDR_TO_COLUMN_NAND?L51_BANKINGL
                                         OADER
?C0023. . . . . . . . . . . . . . . . .    C ADDR   0018H   R   SEG=?PR?_BANKING_NAND_FBLOCK_FPAGE_FBANK_TO_PHYADDR_NAND
                                         ?L51_BANKINGLOADER
?C0025. . . . . . . . . . . . . . . . .    C ADDR   0013H   R   SEG=?PR?_BANKING_NAND_FBLOCK_FPAGE_FBANK_TO_PHYADDR_NAND
                                         ?L51_BANKINGLOADER
?C0027. . . . . . . . . . . . . . . . .    C ADDR   0020H   R   SEG=?PR?_BANKING_NAND_FBLOCK_FPAGE_FBANK_TO_PHYADDR_NAND
                                         ?L51_BANKINGLOADER
?C0028. . . . . . . . . . . . . . . . .    C ADDR   002EH   R   SEG=?PR?_BANKING_NAND_FBLOCK_FPAGE_FBANK_TO_PHYADDR_NAND
                                         ?L51_BANKINGLOADER
?C0030. . . . . . . . . . . . . . . . .    C ADDR   0031H   R   SEG=?PR?_BANKING_NAND_FBLOCK_FPAGE_FBANK_TO_PHYADDR_NAND
                                         ?L51_BANKINGLOADER
?C0031. . . . . . . . . . . . . . . . .    C ADDR   00D9H   R   SEG=?PR?FLASH_MULTREAD_DRAM?L51_BANKINGLOADER
?C0032. . . . . . . . . . . . . . . . .    C ADDR   0107H   R   SEG=?PR?FLASH_MULTREAD_DRAM?L51_BANKINGLOADER
?C0033. . . . . . . . . . . . . . . . .    C ADDR   001FH   R   SEG=?PR?_BANKING_NAND_INADDR_TO_COLUMN_NAND?L51_BANKINGL
                                         OADER
?C?IMUL . . . . . . . . . . . . . . . .    C ADDR   -----       EXT
?C?UIDIV. . . . . . . . . . . . . . . .    C ADDR   -----       EXT
?C_INITSEG. . . . . . . . . . . . . . .    C SEG    0003H       REL=UNIT
?DT?L51_BANKINGLOADER . . . . . . . . .    D SEG    0001H       REL=UNIT
?FLASH_MULTREAD_DRAM?BIT. . . . . . . .    B ADDR   0000H.0 R   SEG=?BI?FLASH_MULTREAD_DRAM?L51_BANKINGLOADER
?FLASH_MULTREAD_DRAM?BYTE . . . . . . .    X ADDR   0000H   R   SEG=?XD?FLASH_MULTREAD_DRAM?L51_BANKINGLOADER
?LOAD_NAND_BANK?BYTE. . . . . . . . . .    X ADDR   0000H   R   SEG=?XD?LOAD_NAND_BANK?L51_BANKINGLOADER
?PR?FLASH_MULTREAD_DRAM?L51_BANKINGLOADER  C SEG    0182H       REL=UNIT
?PR?L51_BANKINGLOADER . . . . . . . . .    C SEG    0032H       REL=UNIT
?PR?LOAD_NAND_BANK?L51_BANKINGLOADER. .    C SEG    00D8H       REL=UNIT
?PR?PERFORM_NAND_BANK_CALL?L51_BANKINGLOADEC SEG    002AH       REL=UNIT
?PR?RETURN_FROM_NAND_BANK?L51_BANKINGLOADERC SEG    001CH       REL=UNIT
?PR?_BANKING_NAND_FBLOCK_FPAGE_FBANK_TO_PHYC SEG AND0032HBANKINGREL=UNIT
?PR?_BANKING_NAND_INADDR_TO_COLUMN_NAND?L51C SEG NGL003BH       REL=UNIT
?XD?FLASH_MULTREAD_DRAM?L51_BANKINGLOADER  X SEG    0009H       REL=UNIT
?XD?L51_BANKINGLOADER . . . . . . . . .    X SEG    0001H       REL=UNIT
?XD?LOAD_NAND_BANK?L51_BANKINGLOADER. .    X SEG    0005H       REL=UNIT
?XD?_BANKING_NAND_FBLOCK_FPAGE_FBANK_TO_PHYX SEG AND0004HBANKINGREL=UNIT
?XD?_BANKING_NAND_INADDR_TO_COLUMN_NAND?L51X SEG NGL0002H       REL=UNIT
?_BANKING_NAND_FBLOCK_FPAGE_FBANK_TO_PHYADDX ADDR?BY0000H   R   SEG=?XD?_BANKING_NAND_FBLOCK_FPAGE_FBANK_TO_PHYADDR_NAND
                                         ?L51_BANKINGLOADER
?_BANKING_NAND_INADDR_TO_COLUMN_NAND?BYTE  X ADDR   0000H   R   SEG=?XD?_BANKING_NAND_INADDR_TO_COLUMN_NAND?L51_BANKINGL
                                         OADER
?_NEED_TO_LOAD_NAND_BANK. . . . . . . .    C ADDR   0008H   R   SEG=?PR?PERFORM_NAND_BANK_CALL?L51_BANKINGLOADER
?_RECOVER_NEED_LOAD_NAND. . . . . . . .    C ADDR   000CH   R   SEG=?PR?RETURN_FROM_NAND_BANK?L51_BANKINGLOADER
AC. . . . . . . . . . . . . . . . . . .    B ADDR   00D0H.6 A   
ACC . . . . . . . . . . . . . . . . . .    D ADDR   00E0H   A   
ACC0. . . . . . . . . . . . . . . . . .    B ADDR   00E0H.0 A   
ACC1. . . . . . . . . . . . . . . . . .    B ADDR   00E0H.1 A   
A51 MACRO ASSEMBLER  L51_BANKINGLOADER                                                    03/02/2011 09:21:39 PAGE    21

ACC2. . . . . . . . . . . . . . . . . .    B ADDR   00E0H.2 A   
ACC3. . . . . . . . . . . . . . . . . .    B ADDR   00E0H.3 A   
ACC4. . . . . . . . . . . . . . . . . .    B ADDR   00E0H.4 A   
ACC5. . . . . . . . . . . . . . . . . .    B ADDR   00E0H.5 A   
ACC6. . . . . . . . . . . . . . . . . .    B ADDR   00E0H.6 A   
ACC7. . . . . . . . . . . . . . . . . .    B ADDR   00E0H.7 A   
B . . . . . . . . . . . . . . . . . . .    D ADDR   00F0H   A   
BANK_BLOCK_A. . . . . . . . . . . . . .    X ADDR   -----       EXT
BANK_BLOCK_B. . . . . . . . . . . . . .    X ADDR   -----       EXT
CHK_DATA_TRANSFER_DONE. . . . . . . . .    C ADDR   -----       EXT
CHK_ECC_DONE. . . . . . . . . . . . . .    C ADDR   -----       EXT
CHK_FLASH_READY . . . . . . . . . . . .    C ADDR   -----       EXT
CHK_NANDAUTOCMP_DONE. . . . . . . . . .    C ADDR   -----       EXT
CKCON . . . . . . . . . . . . . . . . .    D ADDR   008EH   A   
COLOR_R . . . . . . . . . . . . . . . .    B ADDR   00B0H.0 A   
COM0024 . . . . . . . . . . . . . . . .    C ADDR   0000H   R   SEG=?PR?L51_BANKINGLOADER
CP_RL2. . . . . . . . . . . . . . . . .    B ADDR   00C8H.0 A   
CY. . . . . . . . . . . . . . . . . . .    B ADDR   00D0H.7 A   
C_T2. . . . . . . . . . . . . . . . . .    B ADDR   00C8H.1 A   
DEVICE_READ_SRAM_INDEX. . . . . . . . .    X ADDR   -----       EXT
DEVICE_XFER_DATALENGTH. . . . . . . . .    X ADDR   -----       EXT
DPH . . . . . . . . . . . . . . . . . .    D ADDR   0083H   A   
DPL . . . . . . . . . . . . . . . . . .    D ADDR   0082H   A   
EA. . . . . . . . . . . . . . . . . . .    B ADDR   00A8H.7 A   
ES. . . . . . . . . . . . . . . . . . .    B ADDR   00A8H.4 A   
ET0 . . . . . . . . . . . . . . . . . .    B ADDR   00A8H.1 A   
ET1 . . . . . . . . . . . . . . . . . .    B ADDR   00A8H.3 A   
ET2 . . . . . . . . . . . . . . . . . .    B ADDR   00A8H.5 A   
EX0 . . . . . . . . . . . . . . . . . .    B ADDR   00A8H.0 A   
EX1 . . . . . . . . . . . . . . . . . .    B ADDR   00A8H.2 A   
EXEN2 . . . . . . . . . . . . . . . . .    B ADDR   00C8H.3 A   
EXF2. . . . . . . . . . . . . . . . . .    B ADDR   00C8H.6 A   
F0. . . . . . . . . . . . . . . . . . .    B ADDR   00D0H.5 A   
FLASH_MULTREAD_DRAM . . . . . . . . . .    C ADDR   0000H   R   SEG=?PR?FLASH_MULTREAD_DRAM?L51_BANKINGLOADER
GBT_CODE_NEEDRECOVER. . . . . . . . . .    B ADDR   -----       EXT
GC_BANK_NUMBER. . . . . . . . . . . . .    D ADDR   0000H   R   SEG=?DT?L51_BANKINGLOADER
GC_FLASH_DATA . . . . . . . . . . . . .    X ADDR   -----       EXT
GC_INADDRMAX. . . . . . . . . . . . . .    X ADDR   -----       EXT
GW_PAGESPERBLOCK. . . . . . . . . . . .    X ADDR   -----       EXT
IE. . . . . . . . . . . . . . . . . . .    D ADDR   00A8H   A   
IE0 . . . . . . . . . . . . . . . . . .    B ADDR   0088H.1 A   
IE1 . . . . . . . . . . . . . . . . . .    B ADDR   0088H.3 A   
INT0. . . . . . . . . . . . . . . . . .    B ADDR   00B0H.2 A   
INT1. . . . . . . . . . . . . . . . . .    B ADDR   00B0H.3 A   
IP. . . . . . . . . . . . . . . . . . .    D ADDR   00B8H   A   
IT0 . . . . . . . . . . . . . . . . . .    B ADDR   0088H.0 A   
IT1 . . . . . . . . . . . . . . . . . .    B ADDR   0088H.2 A   
L51_BANKINGLOADER . . . . . . . . . . .    N NUMB   -----       
L?0034. . . . . . . . . . . . . . . . .    C ADDR   014CH   R   SEG=?PR?FLASH_MULTREAD_DRAM?L51_BANKINGLOADER
L?0035. . . . . . . . . . . . . . . . .    C ADDR   00B8H   R   SEG=?PR?LOAD_NAND_BANK?L51_BANKINGLOADER
L?0037. . . . . . . . . . . . . . . . .    C ADDR   0000H   R   SEG=?PR?L51_BANKINGLOADER
L?0038. . . . . . . . . . . . . . . . .    C ADDR   0013H   R   SEG=?PR?L51_BANKINGLOADER
L?0039. . . . . . . . . . . . . . . . .    C ADDR   0023H   R   SEG=?PR?L51_BANKINGLOADER
L?0040. . . . . . . . . . . . . . . . .    C ADDR   0175H   R   SEG=?PR?FLASH_MULTREAD_DRAM?L51_BANKINGLOADER
LCD_CLK . . . . . . . . . . . . . . . .    B ADDR   0090H.3 A   
LCD_RS. . . . . . . . . . . . . . . . .    B ADDR   0090H.2 A   
LCD_SI. . . . . . . . . . . . . . . . .    B ADDR   0090H.4 A   
LOAD_NAND_BANK. . . . . . . . . . . . .    C ADDR   0000H   R   SEG=?PR?LOAD_NAND_BANK?L51_BANKINGLOADER
LOCK_SWITCH . . . . . . . . . . . . . .    B ADDR   0090H.1 A   
NAND_INFO . . . . . . . . . . . . . . .    X ADDR   -----       EXT
OV. . . . . . . . . . . . . . . . . . .    B ADDR   00D0H.2 A   
P . . . . . . . . . . . . . . . . . . .    B ADDR   00D0H.0 A   
P0. . . . . . . . . . . . . . . . . . .    D ADDR   0080H   A   
P1. . . . . . . . . . . . . . . . . . .    D ADDR   0090H   A   
P1_3. . . . . . . . . . . . . . . . . .    B ADDR   0090H.3 A   
P1_6. . . . . . . . . . . . . . . . . .    B ADDR   0090H.6 A   
A51 MACRO ASSEMBLER  L51_BANKINGLOADER                                                    03/02/2011 09:21:39 PAGE    22

P1_7. . . . . . . . . . . . . . . . . .    B ADDR   0090H.7 A   
P2. . . . . . . . . . . . . . . . . . .    D ADDR   00A0H   A   
P3. . . . . . . . . . . . . . . . . . .    D ADDR   00B0H   A   
P3_0. . . . . . . . . . . . . . . . . .    B ADDR   00B0H.0 A   
P3_1. . . . . . . . . . . . . . . . . .    B ADDR   00B0H.1 A   
PCON. . . . . . . . . . . . . . . . . .    D ADDR   0087H   A   
PERFORM_NAND_BANK_CALL. . . . . . . . .    C ADDR   0000H   R   SEG=?PR?PERFORM_NAND_BANK_CALL?L51_BANKINGLOADER
PS. . . . . . . . . . . . . . . . . . .    B ADDR   00B8H.4 A   
PSW . . . . . . . . . . . . . . . . . .    D ADDR   00D0H   A   
PT0 . . . . . . . . . . . . . . . . . .    B ADDR   00B8H.1 A   
PT1 . . . . . . . . . . . . . . . . . .    B ADDR   00B8H.3 A   
PT2 . . . . . . . . . . . . . . . . . .    B ADDR   00B8H.5 A   
PX0 . . . . . . . . . . . . . . . . . .    B ADDR   00B8H.0 A   
PX1 . . . . . . . . . . . . . . . . . .    B ADDR   00B8H.2 A   
RAMPAGE . . . . . . . . . . . . . . . .    D ADDR   009BH   A   
RB8 . . . . . . . . . . . . . . . . . .    B ADDR   0098H.2 A   
RCAP2H. . . . . . . . . . . . . . . . .    D ADDR   00CBH   A   
RCAP2L. . . . . . . . . . . . . . . . .    D ADDR   00CAH   A   
RCLK. . . . . . . . . . . . . . . . . .    B ADDR   00C8H.5 A   
RD. . . . . . . . . . . . . . . . . . .    B ADDR   00B0H.7 A   
REN . . . . . . . . . . . . . . . . . .    B ADDR   0098H.4 A   
RESET_DMA . . . . . . . . . . . . . . .    C ADDR   -----       EXT
RETURN_FROM_NAND_BANK . . . . . . . . .    C ADDR   0000H   R   SEG=?PR?RETURN_FROM_NAND_BANK?L51_BANKINGLOADER
RI. . . . . . . . . . . . . . . . . . .    B ADDR   0098H.0 A   
RS0 . . . . . . . . . . . . . . . . . .    B ADDR   00D0H.3 A   
RS1 . . . . . . . . . . . . . . . . . .    B ADDR   00D0H.4 A   
RXD . . . . . . . . . . . . . . . . . .    B ADDR   00B0H.0 A   
SBUF. . . . . . . . . . . . . . . . . .    D ADDR   0099H   A   
SCON. . . . . . . . . . . . . . . . . .    D ADDR   0098H   A   
SD_DETECT . . . . . . . . . . . . . . .    B ADDR   0090H.1 A   
SET_DEVICE_READ_TO_DRAM . . . . . . . .    C ADDR   -----       EXT
SM0 . . . . . . . . . . . . . . . . . .    B ADDR   0098H.7 A   
SM1 . . . . . . . . . . . . . . . . . .    B ADDR   0098H.6 A   
SM2 . . . . . . . . . . . . . . . . . .    B ADDR   0098H.5 A   
SP. . . . . . . . . . . . . . . . . . .    D ADDR   0081H   A   
T0. . . . . . . . . . . . . . . . . . .    B ADDR   00B0H.4 A   
T1. . . . . . . . . . . . . . . . . . .    B ADDR   00B0H.5 A   
T2CON . . . . . . . . . . . . . . . . .    D ADDR   00C8H   A   
TB8 . . . . . . . . . . . . . . . . . .    B ADDR   0098H.3 A   
TBT_BACKUP?349. . . . . . . . . . . . .    B ADDR   0000H.0 R   SEG=?BI?FLASH_MULTREAD_DRAM?L51_BANKINGLOADER
TBT_DOSENDCOMMAND?354 . . . . . . . . .    B ADDR   0000H.1 R   SEG=?BI?FLASH_MULTREAD_DRAM?L51_BANKINGLOADER
TCLK. . . . . . . . . . . . . . . . . .    B ADDR   00C8H.4 A   
TCON. . . . . . . . . . . . . . . . . .    D ADDR   0088H   A   
TC_BANK_BLOCK?246 . . . . . . . . . . .    X ADDR   0004H   R   SEG=?XD?LOAD_NAND_BANK?L51_BANKINGLOADER
TC_BLOCK0?352 . . . . . . . . . . . . .    X ADDR   0002H   R   SEG=?XD?FLASH_MULTREAD_DRAM?L51_BANKINGLOADER
TC_BLOCK0?564 . . . . . . . . . . . . .    X ADDR   0003H   R   SEG=?XD?_BANKING_NAND_FBLOCK_FPAGE_FBANK_TO_PHYADDR_NAND
                                         ?L51_BANKINGLOADER
TC_BLOCK1?351 . . . . . . . . . . . . .    X ADDR   0001H   R   SEG=?XD?FLASH_MULTREAD_DRAM?L51_BANKINGLOADER
TC_BLOCK1?563 . . . . . . . . . . . . .    X ADDR   0002H   R   SEG=?XD?_BANKING_NAND_FBLOCK_FPAGE_FBANK_TO_PHYADDR_NAND
                                         ?L51_BANKINGLOADER
TC_FBANK?357. . . . . . . . . . . . . .    X ADDR   0007H   R   SEG=?XD?FLASH_MULTREAD_DRAM?L51_BANKINGLOADER
TC_FBANK?562. . . . . . . . . . . . . .    X ADDR   0001H   R   SEG=?XD?_BANKING_NAND_FBLOCK_FPAGE_FBANK_TO_PHYADDR_NAND
                                         ?L51_BANKINGLOADER
TC_FPAGE?242. . . . . . . . . . . . . .    X ADDR   0000H   R   SEG=?XD?LOAD_NAND_BANK?L51_BANKINGLOADER
TC_FPAGE?350. . . . . . . . . . . . . .    X ADDR   0000H   R   SEG=?XD?FLASH_MULTREAD_DRAM?L51_BANKINGLOADER
TC_FPAGE?561. . . . . . . . . . . . . .    X ADDR   0000H   R   SEG=?XD?_BANKING_NAND_FBLOCK_FPAGE_FBANK_TO_PHYADDR_NAND
                                         ?L51_BANKINGLOADER
TC_INADDR?243 . . . . . . . . . . . . .    X ADDR   0001H   R   SEG=?XD?LOAD_NAND_BANK?L51_BANKINGLOADER
TC_INADDR?356 . . . . . . . . . . . . .    X ADDR   0006H   R   SEG=?XD?FLASH_MULTREAD_DRAM?L51_BANKINGLOADER
TC_INADDRMAX?358. . . . . . . . . . . .    X ADDR   0008H   R   SEG=?XD?FLASH_MULTREAD_DRAM?L51_BANKINGLOADER
TC_PAGENUM?353. . . . . . . . . . . . .    X ADDR   0003H   R   SEG=?XD?FLASH_MULTREAD_DRAM?L51_BANKINGLOADER
TF0 . . . . . . . . . . . . . . . . . .    B ADDR   0088H.5 A   
TF1 . . . . . . . . . . . . . . . . . .    B ADDR   0088H.7 A   
TF2 . . . . . . . . . . . . . . . . . .    B ADDR   00C8H.7 A   
TGC_INADDR. . . . . . . . . . . . . . .    X ADDR   0000H   R   SEG=?XD?L51_BANKINGLOADER
TH0 . . . . . . . . . . . . . . . . . .    D ADDR   008CH   A   
A51 MACRO ASSEMBLER  L51_BANKINGLOADER                                                    03/02/2011 09:21:39 PAGE    23

TH1 . . . . . . . . . . . . . . . . . .    D ADDR   008DH   A   
TH2 . . . . . . . . . . . . . . . . . .    D ADDR   00CDH   A   
TI. . . . . . . . . . . . . . . . . . .    B ADDR   0098H.1 A   
TL0 . . . . . . . . . . . . . . . . . .    D ADDR   008AH   A   
TL1 . . . . . . . . . . . . . . . . . .    D ADDR   008BH   A   
TL2 . . . . . . . . . . . . . . . . . .    D ADDR   00CCH   A   
TMOD. . . . . . . . . . . . . . . . . .    D ADDR   0089H   A   
TR0 . . . . . . . . . . . . . . . . . .    B ADDR   0088H.4 A   
TR1 . . . . . . . . . . . . . . . . . .    B ADDR   0088H.6 A   
TR2 . . . . . . . . . . . . . . . . . .    B ADDR   00C8H.2 A   
TRIGGER_DATA_TRANSFER . . . . . . . . .    C ADDR   -----       EXT
TRIGGER_FLASH_CMD . . . . . . . . . . .    C ADDR   -----       EXT
TW_FCOLADDR?460 . . . . . . . . . . . .    X ADDR   0000H   R   SEG=?XD?_BANKING_NAND_INADDR_TO_COLUMN_NAND?L51_BANKINGL
                                         OADER
TXD . . . . . . . . . . . . . . . . . .    B ADDR   00B0H.1 A   
USING3_R0 . . . . . . . . . . . . . . .    N NUMB   0018H   A   
USING3_R1 . . . . . . . . . . . . . . .    N NUMB   0019H   A   
USING3_R2 . . . . . . . . . . . . . . .    N NUMB   001AH   A   
USING3_R3 . . . . . . . . . . . . . . .    N NUMB   001BH   A   
USING3_R4 . . . . . . . . . . . . . . .    N NUMB   001CH   A   
USING3_R5 . . . . . . . . . . . . . . .    N NUMB   001DH   A   
USING3_R6 . . . . . . . . . . . . . . .    N NUMB   001EH   A   
USING3_R7 . . . . . . . . . . . . . . .    N NUMB   001FH   A   
U_FBLOCK1?355 . . . . . . . . . . . . .    X ADDR   0004H   R   SEG=?XD?FLASH_MULTREAD_DRAM?L51_BANKINGLOADER
U_FBLOCK?244. . . . . . . . . . . . . .    X ADDR   0002H   R   SEG=?XD?LOAD_NAND_BANK?L51_BANKINGLOADER
WR. . . . . . . . . . . . . . . . . . .    B ADDR   00B0H.6 A   
_BANKING_NAND_FBLOCK_FPAGE_FBANK_TO_PHYADDRC ADDR   0000H   R   SEG=?PR?_BANKING_NAND_FBLOCK_FPAGE_FBANK_TO_PHYADDR_NAND
                                         ?L51_BANKINGLOADER
_BANKING_NAND_INADDR_TO_COLUMN_NAND . .    C ADDR   0000H   R   SEG=?PR?_BANKING_NAND_INADDR_TO_COLUMN_NAND?L51_BANKINGL
                                         OADER


REGISTER BANK(S) USED: 0 3 


ASSEMBLY COMPLETE.  0 WARNING(S), 0 ERROR(S)
